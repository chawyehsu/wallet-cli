<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="225"><g><title>rusk-wallet`&lt;dusk_wallet::wallet::file::WalletPath as core::convert::From&lt;std::path::PathBuf&gt;&gt;::from (1 samples, 0.44%)</title><rect x="0.0000%" y="437" width="0.4444%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>rusk-wallet`clap::derive::Parser::parse (1 samples, 0.44%)</title><rect x="0.4444%" y="421" width="0.4444%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.6944%" y="431.50"></text></g><g><title>rusk-wallet`clap::derive::CommandFactory::command (1 samples, 0.44%)</title><rect x="0.4444%" y="405" width="0.4444%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.6944%" y="415.50"></text></g><g><title>rusk-wallet`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.44%)</title><rect x="0.4444%" y="389" width="0.4444%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.6944%" y="399.50"></text></g><g><title>rusk-wallet`clap::builder::possible_value::PossibleValue::new (1 samples, 0.44%)</title><rect x="0.4444%" y="373" width="0.4444%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.6944%" y="383.50"></text></g><g><title>dyld`start (3 samples, 1.33%)</title><rect x="0.0000%" y="613" width="1.3333%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="3"/><text x="0.2500%" y="623.50"></text></g><g><title>rusk-wallet`main (3 samples, 1.33%)</title><rect x="0.0000%" y="597" width="1.3333%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="3"/><text x="0.2500%" y="607.50"></text></g><g><title>rusk-wallet`std::rt::lang_start_internal (3 samples, 1.33%)</title><rect x="0.0000%" y="581" width="1.3333%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="3"/><text x="0.2500%" y="591.50"></text></g><g><title>rusk-wallet`std::rt::lang_start::_{{closure}} (3 samples, 1.33%)</title><rect x="0.0000%" y="565" width="1.3333%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="3"/><text x="0.2500%" y="575.50"></text></g><g><title>rusk-wallet`std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 1.33%)</title><rect x="0.0000%" y="549" width="1.3333%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="3"/><text x="0.2500%" y="559.50"></text></g><g><title>rusk-wallet`rusk_wallet::main (3 samples, 1.33%)</title><rect x="0.0000%" y="533" width="1.3333%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="3"/><text x="0.2500%" y="543.50"></text></g><g><title>rusk-wallet`tokio::runtime::Runtime::block_on (3 samples, 1.33%)</title><rect x="0.0000%" y="517" width="1.3333%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="527.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (3 samples, 1.33%)</title><rect x="0.0000%" y="501" width="1.3333%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3"/><text x="0.2500%" y="511.50"></text></g><g><title>rusk-wallet`tokio::park::thread::CachedParkThread::block_on (3 samples, 1.33%)</title><rect x="0.0000%" y="485" width="1.3333%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="3"/><text x="0.2500%" y="495.50"></text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.33%)</title><rect x="0.0000%" y="469" width="1.3333%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="3"/><text x="0.2500%" y="479.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.33%)</title><rect x="0.0000%" y="453" width="1.3333%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="3"/><text x="0.2500%" y="463.50"></text></g><g><title>rusk-wallet`rusk_wallet::exec::_{{closure}} (2 samples, 0.89%)</title><rect x="0.4444%" y="437" width="0.8889%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="2"/><text x="0.6944%" y="447.50"></text></g><g><title>rusk-wallet`rusk_wallet::interactive::load_wallet (1 samples, 0.44%)</title><rect x="0.8889%" y="421" width="0.4444%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="1.1389%" y="431.50"></text></g><g><title>rusk-wallet`requestty::prompt_one (1 samples, 0.44%)</title><rect x="0.8889%" y="405" width="0.4444%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="1.1389%" y="415.50"></text></g><g><title>rusk-wallet`requestty::question::Question::ask (1 samples, 0.44%)</title><rect x="0.8889%" y="389" width="0.4444%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="1.1389%" y="399.50"></text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::run (1 samples, 0.44%)</title><rect x="0.8889%" y="373" width="0.4444%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="1.1389%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (6 samples, 2.67%)</title><rect x="1.3333%" y="613" width="2.6667%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="6"/><text x="1.5833%" y="623.50">li..</text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 2.22%)</title><rect x="4.0000%" y="613" width="2.2222%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="5"/><text x="4.2500%" y="623.50">l..</text></g><g><title>libsystem_kernel.dylib`__thread_selfid (2 samples, 0.89%)</title><rect x="9.7778%" y="597" width="0.8889%" height="15" fill="rgb(247,18,42)" fg:x="22" fg:w="2"/><text x="10.0278%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__disable_threadsignal (4 samples, 1.78%)</title><rect x="10.6667%" y="581" width="1.7778%" height="15" fill="rgb(241,131,45)" fg:x="24" fg:w="4"/><text x="10.9167%" y="591.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (10 samples, 4.44%)</title><rect x="12.4444%" y="565" width="4.4444%" height="15" fill="rgb(249,31,29)" fg:x="28" fg:w="10"/><text x="12.6944%" y="575.50">libsy..</text></g><g><title>libsystem_pthread.dylib`_pthread_terminate (4 samples, 1.78%)</title><rect x="16.8889%" y="565" width="1.7778%" height="15" fill="rgb(225,111,53)" fg:x="38" fg:w="4"/><text x="17.1389%" y="575.50">l..</text></g><g><title>libsystem_kernel.dylib`__bsdthread_terminate (4 samples, 1.78%)</title><rect x="16.8889%" y="549" width="1.7778%" height="15" fill="rgb(238,160,17)" fg:x="38" fg:w="4"/><text x="17.1389%" y="559.50">l..</text></g><g><title>libsystem_pthread.dylib`_pthread_exit (17 samples, 7.56%)</title><rect x="12.4444%" y="581" width="7.5556%" height="15" fill="rgb(214,148,48)" fg:x="28" fg:w="17"/><text x="12.6944%" y="591.50">libsystem_..</text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (3 samples, 1.33%)</title><rect x="18.6667%" y="565" width="1.3333%" height="15" fill="rgb(232,36,49)" fg:x="42" fg:w="3"/><text x="18.9167%" y="575.50"></text></g><g><title>Network`nw_path_create_evaluator_for_endpoint_no_evaluate (1 samples, 0.44%)</title><rect x="20.0000%" y="357" width="0.4444%" height="15" fill="rgb(209,103,24)" fg:x="45" fg:w="1"/><text x="20.2500%" y="367.50"></text></g><g><title>Network`-[NWConcrete_nw_parameters initWithStack:] (1 samples, 0.44%)</title><rect x="20.0000%" y="341" width="0.4444%" height="15" fill="rgb(229,88,8)" fg:x="45" fg:w="1"/><text x="20.2500%" y="351.50"></text></g><g><title>Network`networkd_settings_init (1 samples, 0.44%)</title><rect x="20.0000%" y="325" width="0.4444%" height="15" fill="rgb(213,181,19)" fg:x="45" fg:w="1"/><text x="20.2500%" y="335.50"></text></g><g><title>Network`networkd_settings_read_from_file() (1 samples, 0.44%)</title><rect x="20.0000%" y="309" width="0.4444%" height="15" fill="rgb(254,191,54)" fg:x="45" fg:w="1"/><text x="20.2500%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_once (1 samples, 0.44%)</title><rect x="20.0000%" y="293" width="0.4444%" height="15" fill="rgb(241,83,37)" fg:x="45" fg:w="1"/><text x="20.2500%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_os_once_callout (1 samples, 0.44%)</title><rect x="20.0000%" y="277" width="0.4444%" height="15" fill="rgb(233,36,39)" fg:x="45" fg:w="1"/><text x="20.2500%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`__pthread_once_handler (1 samples, 0.44%)</title><rect x="20.0000%" y="261" width="0.4444%" height="15" fill="rgb(226,3,54)" fg:x="45" fg:w="1"/><text x="20.2500%" y="271.50"></text></g><g><title>Network`nwlog_legacy_init_once() (1 samples, 0.44%)</title><rect x="20.0000%" y="245" width="0.4444%" height="15" fill="rgb(245,192,40)" fg:x="45" fg:w="1"/><text x="20.2500%" y="255.50"></text></g><g><title>libsystem_trace.dylib`os_log_create (1 samples, 0.44%)</title><rect x="20.0000%" y="229" width="0.4444%" height="15" fill="rgb(238,167,29)" fg:x="45" fg:w="1"/><text x="20.2500%" y="239.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.44%)</title><rect x="20.0000%" y="213" width="0.4444%" height="15" fill="rgb(232,182,51)" fg:x="45" fg:w="1"/><text x="20.2500%" y="223.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.44%)</title><rect x="20.0000%" y="197" width="0.4444%" height="15" fill="rgb(231,60,39)" fg:x="45" fg:w="1"/><text x="20.2500%" y="207.50"></text></g><g><title>libsystem_trace.dylib`_os_trace_init_slow (1 samples, 0.44%)</title><rect x="20.0000%" y="181" width="0.4444%" height="15" fill="rgb(208,69,12)" fg:x="45" fg:w="1"/><text x="20.2500%" y="191.50"></text></g><g><title>libxpc.dylib`xpc_bundle_get_info_dictionary (1 samples, 0.44%)</title><rect x="20.0000%" y="165" width="0.4444%" height="15" fill="rgb(235,93,37)" fg:x="45" fg:w="1"/><text x="20.2500%" y="175.50"></text></g><g><title>libxpc.dylib`_xpc_bundle_resolve (1 samples, 0.44%)</title><rect x="20.0000%" y="149" width="0.4444%" height="15" fill="rgb(213,116,39)" fg:x="45" fg:w="1"/><text x="20.2500%" y="159.50"></text></g><g><title>libdispatch.dylib`_dispatch_once_callout (1 samples, 0.44%)</title><rect x="20.0000%" y="133" width="0.4444%" height="15" fill="rgb(222,207,29)" fg:x="45" fg:w="1"/><text x="20.2500%" y="143.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (1 samples, 0.44%)</title><rect x="20.0000%" y="117" width="0.4444%" height="15" fill="rgb(206,96,30)" fg:x="45" fg:w="1"/><text x="20.2500%" y="127.50"></text></g><g><title>libxpc.dylib`___xpc_bundle_resolve_block_invoke (1 samples, 0.44%)</title><rect x="20.0000%" y="101" width="0.4444%" height="15" fill="rgb(218,138,4)" fg:x="45" fg:w="1"/><text x="20.2500%" y="111.50"></text></g><g><title>libxpc.dylib`_xpc_bundle_resolve_sync (1 samples, 0.44%)</title><rect x="20.0000%" y="85" width="0.4444%" height="15" fill="rgb(250,191,14)" fg:x="45" fg:w="1"/><text x="20.2500%" y="95.50"></text></g><g><title>libxpc.dylib`_xpc_bundle_resolve_root (1 samples, 0.44%)</title><rect x="20.0000%" y="69" width="0.4444%" height="15" fill="rgb(239,60,40)" fg:x="45" fg:w="1"/><text x="20.2500%" y="79.50"></text></g><g><title>libxpc.dylib`_resolve_and_stat_path (1 samples, 0.44%)</title><rect x="20.0000%" y="53" width="0.4444%" height="15" fill="rgb(206,27,48)" fg:x="45" fg:w="1"/><text x="20.2500%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.44%)</title><rect x="20.0000%" y="37" width="0.4444%" height="15" fill="rgb(225,35,8)" fg:x="45" fg:w="1"/><text x="20.2500%" y="47.50"></text></g><g><title>Network`nw_parameters_get_attributed_bundle_identifier (1 samples, 0.44%)</title><rect x="20.4444%" y="341" width="0.4444%" height="15" fill="rgb(250,213,24)" fg:x="46" fg:w="1"/><text x="20.6944%" y="351.50"></text></g><g><title>libsystem_info.dylib`_gai_nat64_second_pass (3 samples, 1.33%)</title><rect x="20.0000%" y="405" width="1.3333%" height="15" fill="rgb(247,123,22)" fg:x="45" fg:w="3"/><text x="20.2500%" y="415.50"></text></g><g><title>Network`nw_nat64_v4_address_requires_synthesis (3 samples, 1.33%)</title><rect x="20.0000%" y="389" width="1.3333%" height="15" fill="rgb(231,138,38)" fg:x="45" fg:w="3"/><text x="20.2500%" y="399.50"></text></g><g><title>Network`nw_path_create_evaluator_for_endpoint (3 samples, 1.33%)</title><rect x="20.0000%" y="373" width="1.3333%" height="15" fill="rgb(231,145,46)" fg:x="45" fg:w="3"/><text x="20.2500%" y="383.50"></text></g><g><title>Network`nw_path_evaluator_evaluate (2 samples, 0.89%)</title><rect x="20.4444%" y="357" width="0.8889%" height="15" fill="rgb(251,118,11)" fg:x="46" fg:w="2"/><text x="20.6944%" y="367.50"></text></g><g><title>Network`nw_path_parse_necp_result (1 samples, 0.44%)</title><rect x="20.8889%" y="341" width="0.4444%" height="15" fill="rgb(217,147,25)" fg:x="47" fg:w="1"/><text x="21.1389%" y="351.50"></text></g><g><title>rusk-wallet`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 1.78%)</title><rect x="20.0000%" y="501" width="1.7778%" height="15" fill="rgb(247,81,37)" fg:x="45" fg:w="4"/><text x="20.2500%" y="511.50">r..</text></g><g><title>rusk-wallet`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (4 samples, 1.78%)</title><rect x="20.0000%" y="485" width="1.7778%" height="15" fill="rgb(209,12,38)" fg:x="45" fg:w="4"/><text x="20.2500%" y="495.50">r..</text></g><g><title>rusk-wallet`&lt;(&amp;str,u16) as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (4 samples, 1.78%)</title><rect x="20.0000%" y="469" width="1.7778%" height="15" fill="rgb(227,1,9)" fg:x="45" fg:w="4"/><text x="20.2500%" y="479.50">r..</text></g><g><title>rusk-wallet`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (4 samples, 1.78%)</title><rect x="20.0000%" y="453" width="1.7778%" height="15" fill="rgb(248,47,43)" fg:x="45" fg:w="4"/><text x="20.2500%" y="463.50">r..</text></g><g><title>libsystem_info.dylib`getaddrinfo (4 samples, 1.78%)</title><rect x="20.0000%" y="437" width="1.7778%" height="15" fill="rgb(221,10,30)" fg:x="45" fg:w="4"/><text x="20.2500%" y="447.50">l..</text></g><g><title>libsystem_info.dylib`si_addrinfo (4 samples, 1.78%)</title><rect x="20.0000%" y="421" width="1.7778%" height="15" fill="rgb(210,229,1)" fg:x="45" fg:w="4"/><text x="20.2500%" y="431.50">l..</text></g><g><title>libsystem_info.dylib`search_addrinfo (1 samples, 0.44%)</title><rect x="21.3333%" y="405" width="0.4444%" height="15" fill="rgb(222,148,37)" fg:x="48" fg:w="1"/><text x="21.5833%" y="415.50"></text></g><g><title>libsystem_info.dylib`mdns_addrinfo (1 samples, 0.44%)</title><rect x="21.3333%" y="389" width="0.4444%" height="15" fill="rgb(234,67,33)" fg:x="48" fg:w="1"/><text x="21.5833%" y="399.50"></text></g><g><title>libsystem_info.dylib`_mdns_search_ex (1 samples, 0.44%)</title><rect x="21.3333%" y="373" width="0.4444%" height="15" fill="rgb(247,98,35)" fg:x="48" fg:w="1"/><text x="21.5833%" y="383.50"></text></g><g><title>libsystem_info.dylib`_mdns_query_start (1 samples, 0.44%)</title><rect x="21.3333%" y="357" width="0.4444%" height="15" fill="rgb(247,138,52)" fg:x="48" fg:w="1"/><text x="21.5833%" y="367.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceQueryRecordInternal (1 samples, 0.44%)</title><rect x="21.3333%" y="341" width="0.4444%" height="15" fill="rgb(213,79,30)" fg:x="48" fg:w="1"/><text x="21.5833%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`setsockopt (1 samples, 0.44%)</title><rect x="21.3333%" y="325" width="0.4444%" height="15" fill="rgb(246,177,23)" fg:x="48" fg:w="1"/><text x="21.5833%" y="335.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.44%)</title><rect x="21.7778%" y="437" width="0.4444%" height="15" fill="rgb(230,62,27)" fg:x="49" fg:w="1"/><text x="22.0278%" y="447.50"></text></g><g><title>rusk-wallet`&lt;tokio::runtime::scheduler::multi_thread::park::Parker as tokio::park::Park&gt;::park (1 samples, 0.44%)</title><rect x="21.7778%" y="421" width="0.4444%" height="15" fill="rgb(216,154,8)" fg:x="49" fg:w="1"/><text x="22.0278%" y="431.50"></text></g><g><title>rusk-wallet`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.44%)</title><rect x="21.7778%" y="405" width="0.4444%" height="15" fill="rgb(244,35,45)" fg:x="49" fg:w="1"/><text x="22.0278%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.44%)</title><rect x="21.7778%" y="389" width="0.4444%" height="15" fill="rgb(251,115,12)" fg:x="49" fg:w="1"/><text x="22.0278%" y="399.50"></text></g><g><title>rusk-wallet`std::sys::unix::thread::Thread::new::thread_start (6 samples, 2.67%)</title><rect x="20.0000%" y="581" width="2.6667%" height="15" fill="rgb(240,54,50)" fg:x="45" fg:w="6"/><text x="20.2500%" y="591.50">ru..</text></g><g><title>rusk-wallet`core::ops::function::FnOnce::call_once{{vtable.shim}} (6 samples, 2.67%)</title><rect x="20.0000%" y="565" width="2.6667%" height="15" fill="rgb(233,84,52)" fg:x="45" fg:w="6"/><text x="20.2500%" y="575.50">ru..</text></g><g><title>rusk-wallet`std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 2.67%)</title><rect x="20.0000%" y="549" width="2.6667%" height="15" fill="rgb(207,117,47)" fg:x="45" fg:w="6"/><text x="20.2500%" y="559.50">ru..</text></g><g><title>rusk-wallet`tokio::runtime::blocking::pool::Inner::run (6 samples, 2.67%)</title><rect x="20.0000%" y="533" width="2.6667%" height="15" fill="rgb(249,43,39)" fg:x="45" fg:w="6"/><text x="20.2500%" y="543.50">ru..</text></g><g><title>rusk-wallet`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6 samples, 2.67%)</title><rect x="20.0000%" y="517" width="2.6667%" height="15" fill="rgb(209,38,44)" fg:x="45" fg:w="6"/><text x="20.2500%" y="527.50">ru..</text></g><g><title>rusk-wallet`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.89%)</title><rect x="21.7778%" y="501" width="0.8889%" height="15" fill="rgb(236,212,23)" fg:x="49" fg:w="2"/><text x="22.0278%" y="511.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::run (2 samples, 0.89%)</title><rect x="21.7778%" y="485" width="0.8889%" height="15" fill="rgb(242,79,21)" fg:x="49" fg:w="2"/><text x="22.0278%" y="495.50"></text></g><g><title>rusk-wallet`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (2 samples, 0.89%)</title><rect x="21.7778%" y="469" width="0.8889%" height="15" fill="rgb(211,96,35)" fg:x="49" fg:w="2"/><text x="22.0278%" y="479.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::Context::run (2 samples, 0.89%)</title><rect x="21.7778%" y="453" width="0.8889%" height="15" fill="rgb(253,215,40)" fg:x="49" fg:w="2"/><text x="22.0278%" y="463.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1 samples, 0.44%)</title><rect x="22.2222%" y="437" width="0.4444%" height="15" fill="rgb(211,81,21)" fg:x="50" fg:w="1"/><text x="22.4722%" y="447.50"></text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.44%)</title><rect x="22.2222%" y="421" width="0.4444%" height="15" fill="rgb(208,190,38)" fg:x="50" fg:w="1"/><text x="22.4722%" y="431.50"></text></g><g><title>rusk-wallet`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1 samples, 0.44%)</title><rect x="22.2222%" y="405" width="0.4444%" height="15" fill="rgb(235,213,38)" fg:x="50" fg:w="1"/><text x="22.4722%" y="415.50"></text></g><g><title>rusk-wallet`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (1 samples, 0.44%)</title><rect x="22.2222%" y="389" width="0.4444%" height="15" fill="rgb(237,122,38)" fg:x="50" fg:w="1"/><text x="22.4722%" y="399.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="22.2222%" y="373" width="0.4444%" height="15" fill="rgb(244,218,35)" fg:x="50" fg:w="1"/><text x="22.4722%" y="383.50"></text></g><g><title>rusk-wallet`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="22.2222%" y="357" width="0.4444%" height="15" fill="rgb(240,68,47)" fg:x="50" fg:w="1"/><text x="22.4722%" y="367.50"></text></g><g><title>rusk-wallet`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="22.2222%" y="341" width="0.4444%" height="15" fill="rgb(210,16,53)" fg:x="50" fg:w="1"/><text x="22.4722%" y="351.50"></text></g><g><title>rusk-wallet`&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="22.2222%" y="325" width="0.4444%" height="15" fill="rgb(235,124,12)" fg:x="50" fg:w="1"/><text x="22.4722%" y="335.50"></text></g><g><title>rusk-wallet`h2::proto::connection::Connection&lt;T,P,B&gt;::poll (1 samples, 0.44%)</title><rect x="22.2222%" y="309" width="0.4444%" height="15" fill="rgb(224,169,11)" fg:x="50" fg:w="1"/><text x="22.4722%" y="319.50"></text></g><g><title>rusk-wallet`void* std::__1::__thread_proxy[abi:v15006]&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt;&gt;, std::__1::function&lt;void ()&gt;&gt;&gt; (2 samples, 0.89%)</title><rect x="22.6667%" y="581" width="0.8889%" height="15" fill="rgb(250,166,2)" fg:x="51" fg:w="2"/><text x="22.9167%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.89%)</title><rect x="22.6667%" y="565" width="0.8889%" height="15" fill="rgb(242,216,29)" fg:x="51" fg:w="2"/><text x="22.9167%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb::InstrumentedMutex::Lock (1 samples, 0.44%)</title><rect x="23.5556%" y="533" width="0.4444%" height="15" fill="rgb(230,116,27)" fg:x="53" fg:w="1"/><text x="23.8056%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (1 samples, 0.44%)</title><rect x="23.5556%" y="517" width="0.4444%" height="15" fill="rgb(228,99,48)" fg:x="53" fg:w="1"/><text x="23.8056%" y="527.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.44%)</title><rect x="23.5556%" y="501" width="0.4444%" height="15" fill="rgb(253,11,6)" fg:x="53" fg:w="1"/><text x="23.8056%" y="511.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.44%)</title><rect x="24.0000%" y="501" width="0.4444%" height="15" fill="rgb(247,143,39)" fg:x="54" fg:w="1"/><text x="24.2500%" y="511.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.44%)</title><rect x="24.0000%" y="485" width="0.4444%" height="15" fill="rgb(236,97,10)" fg:x="54" fg:w="1"/><text x="24.2500%" y="495.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.44%)</title><rect x="24.0000%" y="469" width="0.4444%" height="15" fill="rgb(233,208,19)" fg:x="54" fg:w="1"/><text x="24.2500%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PrepareLevelStats(std::__1::map&lt;rocksdb::LevelStatType, double, std::__1::less&lt;rocksdb::LevelStatType&gt;, std::__1::allocator&lt;std::__1::pair (1 samples, 0.44%)</title><rect x="24.4444%" y="501" width="0.4444%" height="15" fill="rgb(216,164,2)" fg:x="55" fg:w="1"/><text x="24.6944%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (43 samples, 19.11%)</title><rect x="6.2222%" y="613" width="19.1111%" height="15" fill="rgb(220,129,5)" fg:x="14" fg:w="43"/><text x="6.4722%" y="623.50">libsystem_pthread.dylib`thread..</text></g><g><title>libsystem_pthread.dylib`_pthread_start (33 samples, 14.67%)</title><rect x="10.6667%" y="597" width="14.6667%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="33"/><text x="10.9167%" y="607.50">libsystem_pthread.dyli..</text></g><g><title>rusk-wallet`void* std::__1::__thread_proxy[abi:v15006]&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt;&gt;, void (rocksdb::Timer::*)(), rocksdb::Timer*&gt;&gt; (4 samples, 1.78%)</title><rect x="23.5556%" y="581" width="1.7778%" height="15" fill="rgb(242,107,0)" fg:x="53" fg:w="4"/><text x="23.8056%" y="591.50">r..</text></g><g><title>rusk-wallet`rocksdb::Timer::Run (4 samples, 1.78%)</title><rect x="23.5556%" y="565" width="1.7778%" height="15" fill="rgb(251,28,31)" fg:x="53" fg:w="4"/><text x="23.8056%" y="575.50">r..</text></g><g><title>rusk-wallet`rocksdb::DBImpl::DumpStats (4 samples, 1.78%)</title><rect x="23.5556%" y="549" width="1.7778%" height="15" fill="rgb(233,223,10)" fg:x="53" fg:w="4"/><text x="23.8056%" y="559.50">r..</text></g><g><title>rusk-wallet`rocksdb::InternalStats::HandleCFStatsPeriodic(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="24.0000%" y="533" width="1.3333%" height="15" fill="rgb(215,21,27)" fg:x="54" fg:w="3"/><text x="24.2500%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::InternalStats::DumpCFStatsNoFileHistogram(bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="24.0000%" y="517" width="1.3333%" height="15" fill="rgb(232,23,21)" fg:x="54" fg:w="3"/><text x="24.2500%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PrintLevelStats(char*, unsigned long, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::map&lt;rocksdb::LevelStatType, double, std::__1::less&lt;rocksdb::LevelStatType&gt;, std::__1::allocator&lt;std::__1::pair (1 samples, 0.44%)</title><rect x="24.8889%" y="501" width="0.4444%" height="15" fill="rgb(244,5,23)" fg:x="56" fg:w="1"/><text x="25.1389%" y="511.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.44%)</title><rect x="24.8889%" y="485" width="0.4444%" height="15" fill="rgb(226,81,46)" fg:x="56" fg:w="1"/><text x="25.1389%" y="495.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.44%)</title><rect x="24.8889%" y="469" width="0.4444%" height="15" fill="rgb(247,70,30)" fg:x="56" fg:w="1"/><text x="25.1389%" y="479.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.44%)</title><rect x="24.8889%" y="453" width="0.4444%" height="15" fill="rgb(212,68,19)" fg:x="56" fg:w="1"/><text x="25.1389%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.44%)</title><rect x="24.8889%" y="437" width="0.4444%" height="15" fill="rgb(240,187,13)" fg:x="56" fg:w="1"/><text x="25.1389%" y="447.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="25.3333%" y="549" width="0.4444%" height="15" fill="rgb(223,113,26)" fg:x="57" fg:w="1"/><text x="25.5833%" y="559.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="25.3333%" y="533" width="0.4444%" height="15" fill="rgb(206,192,2)" fg:x="57" fg:w="1"/><text x="25.5833%" y="543.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::connection::Connection as tower_service::Service&lt;http::request::Request&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,tonic::status::Status&gt;&gt;&gt;&gt;::poll_ready (1 samples, 0.44%)</title><rect x="25.3333%" y="517" width="0.4444%" height="15" fill="rgb(241,108,4)" fg:x="57" fg:w="1"/><text x="25.5833%" y="527.50"></text></g><g><title>rusk-wallet`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (1 samples, 0.44%)</title><rect x="25.3333%" y="501" width="0.4444%" height="15" fill="rgb(247,173,49)" fg:x="57" fg:w="1"/><text x="25.5833%" y="511.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::grpc_timeout::GrpcTimeout&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::poll_ready (1 samples, 0.44%)</title><rect x="25.3333%" y="485" width="0.4444%" height="15" fill="rgb(224,114,35)" fg:x="57" fg:w="1"/><text x="25.5833%" y="495.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.44%)</title><rect x="25.3333%" y="469" width="0.4444%" height="15" fill="rgb(245,159,27)" fg:x="57" fg:w="1"/><text x="25.5833%" y="479.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="25.3333%" y="453" width="0.4444%" height="15" fill="rgb(245,172,44)" fg:x="57" fg:w="1"/><text x="25.5833%" y="463.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="25.3333%" y="437" width="0.4444%" height="15" fill="rgb(236,23,11)" fg:x="57" fg:w="1"/><text x="25.5833%" y="447.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Add&lt;&amp;dusk_jubjub::ExtendedNielsPoint&gt;&gt;::add (1 samples, 0.44%)</title><rect x="25.7778%" y="437" width="0.4444%" height="15" fill="rgb(205,117,38)" fg:x="58" fg:w="1"/><text x="26.0278%" y="447.50"></text></g><g><title>rusk-wallet`tokio::park::thread::CachedParkThread::block_on (3 samples, 1.33%)</title><rect x="25.3333%" y="613" width="1.3333%" height="15" fill="rgb(237,72,25)" fg:x="57" fg:w="3"/><text x="25.5833%" y="623.50"></text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (3 samples, 1.33%)</title><rect x="25.3333%" y="597" width="1.3333%" height="15" fill="rgb(244,70,9)" fg:x="57" fg:w="3"/><text x="25.5833%" y="607.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.33%)</title><rect x="25.3333%" y="581" width="1.3333%" height="15" fill="rgb(217,125,39)" fg:x="57" fg:w="3"/><text x="25.5833%" y="591.50"></text></g><g><title>rusk-wallet`rusk_wallet::exec::_{{closure}} (3 samples, 1.33%)</title><rect x="25.3333%" y="565" width="1.3333%" height="15" fill="rgb(235,36,10)" fg:x="57" fg:w="3"/><text x="25.5833%" y="575.50"></text></g><g><title>rusk-wallet`rusk_wallet::interactive::load_wallet (2 samples, 0.89%)</title><rect x="25.7778%" y="549" width="0.8889%" height="15" fill="rgb(251,123,47)" fg:x="58" fg:w="2"/><text x="26.0278%" y="559.50"></text></g><g><title>rusk-wallet`dusk_wallet::wallet::Wallet&lt;F&gt;::from_file (2 samples, 0.89%)</title><rect x="25.7778%" y="533" width="0.8889%" height="15" fill="rgb(221,13,13)" fg:x="58" fg:w="2"/><text x="26.0278%" y="543.50"></text></g><g><title>rusk-wallet`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.89%)</title><rect x="25.7778%" y="517" width="0.8889%" height="15" fill="rgb(238,131,9)" fg:x="58" fg:w="2"/><text x="26.0278%" y="527.50"></text></g><g><title>rusk-wallet`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.89%)</title><rect x="25.7778%" y="501" width="0.8889%" height="15" fill="rgb(211,50,8)" fg:x="58" fg:w="2"/><text x="26.0278%" y="511.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::public_spend_key (2 samples, 0.89%)</title><rect x="25.7778%" y="485" width="0.8889%" height="15" fill="rgb(245,182,24)" fg:x="58" fg:w="2"/><text x="26.0278%" y="495.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (2 samples, 0.89%)</title><rect x="25.7778%" y="469" width="0.8889%" height="15" fill="rgb(242,14,37)" fg:x="58" fg:w="2"/><text x="26.0278%" y="479.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (2 samples, 0.89%)</title><rect x="25.7778%" y="453" width="0.8889%" height="15" fill="rgb(246,228,12)" fg:x="58" fg:w="2"/><text x="26.0278%" y="463.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.44%)</title><rect x="26.2222%" y="437" width="0.4444%" height="15" fill="rgb(213,55,15)" fg:x="59" fg:w="1"/><text x="26.4722%" y="447.50"></text></g><g><title>rusk-wallet`&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (1 samples, 0.44%)</title><rect x="26.6667%" y="581" width="0.4444%" height="15" fill="rgb(209,9,3)" fg:x="60" fg:w="1"/><text x="26.9167%" y="591.50"></text></g><g><title>rusk-wallet`tokio::park::thread::Inner::park (1 samples, 0.44%)</title><rect x="26.6667%" y="565" width="0.4444%" height="15" fill="rgb(230,59,30)" fg:x="60" fg:w="1"/><text x="26.9167%" y="575.50"></text></g><g><title>rusk-wallet`parking_lot::condvar::Condvar::wait_until_internal (1 samples, 0.44%)</title><rect x="26.6667%" y="549" width="0.4444%" height="15" fill="rgb(209,121,21)" fg:x="60" fg:w="1"/><text x="26.9167%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1 samples, 0.44%)</title><rect x="26.6667%" y="533" width="0.4444%" height="15" fill="rgb(220,109,13)" fg:x="60" fg:w="1"/><text x="26.9167%" y="543.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="27.1111%" y="405" width="0.4444%" height="15" fill="rgb(232,18,1)" fg:x="61" fg:w="1"/><text x="27.3611%" y="415.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="27.1111%" y="389" width="0.4444%" height="15" fill="rgb(215,41,42)" fg:x="61" fg:w="1"/><text x="27.3611%" y="399.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.44%)</title><rect x="27.1111%" y="373" width="0.4444%" height="15" fill="rgb(224,123,36)" fg:x="61" fg:w="1"/><text x="27.3611%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__connect (1 samples, 0.44%)</title><rect x="27.1111%" y="357" width="0.4444%" height="15" fill="rgb(240,125,3)" fg:x="61" fg:w="1"/><text x="27.3611%" y="367.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.89%)</title><rect x="27.1111%" y="421" width="0.8889%" height="15" fill="rgb(205,98,50)" fg:x="61" fg:w="2"/><text x="27.3611%" y="431.50"></text></g><g><title>rusk-wallet`core::ptr::drop_in_place&lt;tracing::span::Span&gt; (1 samples, 0.44%)</title><rect x="27.5556%" y="405" width="0.4444%" height="15" fill="rgb(205,185,37)" fg:x="62" fg:w="1"/><text x="27.8056%" y="415.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.33%)</title><rect x="27.1111%" y="533" width="1.3333%" height="15" fill="rgb(238,207,15)" fg:x="61" fg:w="3"/><text x="27.3611%" y="543.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.33%)</title><rect x="27.1111%" y="517" width="1.3333%" height="15" fill="rgb(213,199,42)" fg:x="61" fg:w="3"/><text x="27.3611%" y="527.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::connection::Connection as tower_service::Service&lt;http::request::Request&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,tonic::status::Status&gt;&gt;&gt;&gt;::poll_ready (3 samples, 1.33%)</title><rect x="27.1111%" y="501" width="1.3333%" height="15" fill="rgb(235,201,11)" fg:x="61" fg:w="3"/><text x="27.3611%" y="511.50"></text></g><g><title>rusk-wallet`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (3 samples, 1.33%)</title><rect x="27.1111%" y="485" width="1.3333%" height="15" fill="rgb(207,46,11)" fg:x="61" fg:w="3"/><text x="27.3611%" y="495.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::grpc_timeout::GrpcTimeout&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::poll_ready (3 samples, 1.33%)</title><rect x="27.1111%" y="469" width="1.3333%" height="15" fill="rgb(241,35,35)" fg:x="61" fg:w="3"/><text x="27.3611%" y="479.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (3 samples, 1.33%)</title><rect x="27.1111%" y="453" width="1.3333%" height="15" fill="rgb(243,32,47)" fg:x="61" fg:w="3"/><text x="27.3611%" y="463.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 1.33%)</title><rect x="27.1111%" y="437" width="1.3333%" height="15" fill="rgb(247,202,23)" fg:x="61" fg:w="3"/><text x="27.3611%" y="447.50"></text></g><g><title>rusk-wallet`tokio::sync::mpsc::chan::channel (1 samples, 0.44%)</title><rect x="28.0000%" y="421" width="0.4444%" height="15" fill="rgb(219,102,11)" fg:x="63" fg:w="1"/><text x="28.2500%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::GetCurrentManifestPath(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FileSystem*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="28.4444%" y="453" width="0.4444%" height="15" fill="rgb(243,110,44)" fg:x="64" fg:w="1"/><text x="28.6944%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ReadFileToString(rocksdb::FileSystem*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="28.4444%" y="437" width="0.4444%" height="15" fill="rgb(222,74,54)" fg:x="64" fg:w="1"/><text x="28.6944%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::PosixSequentialFile::Read (1 samples, 0.44%)</title><rect x="28.4444%" y="421" width="0.4444%" height="15" fill="rgb(216,99,12)" fg:x="64" fg:w="1"/><text x="28.6944%" y="431.50"></text></g><g><title>libsystem_c.dylib`fread (1 samples, 0.44%)</title><rect x="28.4444%" y="405" width="0.4444%" height="15" fill="rgb(226,22,26)" fg:x="64" fg:w="1"/><text x="28.6944%" y="415.50"></text></g><g><title>libsystem_c.dylib`__fread (1 samples, 0.44%)</title><rect x="28.4444%" y="389" width="0.4444%" height="15" fill="rgb(217,163,10)" fg:x="64" fg:w="1"/><text x="28.6944%" y="399.50"></text></g><g><title>libsystem_c.dylib`__srefill1 (1 samples, 0.44%)</title><rect x="28.4444%" y="373" width="0.4444%" height="15" fill="rgb(213,25,53)" fg:x="64" fg:w="1"/><text x="28.6944%" y="383.50"></text></g><g><title>libsystem_c.dylib`_sread (1 samples, 0.44%)</title><rect x="28.4444%" y="357" width="0.4444%" height="15" fill="rgb(252,105,26)" fg:x="64" fg:w="1"/><text x="28.6944%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__read_nocancel (1 samples, 0.44%)</title><rect x="28.4444%" y="341" width="0.4444%" height="15" fill="rgb(220,39,43)" fg:x="64" fg:w="1"/><text x="28.6944%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;T,D&gt;::list_cf (2 samples, 0.89%)</title><rect x="28.4444%" y="501" width="0.8889%" height="15" fill="rgb(229,68,48)" fg:x="64" fg:w="2"/><text x="28.6944%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb_list_column_families (2 samples, 0.89%)</title><rect x="28.4444%" y="485" width="0.8889%" height="15" fill="rgb(252,8,32)" fg:x="64" fg:w="2"/><text x="28.6944%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::ListColumnFamilies(std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="28.4444%" y="469" width="0.8889%" height="15" fill="rgb(223,20,43)" fg:x="64" fg:w="2"/><text x="28.6944%" y="479.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;::__push_back_slow_path&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="28.8889%" y="453" width="0.4444%" height="15" fill="rgb(229,81,49)" fg:x="65" fg:w="1"/><text x="29.1389%" y="463.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.44%)</title><rect x="29.3333%" y="293" width="0.4444%" height="15" fill="rgb(236,28,36)" fg:x="66" fg:w="1"/><text x="29.5833%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.44%)</title><rect x="29.3333%" y="277" width="0.4444%" height="15" fill="rgb(249,185,26)" fg:x="66" fg:w="1"/><text x="29.5833%" y="287.50"></text></g><g><title>rusk-wallet`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.89%)</title><rect x="29.3333%" y="485" width="0.8889%" height="15" fill="rgb(249,174,33)" fg:x="66" fg:w="2"/><text x="29.5833%" y="495.50"></text></g><g><title>rusk-wallet`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.89%)</title><rect x="29.3333%" y="469" width="0.8889%" height="15" fill="rgb(233,201,37)" fg:x="66" fg:w="2"/><text x="29.5833%" y="479.50"></text></g><g><title>rusk-wallet`&lt;rocksdb::db_options::Options as core::default::Default&gt;::default (2 samples, 0.89%)</title><rect x="29.3333%" y="453" width="0.8889%" height="15" fill="rgb(221,78,26)" fg:x="66" fg:w="2"/><text x="29.5833%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb_options_create (2 samples, 0.89%)</title><rect x="29.3333%" y="437" width="0.8889%" height="15" fill="rgb(250,127,30)" fg:x="66" fg:w="2"/><text x="29.5833%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (2 samples, 0.89%)</title><rect x="29.3333%" y="421" width="0.8889%" height="15" fill="rgb(230,49,44)" fg:x="66" fg:w="2"/><text x="29.5833%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (2 samples, 0.89%)</title><rect x="29.3333%" y="405" width="0.8889%" height="15" fill="rgb(229,67,23)" fg:x="66" fg:w="2"/><text x="29.5833%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (2 samples, 0.89%)</title><rect x="29.3333%" y="389" width="0.8889%" height="15" fill="rgb(249,83,47)" fg:x="66" fg:w="2"/><text x="29.5833%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (2 samples, 0.89%)</title><rect x="29.3333%" y="373" width="0.8889%" height="15" fill="rgb(215,43,3)" fg:x="66" fg:w="2"/><text x="29.5833%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (2 samples, 0.89%)</title><rect x="29.3333%" y="357" width="0.8889%" height="15" fill="rgb(238,154,13)" fg:x="66" fg:w="2"/><text x="29.5833%" y="367.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (2 samples, 0.89%)</title><rect x="29.3333%" y="341" width="0.8889%" height="15" fill="rgb(219,56,2)" fg:x="66" fg:w="2"/><text x="29.5833%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (2 samples, 0.89%)</title><rect x="29.3333%" y="325" width="0.8889%" height="15" fill="rgb(233,0,4)" fg:x="66" fg:w="2"/><text x="29.5833%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (2 samples, 0.89%)</title><rect x="29.3333%" y="309" width="0.8889%" height="15" fill="rgb(235,30,7)" fg:x="66" fg:w="2"/><text x="29.5833%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.44%)</title><rect x="29.7778%" y="293" width="0.4444%" height="15" fill="rgb(250,79,13)" fg:x="67" fg:w="1"/><text x="30.0278%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::TryInsertIntoSecondaryCache(rocksdb::autovector (1 samples, 0.44%)</title><rect x="29.7778%" y="277" width="0.4444%" height="15" fill="rgb(211,146,34)" fg:x="67" fg:w="1"/><text x="30.0278%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::DBImpl(rocksdb::DBOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="30.2222%" y="453" width="0.4444%" height="15" fill="rgb(228,22,38)" fg:x="68" fg:w="1"/><text x="30.4722%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::SanitizeOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="30.2222%" y="437" width="0.4444%" height="15" fill="rgb(235,168,5)" fg:x="68" fg:w="1"/><text x="30.4722%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::CreateLoggerFromOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::DBOptions const&amp;, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="30.2222%" y="421" width="0.4444%" height="15" fill="rgb(221,155,16)" fg:x="68" fg:w="1"/><text x="30.4722%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::CompositeEnv::NewLogger(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="30.2222%" y="405" width="0.4444%" height="15" fill="rgb(215,215,53)" fg:x="68" fg:w="1"/><text x="30.4722%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::FileSystem::NewLogger(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::IOOptions const&amp;, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="30.2222%" y="389" width="0.4444%" height="15" fill="rgb(223,4,10)" fg:x="68" fg:w="1"/><text x="30.4722%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::OpenWritableFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FileOptions const&amp;, bool, std::__1::unique_ptr&lt;rocksdb::FSWritableFile, std::__1::default_delete (1 samples, 0.44%)</title><rect x="30.2222%" y="373" width="0.4444%" height="15" fill="rgb(234,103,6)" fg:x="68" fg:w="1"/><text x="30.4722%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.44%)</title><rect x="30.2222%" y="357" width="0.4444%" height="15" fill="rgb(227,97,0)" fg:x="68" fg:w="1"/><text x="30.4722%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::InstallSuperVersionAndScheduleWork (1 samples, 0.44%)</title><rect x="30.6667%" y="453" width="0.4444%" height="15" fill="rgb(234,150,53)" fg:x="69" fg:w="1"/><text x="30.9167%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::ManifestWriter::ManifestWriter(rocksdb::InstrumentedMutex*, rocksdb::ColumnFamilyData*, rocksdb::MutableCFOptions const&amp;, rocksdb::autovector&lt;rocksdb::VersionEdit*, 8ul&gt; const&amp;, std::__1::function&lt;void  (1 samples, 0.44%)</title><rect x="31.1111%" y="421" width="0.4444%" height="15" fill="rgb(228,201,54)" fg:x="70" fg:w="1"/><text x="31.3611%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::MutableCFOptions (1 samples, 0.44%)</title><rect x="31.1111%" y="405" width="0.4444%" height="15" fill="rgb(222,22,37)" fg:x="70" fg:w="1"/><text x="31.3611%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::WriteCurrentStateToManifest(std::__1::unordered_map&lt;unsigned int, rocksdb::VersionSet::MutableCFState, std::__1::hash&lt;unsigned int&gt;, std::__1::equal_to&lt;unsigned int&gt;, std::__1::allocator&lt;std::__1::pair (1 samples, 0.44%)</title><rect x="31.5556%" y="405" width="0.4444%" height="15" fill="rgb(237,53,32)" fg:x="71" fg:w="1"/><text x="31.8056%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::log::Writer::AddRecord (1 samples, 0.44%)</title><rect x="31.5556%" y="389" width="0.4444%" height="15" fill="rgb(233,25,53)" fg:x="71" fg:w="1"/><text x="31.8056%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Flush (1 samples, 0.44%)</title><rect x="31.5556%" y="373" width="0.4444%" height="15" fill="rgb(210,40,34)" fg:x="71" fg:w="1"/><text x="31.8056%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::WriteBuffered (1 samples, 0.44%)</title><rect x="31.5556%" y="357" width="0.4444%" height="15" fill="rgb(241,220,44)" fg:x="71" fg:w="1"/><text x="31.8056%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.44%)</title><rect x="31.5556%" y="341" width="0.4444%" height="15" fill="rgb(235,28,35)" fg:x="71" fg:w="1"/><text x="31.8056%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::LogAndApplyForRecovery (3 samples, 1.33%)</title><rect x="31.1111%" y="453" width="1.3333%" height="15" fill="rgb(210,56,17)" fg:x="70" fg:w="3"/><text x="31.3611%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::LogAndApply(rocksdb::autovector&lt;rocksdb::ColumnFamilyData*, 8ul&gt; const&amp;, rocksdb::autovector&lt;rocksdb::MutableCFOptions const*, 8ul&gt; const&amp;, rocksdb::autovector&lt;rocksdb::autovector&lt;rocksdb::VersionEdit*, 8ul&gt;, 8ul&gt; const&amp;, rocksdb::InstrumentedMutex*, rocksdb::FSDirectory*, bool, rocksdb::ColumnFamilyOptions const*, std::__1::vector&lt;std::__1::function&lt;void (rocksdb::Status const&amp;)&gt;, std::__1::allocator&lt;std::__1::function&lt;void  (3 samples, 1.33%)</title><rect x="31.1111%" y="437" width="1.3333%" height="15" fill="rgb(224,130,29)" fg:x="70" fg:w="3"/><text x="31.3611%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::ProcessManifestWrites(std::__1::deque&lt;rocksdb::VersionSet::ManifestWriter, std::__1::allocator (2 samples, 0.89%)</title><rect x="31.5556%" y="421" width="0.8889%" height="15" fill="rgb(235,212,8)" fg:x="71" fg:w="2"/><text x="31.8056%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::log::Writer::AddRecord (1 samples, 0.44%)</title><rect x="32.0000%" y="405" width="0.4444%" height="15" fill="rgb(223,33,50)" fg:x="72" fg:w="1"/><text x="32.2500%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Flush (1 samples, 0.44%)</title><rect x="32.0000%" y="389" width="0.4444%" height="15" fill="rgb(219,149,13)" fg:x="72" fg:w="1"/><text x="32.2500%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::WriteBuffered (1 samples, 0.44%)</title><rect x="32.0000%" y="373" width="0.4444%" height="15" fill="rgb(250,156,29)" fg:x="72" fg:w="1"/><text x="32.2500%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.44%)</title><rect x="32.0000%" y="357" width="0.4444%" height="15" fill="rgb(216,193,19)" fg:x="72" fg:w="1"/><text x="32.2500%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::DeleteUnreferencedSstFiles (1 samples, 0.44%)</title><rect x="32.4444%" y="437" width="0.4444%" height="15" fill="rgb(216,135,14)" fg:x="73" fg:w="1"/><text x="32.6944%" y="447.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.44%)</title><rect x="32.4444%" y="421" width="0.4444%" height="15" fill="rgb(241,47,5)" fg:x="73" fg:w="1"/><text x="32.6944%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.44%)</title><rect x="32.4444%" y="405" width="0.4444%" height="15" fill="rgb(233,42,35)" fg:x="73" fg:w="1"/><text x="32.6944%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.44%)</title><rect x="32.4444%" y="389" width="0.4444%" height="15" fill="rgb(231,13,6)" fg:x="73" fg:w="1"/><text x="32.6944%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::RecoverLogFiles(std::__1::vector&lt;unsigned long long, std::__1::allocator (1 samples, 0.44%)</title><rect x="32.8889%" y="437" width="0.4444%" height="15" fill="rgb(207,181,40)" fg:x="74" fg:w="1"/><text x="33.1389%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteLevel0TableForRecovery (1 samples, 0.44%)</title><rect x="32.8889%" y="421" width="0.4444%" height="15" fill="rgb(254,173,49)" fg:x="74" fg:w="1"/><text x="33.1389%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::BuildTable(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::VersionSet*, rocksdb::ImmutableDBOptions const&amp;, rocksdb::TableBuilderOptions const&amp;, rocksdb::FileOptions const&amp;, rocksdb::TableCache*, rocksdb::InternalIteratorBase&lt;rocksdb::Slice&gt;*, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt;&gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::FragmentedRangeTombstoneIterator, std::__1::default_delete&lt;rocksdb::FragmentedRangeTombstoneIterator&gt;&gt;&gt;&gt;, rocksdb::FileMetaData*, std::__1::vector&lt;rocksdb::BlobFileAddition, std::__1::allocator&lt;rocksdb::BlobFileAddition&gt;&gt;*, std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt;, unsigned long long, unsigned long long, rocksdb::SnapshotChecker*, bool, rocksdb::InternalStats*, rocksdb::IOStatus*, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="32.8889%" y="405" width="0.4444%" height="15" fill="rgb(221,1,38)" fg:x="74" fg:w="1"/><text x="33.1389%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::FlushBlockBySizePolicy::Update (1 samples, 0.44%)</title><rect x="32.8889%" y="389" width="0.4444%" height="15" fill="rgb(206,124,46)" fg:x="74" fg:w="1"/><text x="33.1389%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Log(rocksdb::InfoLogLevel, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="33.3333%" y="421" width="0.4444%" height="15" fill="rgb(249,21,11)" fg:x="75" fg:w="1"/><text x="33.5833%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::EnvLogger::Logv (1 samples, 0.44%)</title><rect x="33.3333%" y="405" width="0.4444%" height="15" fill="rgb(222,201,40)" fg:x="75" fg:w="1"/><text x="33.5833%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Append (1 samples, 0.44%)</title><rect x="33.3333%" y="389" width="0.4444%" height="15" fill="rgb(235,61,29)" fg:x="75" fg:w="1"/><text x="33.5833%" y="399.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.44%)</title><rect x="33.3333%" y="373" width="0.4444%" height="15" fill="rgb(219,207,3)" fg:x="75" fg:w="1"/><text x="33.5833%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::ApplyVersionEdit (1 samples, 0.44%)</title><rect x="33.7778%" y="421" width="0.4444%" height="15" fill="rgb(222,56,46)" fg:x="76" fg:w="1"/><text x="34.0278%" y="431.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.44%)</title><rect x="34.2222%" y="341" width="0.4444%" height="15" fill="rgb(239,76,54)" fg:x="77" fg:w="1"/><text x="34.4722%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.44%)</title><rect x="34.2222%" y="325" width="0.4444%" height="15" fill="rgb(231,124,27)" fg:x="77" fg:w="1"/><text x="34.4722%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyData::CreateNewMemtable (2 samples, 0.89%)</title><rect x="34.6667%" y="341" width="0.8889%" height="15" fill="rgb(249,195,6)" fg:x="78" fg:w="2"/><text x="34.9167%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::MemTable::MemTable (2 samples, 0.89%)</title><rect x="34.6667%" y="325" width="0.8889%" height="15" fill="rgb(237,174,47)" fg:x="78" fg:w="2"/><text x="34.9167%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::BlobFileCache::BlobFileCache(rocksdb::Cache*, rocksdb::ImmutableOptions const*, rocksdb::FileOptions const*, unsigned int, rocksdb::HistogramImpl*, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="35.5556%" y="309" width="0.4444%" height="15" fill="rgb(206,201,31)" fg:x="80" fg:w="1"/><text x="35.8056%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Striped&lt;rocksdb::port::Mutex, rocksdb::Slice&gt;::Striped(unsigned long, std::__1::function&lt;unsigned long long (1 samples, 0.44%)</title><rect x="35.5556%" y="293" width="0.4444%" height="15" fill="rgb(231,57,52)" fg:x="80" fg:w="1"/><text x="35.8056%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::Dump (1 samples, 0.44%)</title><rect x="36.0000%" y="309" width="0.4444%" height="15" fill="rgb(248,177,22)" fg:x="81" fg:w="1"/><text x="36.2500%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Log (1 samples, 0.44%)</title><rect x="36.0000%" y="293" width="0.4444%" height="15" fill="rgb(215,211,37)" fg:x="81" fg:w="1"/><text x="36.2500%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::EnvLogger::Logv (1 samples, 0.44%)</title><rect x="36.0000%" y="277" width="0.4444%" height="15" fill="rgb(241,128,51)" fg:x="81" fg:w="1"/><text x="36.2500%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.44%)</title><rect x="36.0000%" y="261" width="0.4444%" height="15" fill="rgb(227,165,31)" fg:x="81" fg:w="1"/><text x="36.2500%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::InternalStats::InternalStats (2 samples, 0.89%)</title><rect x="36.4444%" y="309" width="0.8889%" height="15" fill="rgb(228,167,24)" fg:x="82" fg:w="2"/><text x="36.6944%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::HistogramImpl::Clear (1 samples, 0.44%)</title><rect x="36.8889%" y="293" width="0.4444%" height="15" fill="rgb(228,143,12)" fg:x="83" fg:w="1"/><text x="37.1389%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Log (1 samples, 0.44%)</title><rect x="37.3333%" y="309" width="0.4444%" height="15" fill="rgb(249,149,8)" fg:x="84" fg:w="1"/><text x="37.5833%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::EnvLogger::Logv (1 samples, 0.44%)</title><rect x="37.3333%" y="293" width="0.4444%" height="15" fill="rgb(243,35,44)" fg:x="84" fg:w="1"/><text x="37.5833%" y="303.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.44%)</title><rect x="37.3333%" y="277" width="0.4444%" height="15" fill="rgb(246,89,9)" fg:x="84" fg:w="1"/><text x="37.5833%" y="287.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.44%)</title><rect x="37.3333%" y="261" width="0.4444%" height="15" fill="rgb(233,213,13)" fg:x="84" fg:w="1"/><text x="37.5833%" y="271.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.44%)</title><rect x="37.3333%" y="245" width="0.4444%" height="15" fill="rgb(233,141,41)" fg:x="84" fg:w="1"/><text x="37.5833%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::ApplyVersionEdit (9 samples, 4.00%)</title><rect x="34.2222%" y="405" width="4.0000%" height="15" fill="rgb(239,167,4)" fg:x="77" fg:w="9"/><text x="34.4722%" y="415.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::OnColumnFamilyAdd (9 samples, 4.00%)</title><rect x="34.2222%" y="389" width="4.0000%" height="15" fill="rgb(209,217,16)" fg:x="77" fg:w="9"/><text x="34.4722%" y="399.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::CreateCfAndInit (9 samples, 4.00%)</title><rect x="34.2222%" y="373" width="4.0000%" height="15" fill="rgb(219,88,35)" fg:x="77" fg:w="9"/><text x="34.4722%" y="383.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::VersionSet::CreateColumnFamily (9 samples, 4.00%)</title><rect x="34.2222%" y="357" width="4.0000%" height="15" fill="rgb(220,193,23)" fg:x="77" fg:w="9"/><text x="34.4722%" y="367.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::ColumnFamilySet::CreateColumnFamily(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 2.67%)</title><rect x="35.5556%" y="341" width="2.6667%" height="15" fill="rgb(230,90,52)" fg:x="80" fg:w="6"/><text x="35.8056%" y="351.50">ru..</text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyData::ColumnFamilyData(unsigned int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::Version*, rocksdb::Cache*, rocksdb::WriteBufferManager*, rocksdb::ColumnFamilyOptions const&amp;, rocksdb::ImmutableDBOptions const&amp;, rocksdb::FileOptions const*, rocksdb::ColumnFamilySet*, rocksdb::BlockCacheTracer*, std::__1::shared_ptr&lt;rocksdb::IOTracer&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 2.67%)</title><rect x="35.5556%" y="325" width="2.6667%" height="15" fill="rgb(252,106,19)" fg:x="80" fg:w="6"/><text x="35.8056%" y="335.50">ru..</text></g><g><title>rusk-wallet`rocksdb::TableCache::TableCache(rocksdb::ImmutableOptions const&amp;, rocksdb::FileOptions const*, rocksdb::Cache*, rocksdb::BlockCacheTracer*, std::__1::shared_ptr&lt;rocksdb::IOTracer&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="37.7778%" y="309" width="0.4444%" height="15" fill="rgb(206,74,20)" fg:x="85" fg:w="1"/><text x="38.0278%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Striped&lt;rocksdb::port::Mutex, rocksdb::Slice&gt;::Striped(unsigned long, std::__1::function&lt;unsigned long long (1 samples, 0.44%)</title><rect x="37.7778%" y="293" width="0.4444%" height="15" fill="rgb(230,138,44)" fg:x="85" fg:w="1"/><text x="38.0278%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::thread::join (10 samples, 4.44%)</title><rect x="38.2222%" y="357" width="4.4444%" height="15" fill="rgb(235,182,43)" fg:x="86" fg:w="10"/><text x="38.4722%" y="367.50">libc+..</text></g><g><title>libsystem_pthread.dylib`_pthread_join (10 samples, 4.44%)</title><rect x="38.2222%" y="341" width="4.4444%" height="15" fill="rgb(242,16,51)" fg:x="86" fg:w="10"/><text x="38.4722%" y="351.50">libsy..</text></g><g><title>libsystem_pthread.dylib`_pthread_deallocate (10 samples, 4.44%)</title><rect x="38.2222%" y="325" width="4.4444%" height="15" fill="rgb(248,9,4)" fg:x="86" fg:w="10"/><text x="38.4722%" y="335.50">libsy..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (10 samples, 4.44%)</title><rect x="38.2222%" y="309" width="4.4444%" height="15" fill="rgb(210,31,22)" fg:x="86" fg:w="10"/><text x="38.4722%" y="319.50">libsy..</text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (11 samples, 4.89%)</title><rect x="42.6667%" y="341" width="4.8889%" height="15" fill="rgb(239,54,39)" fg:x="96" fg:w="11"/><text x="42.9167%" y="351.50">libsys..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (3 samples, 1.33%)</title><rect x="50.6667%" y="325" width="1.3333%" height="15" fill="rgb(230,99,41)" fg:x="114" fg:w="3"/><text x="50.9167%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::thread::thread&lt;std::__1::function&lt;void ()&gt;&amp;, void&gt;(std::__1::function&lt;void  (22 samples, 9.78%)</title><rect x="42.6667%" y="357" width="9.7778%" height="15" fill="rgb(253,106,12)" fg:x="96" fg:w="22"/><text x="42.9167%" y="367.50">rusk-wallet`st..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (11 samples, 4.89%)</title><rect x="47.5556%" y="341" width="4.8889%" height="15" fill="rgb(213,46,41)" fg:x="107" fg:w="11"/><text x="47.8056%" y="351.50">libsys..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (1 samples, 0.44%)</title><rect x="52.0000%" y="325" width="0.4444%" height="15" fill="rgb(215,133,35)" fg:x="117" fg:w="1"/><text x="52.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__bsdthread_create (9 samples, 4.00%)</title><rect x="52.4444%" y="325" width="4.0000%" height="15" fill="rgb(213,28,5)" fg:x="118" fg:w="9"/><text x="52.6944%" y="335.50">libs..</text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::LoadTables (49 samples, 21.78%)</title><rect x="38.2222%" y="389" width="21.7778%" height="15" fill="rgb(215,77,49)" fg:x="86" fg:w="49"/><text x="38.4722%" y="399.50">rusk-wallet`rocksdb::VersionEditHa..</text></g><g><title>rusk-wallet`rocksdb::VersionBuilder::Rep::LoadTableHandlers(rocksdb::InternalStats*, int, bool, bool, std::__1::shared_ptr (49 samples, 21.78%)</title><rect x="38.2222%" y="373" width="21.7778%" height="15" fill="rgb(248,100,22)" fg:x="86" fg:w="49"/><text x="38.4722%" y="383.50">rusk-wallet`rocksdb::VersionBuilde..</text></g><g><title>rusk-wallet`void std::__1::vector&lt;std::__1::thread, std::__1::allocator&lt;std::__1::thread&gt;&gt;::__emplace_back_slow_path&lt;std::__1::function&lt;void ()&gt;&amp;&gt;(std::__1::function&lt;void  (17 samples, 7.56%)</title><rect x="52.4444%" y="357" width="7.5556%" height="15" fill="rgb(208,67,9)" fg:x="118" fg:w="17"/><text x="52.6944%" y="367.50">rusk-walle..</text></g><g><title>rusk-wallet`std::__1::thread::thread&lt;std::__1::function&lt;void ()&gt;&amp;, void&gt;(std::__1::function&lt;void  (17 samples, 7.56%)</title><rect x="52.4444%" y="341" width="7.5556%" height="15" fill="rgb(219,133,21)" fg:x="118" fg:w="17"/><text x="52.6944%" y="351.50">rusk-walle..</text></g><g><title>libsystem_pthread.dylib`_pthread_create (8 samples, 3.56%)</title><rect x="56.4444%" y="325" width="3.5556%" height="15" fill="rgb(246,46,29)" fg:x="127" fg:w="8"/><text x="56.6944%" y="335.50">libs..</text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_protect_trap (2 samples, 0.89%)</title><rect x="59.1111%" y="309" width="0.8889%" height="15" fill="rgb(246,185,52)" fg:x="133" fg:w="2"/><text x="59.3611%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::Recover(std::__1::vector&lt;rocksdb::ColumnFamilyDescriptor, std::__1::allocator (63 samples, 28.00%)</title><rect x="32.4444%" y="453" width="28.0000%" height="15" fill="rgb(252,136,11)" fg:x="73" fg:w="63"/><text x="32.6944%" y="463.50">rusk-wallet`rocksdb::DBImpl::Recover(std::__1..</text></g><g><title>rusk-wallet`rocksdb::VersionSet::Recover(std::__1::vector&lt;rocksdb::ColumnFamilyDescriptor, std::__1::allocator&lt;rocksdb::ColumnFamilyDescriptor&gt;&gt; const&amp;, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (61 samples, 27.11%)</title><rect x="33.3333%" y="437" width="27.1111%" height="15" fill="rgb(219,138,53)" fg:x="75" fg:w="61"/><text x="33.5833%" y="447.50">rusk-wallet`rocksdb::VersionSet::Recover(st..</text></g><g><title>rusk-wallet`rocksdb::VersionEditHandlerBase::Iterate (59 samples, 26.22%)</title><rect x="34.2222%" y="421" width="26.2222%" height="15" fill="rgb(211,51,23)" fg:x="77" fg:w="59"/><text x="34.4722%" y="431.50">rusk-wallet`rocksdb::VersionEditHandlerBas..</text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::CheckIterationResult (50 samples, 22.22%)</title><rect x="38.2222%" y="405" width="22.2222%" height="15" fill="rgb(247,221,28)" fg:x="86" fg:w="50"/><text x="38.4722%" y="415.50">rusk-wallet`rocksdb::VersionEditHan..</text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::MaybeCreateVersion (1 samples, 0.44%)</title><rect x="60.0000%" y="389" width="0.4444%" height="15" fill="rgb(251,222,45)" fg:x="135" fg:w="1"/><text x="60.2500%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Version::Version(rocksdb::ColumnFamilyData*, rocksdb::VersionSet*, rocksdb::FileOptions const&amp;, rocksdb::MutableCFOptions, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="60.0000%" y="373" width="0.4444%" height="15" fill="rgb(217,162,53)" fg:x="135" fg:w="1"/><text x="60.2500%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::VersionStorageInfo::VersionStorageInfo (1 samples, 0.44%)</title><rect x="60.0000%" y="357" width="0.4444%" height="15" fill="rgb(229,93,14)" fg:x="135" fg:w="1"/><text x="60.2500%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.44%)</title><rect x="60.0000%" y="341" width="0.4444%" height="15" fill="rgb(209,67,49)" fg:x="135" fg:w="1"/><text x="60.2500%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::RenameTempFileToOptionsFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="60.4444%" y="437" width="0.4444%" height="15" fill="rgb(213,87,29)" fg:x="136" fg:w="1"/><text x="60.6944%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::DeleteObsoleteOptionsFiles (1 samples, 0.44%)</title><rect x="60.4444%" y="421" width="0.4444%" height="15" fill="rgb(205,151,52)" fg:x="136" fg:w="1"/><text x="60.6944%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::CompositeEnv::DeleteFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="60.4444%" y="405" width="0.4444%" height="15" fill="rgb(253,215,39)" fg:x="136" fg:w="1"/><text x="60.6944%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::DeleteFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="60.4444%" y="389" width="0.4444%" height="15" fill="rgb(221,220,41)" fg:x="136" fg:w="1"/><text x="60.6944%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (1 samples, 0.44%)</title><rect x="60.4444%" y="373" width="0.4444%" height="15" fill="rgb(218,133,21)" fg:x="136" fg:w="1"/><text x="60.6944%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="60.8889%" y="405" width="0.4444%" height="15" fill="rgb(221,193,43)" fg:x="137" fg:w="1"/><text x="61.1389%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="60.8889%" y="389" width="0.4444%" height="15" fill="rgb(240,128,52)" fg:x="137" fg:w="1"/><text x="61.1389%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="60.8889%" y="373" width="0.4444%" height="15" fill="rgb(253,114,12)" fg:x="137" fg:w="1"/><text x="61.1389%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="60.8889%" y="357" width="0.4444%" height="15" fill="rgb(215,223,47)" fg:x="137" fg:w="1"/><text x="61.1389%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (1 samples, 0.44%)</title><rect x="60.8889%" y="341" width="0.4444%" height="15" fill="rgb(248,225,23)" fg:x="137" fg:w="1"/><text x="61.1389%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.44%)</title><rect x="61.3333%" y="373" width="0.4444%" height="15" fill="rgb(250,108,0)" fg:x="138" fg:w="1"/><text x="61.5833%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.44%)</title><rect x="61.7778%" y="357" width="0.4444%" height="15" fill="rgb(228,208,7)" fg:x="139" fg:w="1"/><text x="62.0278%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::GetStringFromColumnFamilyOptions(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="61.3333%" y="405" width="1.3333%" height="15" fill="rgb(244,45,10)" fg:x="138" fg:w="3"/><text x="61.5833%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="61.3333%" y="389" width="1.3333%" height="15" fill="rgb(207,125,25)" fg:x="138" fg:w="3"/><text x="61.5833%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="61.7778%" y="373" width="0.8889%" height="15" fill="rgb(210,195,18)" fg:x="139" fg:w="2"/><text x="62.0278%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="62.2222%" y="357" width="0.4444%" height="15" fill="rgb(249,80,12)" fg:x="140" fg:w="1"/><text x="62.4722%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="62.2222%" y="341" width="0.4444%" height="15" fill="rgb(221,65,9)" fg:x="140" fg:w="1"/><text x="62.4722%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="62.2222%" y="325" width="0.4444%" height="15" fill="rgb(235,49,36)" fg:x="140" fg:w="1"/><text x="62.4722%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="62.2222%" y="309" width="0.4444%" height="15" fill="rgb(225,32,20)" fg:x="140" fg:w="1"/><text x="62.4722%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.44%)</title><rect x="62.6667%" y="357" width="0.4444%" height="15" fill="rgb(215,141,46)" fg:x="141" fg:w="1"/><text x="62.9167%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.44%)</title><rect x="62.6667%" y="341" width="0.4444%" height="15" fill="rgb(250,160,47)" fg:x="141" fg:w="1"/><text x="62.9167%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (1 samples, 0.44%)</title><rect x="62.6667%" y="325" width="0.4444%" height="15" fill="rgb(216,222,40)" fg:x="141" fg:w="1"/><text x="62.9167%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.44%)</title><rect x="62.6667%" y="309" width="0.4444%" height="15" fill="rgb(234,217,39)" fg:x="141" fg:w="1"/><text x="62.9167%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="62.6667%" y="293" width="0.4444%" height="15" fill="rgb(207,178,40)" fg:x="141" fg:w="1"/><text x="62.9167%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="62.6667%" y="277" width="0.4444%" height="15" fill="rgb(221,136,13)" fg:x="141" fg:w="1"/><text x="62.9167%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="62.6667%" y="261" width="0.4444%" height="15" fill="rgb(249,199,10)" fg:x="141" fg:w="1"/><text x="62.9167%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.44%)</title><rect x="62.6667%" y="245" width="0.4444%" height="15" fill="rgb(249,222,13)" fg:x="141" fg:w="1"/><text x="62.9167%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.44%)</title><rect x="62.6667%" y="229" width="0.4444%" height="15" fill="rgb(244,185,38)" fg:x="141" fg:w="1"/><text x="62.9167%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.44%)</title><rect x="63.1111%" y="293" width="0.4444%" height="15" fill="rgb(236,202,9)" fg:x="142" fg:w="1"/><text x="63.3611%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (2 samples, 0.89%)</title><rect x="63.1111%" y="357" width="0.8889%" height="15" fill="rgb(250,229,37)" fg:x="142" fg:w="2"/><text x="63.3611%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="63.1111%" y="341" width="0.8889%" height="15" fill="rgb(206,174,23)" fg:x="142" fg:w="2"/><text x="63.3611%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="63.1111%" y="325" width="0.8889%" height="15" fill="rgb(211,33,43)" fg:x="142" fg:w="2"/><text x="63.3611%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="63.1111%" y="309" width="0.8889%" height="15" fill="rgb(245,58,50)" fg:x="142" fg:w="2"/><text x="63.3611%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.44%)</title><rect x="63.5556%" y="293" width="0.4444%" height="15" fill="rgb(244,68,36)" fg:x="143" fg:w="1"/><text x="63.8056%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::operator= (1 samples, 0.44%)</title><rect x="64.0000%" y="341" width="0.4444%" height="15" fill="rgb(232,229,15)" fg:x="144" fg:w="1"/><text x="64.2500%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.44%)</title><rect x="64.0000%" y="325" width="0.4444%" height="15" fill="rgb(254,30,23)" fg:x="144" fg:w="1"/><text x="64.2500%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.44%)</title><rect x="64.0000%" y="309" width="0.4444%" height="15" fill="rgb(235,160,14)" fg:x="144" fg:w="1"/><text x="64.2500%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (1 samples, 0.44%)</title><rect x="64.0000%" y="293" width="0.4444%" height="15" fill="rgb(212,155,44)" fg:x="144" fg:w="1"/><text x="64.2500%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (1 samples, 0.44%)</title><rect x="64.0000%" y="277" width="0.4444%" height="15" fill="rgb(226,2,50)" fg:x="144" fg:w="1"/><text x="64.2500%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*), std::__1::allocator&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*)&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.44%)</title><rect x="64.0000%" y="261" width="0.4444%" height="15" fill="rgb(234,177,6)" fg:x="144" fg:w="1"/><text x="64.2500%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::~Mutex (1 samples, 0.44%)</title><rect x="64.0000%" y="245" width="0.4444%" height="15" fill="rgb(217,24,9)" fg:x="144" fg:w="1"/><text x="64.2500%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.44%)</title><rect x="64.0000%" y="229" width="0.4444%" height="15" fill="rgb(220,13,46)" fg:x="144" fg:w="1"/><text x="64.2500%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.44%)</title><rect x="64.4444%" y="309" width="0.4444%" height="15" fill="rgb(239,221,27)" fg:x="145" fg:w="1"/><text x="64.6944%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.44%)</title><rect x="64.8889%" y="293" width="0.4444%" height="15" fill="rgb(222,198,25)" fg:x="146" fg:w="1"/><text x="65.1389%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.44%)</title><rect x="65.3333%" y="277" width="0.4444%" height="15" fill="rgb(211,99,13)" fg:x="147" fg:w="1"/><text x="65.5833%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="65.7778%" y="229" width="0.4444%" height="15" fill="rgb(232,111,31)" fg:x="148" fg:w="1"/><text x="66.0278%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.44%)</title><rect x="65.7778%" y="213" width="0.4444%" height="15" fill="rgb(245,82,37)" fg:x="148" fg:w="1"/><text x="66.0278%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="65.7778%" y="197" width="0.4444%" height="15" fill="rgb(227,149,46)" fg:x="148" fg:w="1"/><text x="66.0278%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="65.7778%" y="181" width="0.4444%" height="15" fill="rgb(218,36,50)" fg:x="148" fg:w="1"/><text x="66.0278%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="65.7778%" y="165" width="0.4444%" height="15" fill="rgb(226,80,48)" fg:x="148" fg:w="1"/><text x="66.0278%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (1 samples, 0.44%)</title><rect x="65.7778%" y="149" width="0.4444%" height="15" fill="rgb(238,224,15)" fg:x="148" fg:w="1"/><text x="66.0278%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::(anonymous namespace)::initial_string&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator() (1 samples, 0.44%)</title><rect x="65.7778%" y="133" width="0.4444%" height="15" fill="rgb(241,136,10)" fg:x="148" fg:w="1"/><text x="66.0278%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.44%)</title><rect x="65.7778%" y="117" width="0.4444%" height="15" fill="rgb(208,32,45)" fg:x="148" fg:w="1"/><text x="66.0278%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="65.7778%" y="277" width="0.8889%" height="15" fill="rgb(207,135,9)" fg:x="148" fg:w="2"/><text x="66.0278%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="65.7778%" y="261" width="0.8889%" height="15" fill="rgb(206,86,44)" fg:x="148" fg:w="2"/><text x="66.0278%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (2 samples, 0.89%)</title><rect x="65.7778%" y="245" width="0.8889%" height="15" fill="rgb(245,177,15)" fg:x="148" fg:w="2"/><text x="66.0278%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::LoadFactory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="66.2222%" y="229" width="0.4444%" height="15" fill="rgb(206,64,50)" fg:x="149" fg:w="1"/><text x="66.4722%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.44%)</title><rect x="66.2222%" y="213" width="0.4444%" height="15" fill="rgb(234,36,40)" fg:x="149" fg:w="1"/><text x="66.4722%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (1 samples, 0.44%)</title><rect x="66.2222%" y="197" width="0.4444%" height="15" fill="rgb(213,64,8)" fg:x="149" fg:w="1"/><text x="66.4722%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.44%)</title><rect x="66.2222%" y="181" width="0.4444%" height="15" fill="rgb(210,75,36)" fg:x="149" fg:w="1"/><text x="66.4722%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="66.6667%" y="277" width="0.8889%" height="15" fill="rgb(229,88,21)" fg:x="150" fg:w="2"/><text x="66.9167%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (2 samples, 0.89%)</title><rect x="66.6667%" y="261" width="0.8889%" height="15" fill="rgb(252,204,47)" fg:x="150" fg:w="2"/><text x="66.9167%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.44%)</title><rect x="68.0000%" y="261" width="0.4444%" height="15" fill="rgb(208,77,27)" fg:x="153" fg:w="1"/><text x="68.2500%" y="271.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.44%)</title><rect x="68.4444%" y="197" width="0.4444%" height="15" fill="rgb(221,76,26)" fg:x="154" fg:w="1"/><text x="68.6944%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.89%)</title><rect x="68.4444%" y="229" width="0.8889%" height="15" fill="rgb(225,139,18)" fg:x="154" fg:w="2"/><text x="68.6944%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="68.4444%" y="213" width="0.8889%" height="15" fill="rgb(230,137,11)" fg:x="154" fg:w="2"/><text x="68.6944%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="68.8889%" y="197" width="0.4444%" height="15" fill="rgb(212,28,1)" fg:x="155" fg:w="1"/><text x="69.1389%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="69.3333%" y="213" width="0.4444%" height="15" fill="rgb(248,164,17)" fg:x="156" fg:w="1"/><text x="69.5833%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 1.78%)</title><rect x="68.4444%" y="261" width="1.7778%" height="15" fill="rgb(222,171,42)" fg:x="154" fg:w="4"/><text x="68.6944%" y="271.50">r..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (4 samples, 1.78%)</title><rect x="68.4444%" y="245" width="1.7778%" height="15" fill="rgb(243,84,45)" fg:x="154" fg:w="4"/><text x="68.6944%" y="255.50">r..</text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="69.3333%" y="229" width="0.8889%" height="15" fill="rgb(252,49,23)" fg:x="156" fg:w="2"/><text x="69.5833%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="69.7778%" y="213" width="0.4444%" height="15" fill="rgb(215,19,7)" fg:x="157" fg:w="1"/><text x="70.0278%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 5.78%)</title><rect x="64.8889%" y="309" width="5.7778%" height="15" fill="rgb(238,81,41)" fg:x="146" fg:w="13"/><text x="65.1389%" y="319.50">rusk-wa..</text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 5.33%)</title><rect x="65.3333%" y="293" width="5.3333%" height="15" fill="rgb(210,199,37)" fg:x="147" fg:w="12"/><text x="65.5833%" y="303.50">rusk-wa..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 3.11%)</title><rect x="67.5556%" y="277" width="3.1111%" height="15" fill="rgb(244,192,49)" fg:x="152" fg:w="7"/><text x="67.8056%" y="287.50">rus..</text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="70.2222%" y="261" width="0.4444%" height="15" fill="rgb(226,211,11)" fg:x="158" fg:w="1"/><text x="70.4722%" y="271.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.44%)</title><rect x="71.1111%" y="197" width="0.4444%" height="15" fill="rgb(236,162,54)" fg:x="160" fg:w="1"/><text x="71.3611%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.44%)</title><rect x="71.5556%" y="197" width="0.4444%" height="15" fill="rgb(220,229,9)" fg:x="161" fg:w="1"/><text x="71.8056%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (3 samples, 1.33%)</title><rect x="71.1111%" y="277" width="1.3333%" height="15" fill="rgb(250,87,22)" fg:x="160" fg:w="3"/><text x="71.3611%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="71.1111%" y="261" width="1.3333%" height="15" fill="rgb(239,43,17)" fg:x="160" fg:w="3"/><text x="71.3611%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="71.1111%" y="245" width="1.3333%" height="15" fill="rgb(231,177,25)" fg:x="160" fg:w="3"/><text x="71.3611%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="71.1111%" y="229" width="1.3333%" height="15" fill="rgb(219,179,1)" fg:x="160" fg:w="3"/><text x="71.3611%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="71.1111%" y="213" width="1.3333%" height="15" fill="rgb(238,219,53)" fg:x="160" fg:w="3"/><text x="71.3611%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="72.0000%" y="197" width="0.4444%" height="15" fill="rgb(232,167,36)" fg:x="162" fg:w="1"/><text x="72.2500%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="72.0000%" y="181" width="0.4444%" height="15" fill="rgb(244,19,51)" fg:x="162" fg:w="1"/><text x="72.2500%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="72.0000%" y="165" width="0.4444%" height="15" fill="rgb(224,6,22)" fg:x="162" fg:w="1"/><text x="72.2500%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.44%)</title><rect x="72.0000%" y="149" width="0.4444%" height="15" fill="rgb(224,145,5)" fg:x="162" fg:w="1"/><text x="72.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.44%)</title><rect x="72.0000%" y="133" width="0.4444%" height="15" fill="rgb(234,130,49)" fg:x="162" fg:w="1"/><text x="72.2500%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (20 samples, 8.89%)</title><rect x="64.4444%" y="325" width="8.8889%" height="15" fill="rgb(254,6,2)" fg:x="145" fg:w="20"/><text x="64.6944%" y="335.50">rusk-wallet`r..</text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 2.67%)</title><rect x="70.6667%" y="309" width="2.6667%" height="15" fill="rgb(208,96,46)" fg:x="159" fg:w="6"/><text x="70.9167%" y="319.50">ru..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 2.22%)</title><rect x="71.1111%" y="293" width="2.2222%" height="15" fill="rgb(239,3,39)" fg:x="160" fg:w="5"/><text x="71.3611%" y="303.50">r..</text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="72.4444%" y="277" width="0.8889%" height="15" fill="rgb(233,210,1)" fg:x="163" fg:w="2"/><text x="72.6944%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (2 samples, 0.89%)</title><rect x="72.4444%" y="261" width="0.8889%" height="15" fill="rgb(244,137,37)" fg:x="163" fg:w="2"/><text x="72.6944%" y="271.50"></text></g><g><title>libsystem_c.dylib`snprintf (2 samples, 0.89%)</title><rect x="72.4444%" y="245" width="0.8889%" height="15" fill="rgb(240,136,2)" fg:x="163" fg:w="2"/><text x="72.6944%" y="255.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.89%)</title><rect x="72.4444%" y="229" width="0.8889%" height="15" fill="rgb(239,18,37)" fg:x="163" fg:w="2"/><text x="72.6944%" y="239.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.89%)</title><rect x="72.4444%" y="213" width="0.8889%" height="15" fill="rgb(218,185,22)" fg:x="163" fg:w="2"/><text x="72.6944%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.44%)</title><rect x="72.8889%" y="197" width="0.4444%" height="15" fill="rgb(225,218,4)" fg:x="164" fg:w="1"/><text x="73.1389%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (22 samples, 9.78%)</title><rect x="64.0000%" y="357" width="9.7778%" height="15" fill="rgb(230,182,32)" fg:x="144" fg:w="22"/><text x="64.2500%" y="367.50">rusk-wallet`ro..</text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (21 samples, 9.33%)</title><rect x="64.4444%" y="341" width="9.3333%" height="15" fill="rgb(242,56,43)" fg:x="145" fg:w="21"/><text x="64.6944%" y="351.50">rusk-wallet`r..</text></g><g><title>rusk-wallet`rocksdb::Configurable::PrepareOptions (1 samples, 0.44%)</title><rect x="73.3333%" y="325" width="0.4444%" height="15" fill="rgb(233,99,24)" fg:x="165" fg:w="1"/><text x="73.5833%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.44%)</title><rect x="73.3333%" y="309" width="0.4444%" height="15" fill="rgb(234,209,42)" fg:x="165" fg:w="1"/><text x="73.5833%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.44%)</title><rect x="73.7778%" y="341" width="0.4444%" height="15" fill="rgb(227,7,12)" fg:x="166" fg:w="1"/><text x="74.0278%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 12.00%)</title><rect x="62.6667%" y="373" width="12.0000%" height="15" fill="rgb(245,203,43)" fg:x="141" fg:w="27"/><text x="62.9167%" y="383.50">rusk-wallet`rocksd..</text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.89%)</title><rect x="73.7778%" y="357" width="0.8889%" height="15" fill="rgb(238,205,33)" fg:x="166" fg:w="2"/><text x="74.0278%" y="367.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="74.2222%" y="341" width="0.4444%" height="15" fill="rgb(231,56,7)" fg:x="167" fg:w="1"/><text x="74.4722%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.44%)</title><rect x="74.2222%" y="325" width="0.4444%" height="15" fill="rgb(244,186,29)" fg:x="167" fg:w="1"/><text x="74.4722%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseStatement(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="74.6667%" y="373" width="0.4444%" height="15" fill="rgb(234,111,31)" fg:x="168" fg:w="1"/><text x="74.9167%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::TrimAndRemoveComment(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="74.6667%" y="357" width="0.4444%" height="15" fill="rgb(241,149,10)" fg:x="168" fg:w="1"/><text x="74.9167%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.44%)</title><rect x="74.6667%" y="341" width="0.4444%" height="15" fill="rgb(249,206,44)" fg:x="168" fg:w="1"/><text x="74.9167%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (30 samples, 13.33%)</title><rect x="62.6667%" y="389" width="13.3333%" height="15" fill="rgb(251,153,30)" fg:x="141" fg:w="30"/><text x="62.9167%" y="399.50">rusk-wallet`rocksdb:..</text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="75.1111%" y="373" width="0.8889%" height="15" fill="rgb(239,152,38)" fg:x="169" fg:w="2"/><text x="75.3611%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="75.5556%" y="357" width="0.4444%" height="15" fill="rgb(249,139,47)" fg:x="170" fg:w="1"/><text x="75.8056%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.44%)</title><rect x="75.5556%" y="341" width="0.4444%" height="15" fill="rgb(244,64,35)" fg:x="170" fg:w="1"/><text x="75.8056%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.44%)</title><rect x="75.5556%" y="325" width="0.4444%" height="15" fill="rgb(216,46,15)" fg:x="170" fg:w="1"/><text x="75.8056%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.44%)</title><rect x="75.5556%" y="309" width="0.4444%" height="15" fill="rgb(250,74,19)" fg:x="170" fg:w="1"/><text x="75.8056%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.44%)</title><rect x="75.5556%" y="293" width="0.4444%" height="15" fill="rgb(249,42,33)" fg:x="170" fg:w="1"/><text x="75.8056%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (31 samples, 13.78%)</title><rect x="62.6667%" y="405" width="13.7778%" height="15" fill="rgb(242,149,17)" fg:x="141" fg:w="31"/><text x="62.9167%" y="415.50">rusk-wallet`rocksdb::..</text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyTableFactory (1 samples, 0.44%)</title><rect x="76.0000%" y="389" width="0.4444%" height="15" fill="rgb(244,29,21)" fg:x="171" fg:w="1"/><text x="76.2500%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="76.0000%" y="373" width="0.4444%" height="15" fill="rgb(220,130,37)" fg:x="171" fg:w="1"/><text x="76.2500%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.44%)</title><rect x="76.0000%" y="357" width="0.4444%" height="15" fill="rgb(211,67,2)" fg:x="171" fg:w="1"/><text x="76.2500%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteOptionsFile (37 samples, 16.44%)</title><rect x="60.4444%" y="453" width="16.4444%" height="15" fill="rgb(235,68,52)" fg:x="136" fg:w="37"/><text x="60.6944%" y="463.50">rusk-wallet`rocksdb::DBIm..</text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (36 samples, 16.00%)</title><rect x="60.8889%" y="437" width="16.0000%" height="15" fill="rgb(246,142,3)" fg:x="137" fg:w="36"/><text x="61.1389%" y="447.50">rusk-wallet`rocksdb::Pers..</text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (36 samples, 16.00%)</title><rect x="60.8889%" y="421" width="16.0000%" height="15" fill="rgb(241,25,7)" fg:x="137" fg:w="36"/><text x="61.1389%" y="431.50">rusk-wallet`rocksdb::Pers..</text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Append (1 samples, 0.44%)</title><rect x="76.4444%" y="405" width="0.4444%" height="15" fill="rgb(242,119,39)" fg:x="172" fg:w="1"/><text x="76.6944%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Flush (1 samples, 0.44%)</title><rect x="76.4444%" y="389" width="0.4444%" height="15" fill="rgb(241,98,45)" fg:x="172" fg:w="1"/><text x="76.6944%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::WriteBuffered (1 samples, 0.44%)</title><rect x="76.4444%" y="373" width="0.4444%" height="15" fill="rgb(254,28,30)" fg:x="172" fg:w="1"/><text x="76.6944%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.44%)</title><rect x="76.4444%" y="357" width="0.4444%" height="15" fill="rgb(241,142,54)" fg:x="172" fg:w="1"/><text x="76.6944%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.89%)</title><rect x="76.8889%" y="421" width="0.8889%" height="15" fill="rgb(222,85,15)" fg:x="173" fg:w="2"/><text x="77.1389%" y="431.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (2 samples, 0.89%)</title><rect x="76.8889%" y="405" width="0.8889%" height="15" fill="rgb(210,85,47)" fg:x="173" fg:w="2"/><text x="77.1389%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.44%)</title><rect x="77.3333%" y="389" width="0.4444%" height="15" fill="rgb(224,206,25)" fg:x="174" fg:w="1"/><text x="77.5833%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.44%)</title><rect x="77.7778%" y="421" width="0.4444%" height="15" fill="rgb(243,201,19)" fg:x="175" fg:w="1"/><text x="78.0278%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ValidateOptions (4 samples, 1.78%)</title><rect x="76.8889%" y="437" width="1.7778%" height="15" fill="rgb(236,59,4)" fg:x="173" fg:w="4"/><text x="77.1389%" y="447.50">r..</text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ValidateOptions (1 samples, 0.44%)</title><rect x="78.2222%" y="421" width="0.4444%" height="15" fill="rgb(254,179,45)" fg:x="176" fg:w="1"/><text x="78.4722%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ValidateOptions (1 samples, 0.44%)</title><rect x="78.2222%" y="405" width="0.4444%" height="15" fill="rgb(226,14,10)" fg:x="176" fg:w="1"/><text x="78.4722%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::OptionTypeInfo (1 samples, 0.44%)</title><rect x="78.2222%" y="389" width="0.4444%" height="15" fill="rgb(244,27,41)" fg:x="176" fg:w="1"/><text x="78.4722%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (2 samples, 0.89%)</title><rect x="78.6667%" y="389" width="0.8889%" height="15" fill="rgb(235,35,32)" fg:x="177" fg:w="2"/><text x="78.9167%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (2 samples, 0.89%)</title><rect x="78.6667%" y="373" width="0.8889%" height="15" fill="rgb(218,68,31)" fg:x="177" fg:w="2"/><text x="78.9167%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (2 samples, 0.89%)</title><rect x="78.6667%" y="357" width="0.8889%" height="15" fill="rgb(207,120,37)" fg:x="177" fg:w="2"/><text x="78.9167%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.44%)</title><rect x="79.1111%" y="341" width="0.4444%" height="15" fill="rgb(227,98,0)" fg:x="178" fg:w="1"/><text x="79.3611%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="79.1111%" y="325" width="0.4444%" height="15" fill="rgb(207,7,3)" fg:x="178" fg:w="1"/><text x="79.3611%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="79.1111%" y="309" width="0.4444%" height="15" fill="rgb(206,98,19)" fg:x="178" fg:w="1"/><text x="79.3611%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.44%)</title><rect x="79.1111%" y="293" width="0.4444%" height="15" fill="rgb(217,5,26)" fg:x="178" fg:w="1"/><text x="79.3611%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.44%)</title><rect x="79.1111%" y="277" width="0.4444%" height="15" fill="rgb(235,190,38)" fg:x="178" fg:w="1"/><text x="79.3611%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.44%)</title><rect x="79.1111%" y="261" width="0.4444%" height="15" fill="rgb(247,86,24)" fg:x="178" fg:w="1"/><text x="79.3611%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::TryInsertIntoSecondaryCache(rocksdb::autovector (1 samples, 0.44%)</title><rect x="79.1111%" y="245" width="0.4444%" height="15" fill="rgb(205,101,16)" fg:x="178" fg:w="1"/><text x="79.3611%" y="255.50"></text></g><g><title>rusk-wallet`dusk_wallet::clients::StateStore::state (116 samples, 51.56%)</title><rect x="28.4444%" y="533" width="51.5556%" height="15" fill="rgb(246,168,33)" fg:x="64" fg:w="116"/><text x="28.6944%" y="543.50">rusk-wallet`dusk_wallet::clients::StateStore::state</text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::new (116 samples, 51.56%)</title><rect x="28.4444%" y="517" width="51.5556%" height="15" fill="rgb(231,114,1)" fg:x="64" fg:w="116"/><text x="28.6944%" y="527.50">rusk-wallet`dusk_wallet::cache::Cache::new</text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;T,rocksdb::db::DBWithThreadModeInner&gt;::open_cf (114 samples, 50.67%)</title><rect x="29.3333%" y="501" width="50.6667%" height="15" fill="rgb(207,184,53)" fg:x="66" fg:w="114"/><text x="29.5833%" y="511.50">rusk-wallet`rocksdb::db::DBCommon&lt;T,rocksdb::db::DBWithThreadModeInner&gt;::open_cf</text></g><g><title>rusk-wallet`rocksdb_open_column_families (112 samples, 49.78%)</title><rect x="30.2222%" y="485" width="49.7778%" height="15" fill="rgb(224,95,51)" fg:x="68" fg:w="112"/><text x="30.4722%" y="495.50">rusk-wallet`rocksdb_open_column_families</text></g><g><title>rusk-wallet`rocksdb::DBImpl::Open(rocksdb::DBOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyDescriptor, std::__1::allocator&lt;rocksdb::ColumnFamilyDescriptor&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyHandle*, std::__1::allocator (112 samples, 49.78%)</title><rect x="30.2222%" y="469" width="49.7778%" height="15" fill="rgb(212,188,45)" fg:x="68" fg:w="112"/><text x="30.4722%" y="479.50">rusk-wallet`rocksdb::DBImpl::Open(rocksdb::DBOptions const&amp;, std::__1::basic_strin..</text></g><g><title>rusk-wallet`rocksdb::ValidateOptions (7 samples, 3.11%)</title><rect x="76.8889%" y="453" width="3.1111%" height="15" fill="rgb(223,154,38)" fg:x="173" fg:w="7"/><text x="77.1389%" y="463.50">rus..</text></g><g><title>rusk-wallet`rocksdb::DBOptionsAsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="78.6667%" y="437" width="1.3333%" height="15" fill="rgb(251,22,52)" fg:x="177" fg:w="3"/><text x="78.9167%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsConfigurable::DBOptionsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 1.33%)</title><rect x="78.6667%" y="421" width="1.3333%" height="15" fill="rgb(229,209,22)" fg:x="177" fg:w="3"/><text x="78.9167%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::ImmutableDBOptions::ImmutableDBOptions (3 samples, 1.33%)</title><rect x="78.6667%" y="405" width="1.3333%" height="15" fill="rgb(234,138,34)" fg:x="177" fg:w="3"/><text x="78.9167%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (1 samples, 0.44%)</title><rect x="79.5556%" y="389" width="0.4444%" height="15" fill="rgb(212,95,11)" fg:x="179" fg:w="1"/><text x="79.8056%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.44%)</title><rect x="79.5556%" y="373" width="0.4444%" height="15" fill="rgb(240,179,47)" fg:x="179" fg:w="1"/><text x="79.8056%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.44%)</title><rect x="79.5556%" y="357" width="0.4444%" height="15" fill="rgb(240,163,11)" fg:x="179" fg:w="1"/><text x="79.8056%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (1 samples, 0.44%)</title><rect x="79.5556%" y="341" width="0.4444%" height="15" fill="rgb(236,37,12)" fg:x="179" fg:w="1"/><text x="79.8056%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (1 samples, 0.44%)</title><rect x="79.5556%" y="325" width="0.4444%" height="15" fill="rgb(232,164,16)" fg:x="179" fg:w="1"/><text x="79.8056%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (1 samples, 0.44%)</title><rect x="79.5556%" y="309" width="0.4444%" height="15" fill="rgb(244,205,15)" fg:x="179" fg:w="1"/><text x="79.8056%" y="319.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Add&lt;&amp;dusk_jubjub::ExtendedNielsPoint&gt;&gt;::add (1 samples, 0.44%)</title><rect x="80.0000%" y="405" width="0.4444%" height="15" fill="rgb(223,117,47)" fg:x="180" fg:w="1"/><text x="80.2500%" y="415.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (4 samples, 1.78%)</title><rect x="80.4444%" y="405" width="1.7778%" height="15" fill="rgb(244,107,35)" fg:x="181" fg:w="4"/><text x="80.6944%" y="415.50">r..</text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (7 samples, 3.11%)</title><rect x="80.0000%" y="437" width="3.1111%" height="15" fill="rgb(205,140,8)" fg:x="180" fg:w="7"/><text x="80.2500%" y="447.50">rus..</text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (7 samples, 3.11%)</title><rect x="80.0000%" y="421" width="3.1111%" height="15" fill="rgb(228,84,46)" fg:x="180" fg:w="7"/><text x="80.2500%" y="431.50">rus..</text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (2 samples, 0.89%)</title><rect x="82.2222%" y="405" width="0.8889%" height="15" fill="rgb(254,188,9)" fg:x="185" fg:w="2"/><text x="82.4722%" y="415.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (5 samples, 2.22%)</title><rect x="83.1111%" y="389" width="2.2222%" height="15" fill="rgb(206,112,54)" fg:x="187" fg:w="5"/><text x="83.3611%" y="399.50">r..</text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (6 samples, 2.67%)</title><rect x="83.1111%" y="421" width="2.6667%" height="15" fill="rgb(216,84,49)" fg:x="187" fg:w="6"/><text x="83.3611%" y="431.50">ru..</text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (6 samples, 2.67%)</title><rect x="83.1111%" y="405" width="2.6667%" height="15" fill="rgb(214,194,35)" fg:x="187" fg:w="6"/><text x="83.3611%" y="415.50">ru..</text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.44%)</title><rect x="85.3333%" y="389" width="0.4444%" height="15" fill="rgb(249,28,3)" fg:x="192" fg:w="1"/><text x="85.5833%" y="399.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::to_hash_inputs (3 samples, 1.33%)</title><rect x="85.7778%" y="421" width="1.3333%" height="15" fill="rgb(222,56,52)" fg:x="193" fg:w="3"/><text x="86.0278%" y="431.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (3 samples, 1.33%)</title><rect x="85.7778%" y="405" width="1.3333%" height="15" fill="rgb(245,217,50)" fg:x="193" fg:w="3"/><text x="86.0278%" y="415.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (3 samples, 1.33%)</title><rect x="87.1111%" y="373" width="1.3333%" height="15" fill="rgb(213,201,24)" fg:x="196" fg:w="3"/><text x="87.3611%" y="383.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::sk_r (13 samples, 5.78%)</title><rect x="83.1111%" y="437" width="5.7778%" height="15" fill="rgb(248,116,28)" fg:x="187" fg:w="13"/><text x="83.3611%" y="447.50">rusk-wa..</text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (4 samples, 1.78%)</title><rect x="87.1111%" y="421" width="1.7778%" height="15" fill="rgb(219,72,43)" fg:x="196" fg:w="4"/><text x="87.3611%" y="431.50">r..</text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (4 samples, 1.78%)</title><rect x="87.1111%" y="405" width="1.7778%" height="15" fill="rgb(209,138,14)" fg:x="196" fg:w="4"/><text x="87.3611%" y="415.50">r..</text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (4 samples, 1.78%)</title><rect x="87.1111%" y="389" width="1.7778%" height="15" fill="rgb(222,18,33)" fg:x="196" fg:w="4"/><text x="87.3611%" y="399.50">r..</text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.44%)</title><rect x="88.4444%" y="373" width="0.4444%" height="15" fill="rgb(213,199,7)" fg:x="199" fg:w="1"/><text x="88.6944%" y="383.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (4 samples, 1.78%)</title><rect x="88.8889%" y="405" width="1.7778%" height="15" fill="rgb(250,110,10)" fg:x="200" fg:w="4"/><text x="89.1389%" y="415.50">r..</text></g><g><title>rusk-wallet`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 11.11%)</title><rect x="80.0000%" y="469" width="11.1111%" height="15" fill="rgb(248,123,6)" fg:x="180" fg:w="25"/><text x="80.2500%" y="479.50">rusk-wallet`&lt;all..</text></g><g><title>rusk-wallet`phoenix_core::note::Note::gen_nullifier (25 samples, 11.11%)</title><rect x="80.0000%" y="453" width="11.1111%" height="15" fill="rgb(206,91,31)" fg:x="180" fg:w="25"/><text x="80.2500%" y="463.50">rusk-wallet`phoe..</text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (5 samples, 2.22%)</title><rect x="88.8889%" y="437" width="2.2222%" height="15" fill="rgb(211,154,13)" fg:x="200" fg:w="5"/><text x="89.1389%" y="447.50">r..</text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (5 samples, 2.22%)</title><rect x="88.8889%" y="421" width="2.2222%" height="15" fill="rgb(225,148,7)" fg:x="200" fg:w="5"/><text x="89.1389%" y="431.50">r..</text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.44%)</title><rect x="90.6667%" y="405" width="0.4444%" height="15" fill="rgb(220,160,43)" fg:x="204" fg:w="1"/><text x="90.9167%" y="415.50"></text></g><g><title>rusk-wallet`&lt;phoenix_core::note::Note as dusk_bytes::serialize::Serializable&lt;_&gt;&gt;::from_bytes (1 samples, 0.44%)</title><rect x="91.1111%" y="453" width="0.4444%" height="15" fill="rgb(213,52,39)" fg:x="205" fg:w="1"/><text x="91.3611%" y="463.50"></text></g><g><title>rusk-wallet`&lt;dusk_pki::keys::spend::stealth::StealthAddress as dusk_bytes::serialize::Serializable&lt;64_usize&gt;&gt;::from_bytes (1 samples, 0.44%)</title><rect x="91.1111%" y="437" width="0.4444%" height="15" fill="rgb(243,137,7)" fg:x="205" fg:w="1"/><text x="91.3611%" y="447.50"></text></g><g><title>rusk-wallet`&lt;dusk_jubjub::JubJubAffine as dusk_bytes::serialize::Serializable&lt;32_usize&gt;&gt;::from_bytes (1 samples, 0.44%)</title><rect x="91.1111%" y="421" width="0.4444%" height="15" fill="rgb(230,79,13)" fg:x="205" fg:w="1"/><text x="91.3611%" y="431.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::sqrt (1 samples, 0.44%)</title><rect x="91.1111%" y="405" width="0.4444%" height="15" fill="rgb(247,105,23)" fg:x="205" fg:w="1"/><text x="91.3611%" y="415.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.44%)</title><rect x="91.1111%" y="389" width="0.4444%" height="15" fill="rgb(223,179,41)" fg:x="205" fg:w="1"/><text x="91.3611%" y="399.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::view_key (1 samples, 0.44%)</title><rect x="91.5556%" y="453" width="0.4444%" height="15" fill="rgb(218,9,34)" fg:x="206" fg:w="1"/><text x="91.8056%" y="463.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (1 samples, 0.44%)</title><rect x="91.5556%" y="437" width="0.4444%" height="15" fill="rgb(222,106,8)" fg:x="206" fg:w="1"/><text x="91.8056%" y="447.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (1 samples, 0.44%)</title><rect x="91.5556%" y="421" width="0.4444%" height="15" fill="rgb(211,220,0)" fg:x="206" fg:w="1"/><text x="91.8056%" y="431.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (2 samples, 0.89%)</title><rect x="92.0000%" y="405" width="0.8889%" height="15" fill="rgb(229,52,16)" fg:x="207" fg:w="2"/><text x="92.2500%" y="415.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (3 samples, 1.33%)</title><rect x="92.0000%" y="437" width="1.3333%" height="15" fill="rgb(212,155,18)" fg:x="207" fg:w="3"/><text x="92.2500%" y="447.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (3 samples, 1.33%)</title><rect x="92.0000%" y="421" width="1.3333%" height="15" fill="rgb(242,21,14)" fg:x="207" fg:w="3"/><text x="92.2500%" y="431.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.44%)</title><rect x="92.8889%" y="405" width="0.4444%" height="15" fill="rgb(222,19,48)" fg:x="209" fg:w="1"/><text x="93.1389%" y="415.50"></text></g><g><title>rusk-wallet`dusk_pki::view::ViewKey::owns (4 samples, 1.78%)</title><rect x="92.0000%" y="453" width="1.7778%" height="15" fill="rgb(232,45,27)" fg:x="207" fg:w="4"/><text x="92.2500%" y="463.50">r..</text></g><g><title>rusk-wallet`dusk_pki::permutation::hash (1 samples, 0.44%)</title><rect x="93.3333%" y="437" width="0.4444%" height="15" fill="rgb(249,103,42)" fg:x="210" fg:w="1"/><text x="93.5833%" y="447.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (1 samples, 0.44%)</title><rect x="93.3333%" y="421" width="0.4444%" height="15" fill="rgb(246,81,33)" fg:x="210" fg:w="1"/><text x="93.5833%" y="431.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (1 samples, 0.44%)</title><rect x="93.3333%" y="405" width="0.4444%" height="15" fill="rgb(252,33,42)" fg:x="210" fg:w="1"/><text x="93.5833%" y="415.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (1 samples, 0.44%)</title><rect x="93.3333%" y="389" width="0.4444%" height="15" fill="rgb(209,212,41)" fg:x="210" fg:w="1"/><text x="93.5833%" y="399.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (1 samples, 0.44%)</title><rect x="93.3333%" y="373" width="0.4444%" height="15" fill="rgb(207,154,6)" fg:x="210" fg:w="1"/><text x="93.5833%" y="383.50"></text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::insert (1 samples, 0.44%)</title><rect x="93.7778%" y="453" width="0.4444%" height="15" fill="rgb(223,64,47)" fg:x="211" fg:w="1"/><text x="94.0278%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb_writebatch_put_cf (1 samples, 0.44%)</title><rect x="93.7778%" y="437" width="0.4444%" height="15" fill="rgb(211,161,38)" fg:x="211" fg:w="1"/><text x="94.0278%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::WriteBatch::Put (1 samples, 0.44%)</title><rect x="93.7778%" y="421" width="0.4444%" height="15" fill="rgb(219,138,40)" fg:x="211" fg:w="1"/><text x="94.0278%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::WriteBatchInternal::Put (1 samples, 0.44%)</title><rect x="93.7778%" y="405" width="0.4444%" height="15" fill="rgb(241,228,46)" fg:x="211" fg:w="1"/><text x="94.0278%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.44%)</title><rect x="93.7778%" y="389" width="0.4444%" height="15" fill="rgb(223,209,38)" fg:x="211" fg:w="1"/><text x="94.0278%" y="399.50"></text></g><g><title>libc+ (1 samples, 0.44%)</title><rect x="93.7778%" y="373" width="0.4444%" height="15" fill="rgb(236,164,45)" fg:x="211" fg:w="1"/><text x="94.0278%" y="383.50"></text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::notes (1 samples, 0.44%)</title><rect x="94.2222%" y="453" width="0.4444%" height="15" fill="rgb(231,15,5)" fg:x="212" fg:w="1"/><text x="94.4722%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::DBIter::Next (1 samples, 0.44%)</title><rect x="94.2222%" y="437" width="0.4444%" height="15" fill="rgb(252,35,15)" fg:x="212" fg:w="1"/><text x="94.4722%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::MergingIterator::NextAndGetResult (1 samples, 0.44%)</title><rect x="94.2222%" y="421" width="0.4444%" height="15" fill="rgb(248,181,18)" fg:x="212" fg:w="1"/><text x="94.4722%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::MergingIterator::Next (1 samples, 0.44%)</title><rect x="94.2222%" y="405" width="0.4444%" height="15" fill="rgb(233,39,42)" fg:x="212" fg:w="1"/><text x="94.4722%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableIterator::NextAndGetResult (1 samples, 0.44%)</title><rect x="94.2222%" y="389" width="0.4444%" height="15" fill="rgb(238,110,33)" fg:x="212" fg:w="1"/><text x="94.4722%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableIterator::Next (1 samples, 0.44%)</title><rect x="94.2222%" y="373" width="0.4444%" height="15" fill="rgb(233,195,10)" fg:x="212" fg:w="1"/><text x="94.4722%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableIterator::FindBlockForward (1 samples, 0.44%)</title><rect x="94.2222%" y="357" width="0.4444%" height="15" fill="rgb(254,105,3)" fg:x="212" fg:w="1"/><text x="94.4722%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableIterator::InitDataBlock (1 samples, 0.44%)</title><rect x="94.2222%" y="341" width="0.4444%" height="15" fill="rgb(221,225,9)" fg:x="212" fg:w="1"/><text x="94.4722%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::DataBlockIter* rocksdb::BlockBasedTable::NewDataBlockIterator&lt;rocksdb::DataBlockIter&gt; (1 samples, 0.44%)</title><rect x="94.2222%" y="325" width="0.4444%" height="15" fill="rgb(224,227,45)" fg:x="212" fg:w="1"/><text x="94.4722%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::BlockBasedTable::RetrieveBlock&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, rocksdb::CachableEntry (1 samples, 0.44%)</title><rect x="94.2222%" y="309" width="0.4444%" height="15" fill="rgb(229,198,43)" fg:x="212" fg:w="1"/><text x="94.4722%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::BlockBasedTable::MaybeReadBlockAndLoadToCache&lt;rocksdb::Block&gt;(rocksdb::FilePrefetchBuffer*, rocksdb::ReadOptions const&amp;, rocksdb::BlockHandle const&amp;, rocksdb::UncompressionDict const&amp;, bool, bool, rocksdb::CachableEntry (1 samples, 0.44%)</title><rect x="94.2222%" y="293" width="0.4444%" height="15" fill="rgb(206,209,35)" fg:x="212" fg:w="1"/><text x="94.4722%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::BlockFetcher::ReadBlockContents (1 samples, 0.44%)</title><rect x="94.2222%" y="277" width="0.4444%" height="15" fill="rgb(245,195,53)" fg:x="212" fg:w="1"/><text x="94.4722%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::UncompressBlockData (1 samples, 0.44%)</title><rect x="94.2222%" y="261" width="0.4444%" height="15" fill="rgb(240,92,26)" fg:x="212" fg:w="1"/><text x="94.4722%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::Snappy_Uncompress (1 samples, 0.44%)</title><rect x="94.2222%" y="245" width="0.4444%" height="15" fill="rgb(207,40,23)" fg:x="212" fg:w="1"/><text x="94.4722%" y="255.50"></text></g><g><title>rusk-wallet`snappy::RawUncompress (1 samples, 0.44%)</title><rect x="94.2222%" y="229" width="0.4444%" height="15" fill="rgb(223,111,35)" fg:x="212" fg:w="1"/><text x="94.4722%" y="239.50"></text></g><g><title>rusk-wallet`snappy::RawUncompress (1 samples, 0.44%)</title><rect x="94.2222%" y="213" width="0.4444%" height="15" fill="rgb(229,147,28)" fg:x="212" fg:w="1"/><text x="94.4722%" y="223.50"></text></g><g><title>rusk-wallet`void snappy::SnappyDecompressor::DecompressAllTags&lt;snappy::SnappyArrayWriter&gt; (1 samples, 0.44%)</title><rect x="94.2222%" y="197" width="0.4444%" height="15" fill="rgb(211,29,28)" fg:x="212" fg:w="1"/><text x="94.4722%" y="207.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;unsigned char const*, long&gt; snappy::DecompressBranchless&lt;char*&gt; (1 samples, 0.44%)</title><rect x="94.2222%" y="181" width="0.4444%" height="15" fill="rgb(228,72,33)" fg:x="212" fg:w="1"/><text x="94.4722%" y="191.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (1 samples, 0.44%)</title><rect x="94.6667%" y="437" width="0.4444%" height="15" fill="rgb(205,214,31)" fg:x="213" fg:w="1"/><text x="94.9167%" y="447.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (1 samples, 0.44%)</title><rect x="94.6667%" y="421" width="0.4444%" height="15" fill="rgb(224,111,15)" fg:x="213" fg:w="1"/><text x="94.9167%" y="431.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.44%)</title><rect x="94.6667%" y="405" width="0.4444%" height="15" fill="rgb(253,21,26)" fg:x="213" fg:w="1"/><text x="94.9167%" y="415.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (1 samples, 0.44%)</title><rect x="95.1111%" y="421" width="0.4444%" height="15" fill="rgb(245,139,43)" fg:x="214" fg:w="1"/><text x="95.3611%" y="431.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (1 samples, 0.44%)</title><rect x="95.1111%" y="405" width="0.4444%" height="15" fill="rgb(252,170,7)" fg:x="214" fg:w="1"/><text x="95.3611%" y="415.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.44%)</title><rect x="95.1111%" y="389" width="0.4444%" height="15" fill="rgb(231,118,14)" fg:x="214" fg:w="1"/><text x="95.3611%" y="399.50"></text></g><g><title>rusk-wallet`&lt;dusk_wallet::clients::StateStore as dusk_wallet_core::StateClient&gt;::fetch_notes (11 samples, 4.89%)</title><rect x="91.1111%" y="469" width="4.8889%" height="15" fill="rgb(238,83,0)" fg:x="205" fg:w="11"/><text x="91.3611%" y="479.50">rusk-w..</text></g><g><title>rusk-wallet`phoenix_core::note::Note::gen_nullifier (3 samples, 1.33%)</title><rect x="94.6667%" y="453" width="1.3333%" height="15" fill="rgb(221,39,39)" fg:x="213" fg:w="3"/><text x="94.9167%" y="463.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::sk_r (2 samples, 0.89%)</title><rect x="95.1111%" y="437" width="0.8889%" height="15" fill="rgb(222,119,46)" fg:x="214" fg:w="2"/><text x="95.3611%" y="447.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (1 samples, 0.44%)</title><rect x="95.5556%" y="421" width="0.4444%" height="15" fill="rgb(222,165,49)" fg:x="215" fg:w="1"/><text x="95.8056%" y="431.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (1 samples, 0.44%)</title><rect x="95.5556%" y="405" width="0.4444%" height="15" fill="rgb(219,113,52)" fg:x="215" fg:w="1"/><text x="95.8056%" y="415.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (1 samples, 0.44%)</title><rect x="95.5556%" y="389" width="0.4444%" height="15" fill="rgb(214,7,15)" fg:x="215" fg:w="1"/><text x="95.8056%" y="399.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (1 samples, 0.44%)</title><rect x="95.5556%" y="373" width="0.4444%" height="15" fill="rgb(235,32,4)" fg:x="215" fg:w="1"/><text x="95.8056%" y="383.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (37 samples, 16.44%)</title><rect x="80.0000%" y="517" width="16.4444%" height="15" fill="rgb(238,90,54)" fg:x="180" fg:w="37"/><text x="80.2500%" y="527.50">rusk-wallet`&lt;core::future..</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::get_balance (37 samples, 16.44%)</title><rect x="80.0000%" y="501" width="16.4444%" height="15" fill="rgb(213,208,19)" fg:x="180" fg:w="37"/><text x="80.2500%" y="511.50">rusk-wallet`dusk_wallet_c..</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::unspent_notes (37 samples, 16.44%)</title><rect x="80.0000%" y="485" width="16.4444%" height="15" fill="rgb(233,156,4)" fg:x="180" fg:w="37"/><text x="80.2500%" y="495.50">rusk-wallet`dusk_wallet_c..</text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::view_key (1 samples, 0.44%)</title><rect x="96.0000%" y="469" width="0.4444%" height="15" fill="rgb(207,194,5)" fg:x="216" fg:w="1"/><text x="96.2500%" y="479.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (1 samples, 0.44%)</title><rect x="96.0000%" y="453" width="0.4444%" height="15" fill="rgb(206,111,30)" fg:x="216" fg:w="1"/><text x="96.2500%" y="463.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (1 samples, 0.44%)</title><rect x="96.0000%" y="437" width="0.4444%" height="15" fill="rgb(243,70,54)" fg:x="216" fg:w="1"/><text x="96.2500%" y="447.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.44%)</title><rect x="96.0000%" y="421" width="0.4444%" height="15" fill="rgb(242,28,8)" fg:x="216" fg:w="1"/><text x="96.2500%" y="431.50"></text></g><g><title>rusk-wallet`&lt;std::sync::mpsc::TryRecvError as core::convert::From&lt;std::sync::mpsc::RecvError&gt;&gt;::from (1 samples, 0.44%)</title><rect x="96.4444%" y="517" width="0.4444%" height="15" fill="rgb(219,106,18)" fg:x="217" fg:w="1"/><text x="96.6944%" y="527.50"></text></g><g><title>rusk-wallet`&lt;std::sys::unix::os_str::Slice as core::fmt::Display&gt;::fmt (1 samples, 0.44%)</title><rect x="96.4444%" y="501" width="0.4444%" height="15" fill="rgb(244,222,10)" fg:x="217" fg:w="1"/><text x="96.6944%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.44%)</title><rect x="96.4444%" y="485" width="0.4444%" height="15" fill="rgb(236,179,52)" fg:x="217" fg:w="1"/><text x="96.6944%" y="495.50"></text></g><g><title>rusk-wallet`dusk_wallet::wallet::address::Address::preview (1 samples, 0.44%)</title><rect x="96.8889%" y="517" width="0.4444%" height="15" fill="rgb(213,23,39)" fg:x="218" fg:w="1"/><text x="97.1389%" y="527.50"></text></g><g><title>rusk-wallet`bs58::encode::EncodeBuilder&lt;I&gt;::into_string (1 samples, 0.44%)</title><rect x="96.8889%" y="501" width="0.4444%" height="15" fill="rgb(238,48,10)" fg:x="218" fg:w="1"/><text x="97.1389%" y="511.50"></text></g><g><title>rusk-wallet`bs58::encode::encode_into (1 samples, 0.44%)</title><rect x="96.8889%" y="485" width="0.4444%" height="15" fill="rgb(251,196,23)" fg:x="218" fg:w="1"/><text x="97.1389%" y="495.50"></text></g><g><title>rusk-wallet`&lt;requestty_ui::events::crossterm::CrosstermEvents as requestty_ui::events::EventIterator&gt;::next_event (1 samples, 0.44%)</title><rect x="97.3333%" y="453" width="0.4444%" height="15" fill="rgb(250,152,24)" fg:x="219" fg:w="1"/><text x="97.5833%" y="463.50"></text></g><g><title>rusk-wallet`crossterm::event::read (1 samples, 0.44%)</title><rect x="97.3333%" y="437" width="0.4444%" height="15" fill="rgb(209,150,17)" fg:x="219" fg:w="1"/><text x="97.5833%" y="447.50"></text></g><g><title>rusk-wallet`crossterm::event::read::InternalEventReader::read (1 samples, 0.44%)</title><rect x="97.3333%" y="421" width="0.4444%" height="15" fill="rgb(234,202,34)" fg:x="219" fg:w="1"/><text x="97.5833%" y="431.50"></text></g><g><title>rusk-wallet`crossterm::event::read::InternalEventReader::poll (1 samples, 0.44%)</title><rect x="97.3333%" y="405" width="0.4444%" height="15" fill="rgb(253,148,53)" fg:x="219" fg:w="1"/><text x="97.5833%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.44%)</title><rect x="97.3333%" y="389" width="0.4444%" height="15" fill="rgb(218,129,16)" fg:x="219" fg:w="1"/><text x="97.5833%" y="399.50"></text></g><g><title>rusk-wallet`crossterm::terminal::sys::unix::disable_raw_mode (2 samples, 0.89%)</title><rect x="97.7778%" y="453" width="0.8889%" height="15" fill="rgb(216,85,19)" fg:x="220" fg:w="2"/><text x="98.0278%" y="463.50"></text></g><g><title>libsystem_c.dylib`tcsetattr (2 samples, 0.89%)</title><rect x="97.7778%" y="437" width="0.8889%" height="15" fill="rgb(235,228,7)" fg:x="220" fg:w="2"/><text x="98.0278%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (2 samples, 0.89%)</title><rect x="97.7778%" y="421" width="0.8889%" height="15" fill="rgb(245,175,0)" fg:x="220" fg:w="2"/><text x="98.0278%" y="431.50"></text></g><g><title>rusk-wallet`requestty::prompt_one (5 samples, 2.22%)</title><rect x="97.3333%" y="517" width="2.2222%" height="15" fill="rgb(208,168,36)" fg:x="219" fg:w="5"/><text x="97.5833%" y="527.50">r..</text></g><g><title>rusk-wallet`requestty::question::Question::ask (5 samples, 2.22%)</title><rect x="97.3333%" y="501" width="2.2222%" height="15" fill="rgb(246,171,24)" fg:x="219" fg:w="5"/><text x="97.5833%" y="511.50">r..</text></g><g><title>rusk-wallet`requestty::question::select::Select::ask (5 samples, 2.22%)</title><rect x="97.3333%" y="485" width="2.2222%" height="15" fill="rgb(215,142,24)" fg:x="219" fg:w="5"/><text x="97.5833%" y="495.50">r..</text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::run (5 samples, 2.22%)</title><rect x="97.3333%" y="469" width="2.2222%" height="15" fill="rgb(250,187,7)" fg:x="219" fg:w="5"/><text x="97.5833%" y="479.50">r..</text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::render (2 samples, 0.89%)</title><rect x="98.6667%" y="453" width="0.8889%" height="15" fill="rgb(228,66,33)" fg:x="222" fg:w="2"/><text x="98.9167%" y="463.50"></text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::update_size (2 samples, 0.89%)</title><rect x="98.6667%" y="437" width="0.8889%" height="15" fill="rgb(234,215,21)" fg:x="222" fg:w="2"/><text x="98.9167%" y="447.50"></text></g><g><title>rusk-wallet`crossterm::terminal::sys::unix::size (2 samples, 0.89%)</title><rect x="98.6667%" y="421" width="0.8889%" height="15" fill="rgb(222,191,20)" fg:x="222" fg:w="2"/><text x="98.9167%" y="431.50"></text></g><g><title>rusk-wallet`std::fs::OpenOptions::_open (2 samples, 0.89%)</title><rect x="98.6667%" y="405" width="0.8889%" height="15" fill="rgb(245,79,54)" fg:x="222" fg:w="2"/><text x="98.9167%" y="415.50"></text></g><g><title>rusk-wallet`std::sys::unix::fs::File::open_c (2 samples, 0.89%)</title><rect x="98.6667%" y="389" width="0.8889%" height="15" fill="rgb(240,10,37)" fg:x="222" fg:w="2"/><text x="98.9167%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.89%)</title><rect x="98.6667%" y="373" width="0.8889%" height="15" fill="rgb(214,192,32)" fg:x="222" fg:w="2"/><text x="98.9167%" y="383.50"></text></g><g><title>all (225 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(209,36,54)" fg:x="0" fg:w="225"/><text x="0.2500%" y="639.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (165 samples, 73.33%)</title><rect x="26.6667%" y="613" width="73.3333%" height="15" fill="rgb(220,10,11)" fg:x="60" fg:w="165"/><text x="26.9167%" y="623.50">rusk-wallet`tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>rusk-wallet`tokio::park::thread::CachedParkThread::block_on (165 samples, 73.33%)</title><rect x="26.6667%" y="597" width="73.3333%" height="15" fill="rgb(221,106,17)" fg:x="60" fg:w="165"/><text x="26.9167%" y="607.50">rusk-wallet`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (164 samples, 72.89%)</title><rect x="27.1111%" y="581" width="72.8889%" height="15" fill="rgb(251,142,44)" fg:x="61" fg:w="164"/><text x="27.3611%" y="591.50">rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (164 samples, 72.89%)</title><rect x="27.1111%" y="565" width="72.8889%" height="15" fill="rgb(238,13,15)" fg:x="61" fg:w="164"/><text x="27.3611%" y="575.50">rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>rusk-wallet`rusk_wallet::exec::_{{closure}} (164 samples, 72.89%)</title><rect x="27.1111%" y="549" width="72.8889%" height="15" fill="rgb(208,107,27)" fg:x="61" fg:w="164"/><text x="27.3611%" y="559.50">rusk-wallet`rusk_wallet::exec::_{{closure}}</text></g><g><title>rusk-wallet`rusk_wallet::interactive::run_loop::_{{closure}} (45 samples, 20.00%)</title><rect x="80.0000%" y="533" width="20.0000%" height="15" fill="rgb(205,136,37)" fg:x="180" fg:w="45"/><text x="80.2500%" y="543.50">rusk-wallet`rusk_wallet::intera..</text></g><g><title>rusk-wallet`std::io::stdio::_print (1 samples, 0.44%)</title><rect x="99.5556%" y="517" width="0.4444%" height="15" fill="rgb(250,205,27)" fg:x="224" fg:w="1"/><text x="99.8056%" y="527.50"></text></g><g><title>rusk-wallet`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.44%)</title><rect x="99.5556%" y="501" width="0.4444%" height="15" fill="rgb(210,80,43)" fg:x="224" fg:w="1"/><text x="99.8056%" y="511.50"></text></g><g><title>rusk-wallet`core::fmt::write (1 samples, 0.44%)</title><rect x="99.5556%" y="485" width="0.4444%" height="15" fill="rgb(247,160,36)" fg:x="224" fg:w="1"/><text x="99.8056%" y="495.50"></text></g><g><title>rusk-wallet`rusk_abi::dusk::from_dusk (1 samples, 0.44%)</title><rect x="99.5556%" y="469" width="0.4444%" height="15" fill="rgb(234,13,49)" fg:x="224" fg:w="1"/><text x="99.8056%" y="479.50"></text></g></svg></svg>