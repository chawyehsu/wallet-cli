<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="4588"><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0000%" y="453" width="0.0218%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="0.0000%" y="437" width="0.0218%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__connect (1 samples, 0.02%)</title><rect x="0.0000%" y="421" width="0.0218%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="0.0000%" y="469" width="0.0436%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="479.50"></text></g><g><title>rusk-wallet`tokio::runtime::blocking::pool::spawn_blocking (1 samples, 0.02%)</title><rect x="0.0218%" y="453" width="0.0218%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.2718%" y="463.50"></text></g><g><title>rusk-wallet`tokio::runtime::handle::Handle::spawn_blocking (1 samples, 0.02%)</title><rect x="0.0218%" y="437" width="0.0218%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.2718%" y="447.50"></text></g><g><title>rusk-wallet`tokio::runtime::blocking::pool::Spawner::spawn (1 samples, 0.02%)</title><rect x="0.0218%" y="421" width="0.0218%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.2718%" y="431.50"></text></g><g><title>rusk-wallet`std::thread::Builder::spawn (1 samples, 0.02%)</title><rect x="0.0218%" y="405" width="0.0218%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.2718%" y="415.50"></text></g><g><title>rusk-wallet`std::sys::unix::thread::Thread::new (1 samples, 0.02%)</title><rect x="0.0218%" y="389" width="0.0218%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2718%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_create (1 samples, 0.02%)</title><rect x="0.0218%" y="373" width="0.0218%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2718%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1 samples, 0.02%)</title><rect x="0.0218%" y="357" width="0.0218%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2718%" y="367.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="0.0000%" y="501" width="0.0654%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="3"/><text x="0.2500%" y="511.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="0.0000%" y="485" width="0.0654%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="3"/><text x="0.2500%" y="495.50"></text></g><g><title>rusk-wallet`h2::proto::ping_pong::PingPong::new (1 samples, 0.02%)</title><rect x="0.0436%" y="469" width="0.0218%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="1"/><text x="0.2936%" y="479.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::grpc_timeout::GrpcTimeout&lt;S&gt; as tower_service::Service&lt;http::request::Request&lt;ReqBody&gt;&gt;&gt;::poll_ready (4 samples, 0.09%)</title><rect x="0.0000%" y="533" width="0.0872%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="4"/><text x="0.2500%" y="543.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (4 samples, 0.09%)</title><rect x="0.0000%" y="517" width="0.0872%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="527.50"></text></g><g><title>rusk-wallet`hyper::client::conn::Builder::handshake (1 samples, 0.02%)</title><rect x="0.0654%" y="501" width="0.0218%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.3154%" y="511.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::connection::Connection as tower_service::Service&lt;http::request::Request&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,tonic::status::Status&gt;&gt;&gt;&gt;::poll_ready (5 samples, 0.11%)</title><rect x="0.0000%" y="565" width="0.1090%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="5"/><text x="0.2500%" y="575.50"></text></g><g><title>rusk-wallet`&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (5 samples, 0.11%)</title><rect x="0.0000%" y="549" width="0.1090%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="559.50"></text></g><g><title>rusk-wallet`&lt;tonic::transport::service::reconnect::Reconnect&lt;M,Target&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (1 samples, 0.02%)</title><rect x="0.0872%" y="533" width="0.0218%" height="15" fill="rgb(226,26,5)" fg:x="4" fg:w="1"/><text x="0.3372%" y="543.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.13%)</title><rect x="0.0000%" y="597" width="0.1308%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6 samples, 0.13%)</title><rect x="0.0000%" y="581" width="0.1308%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50"></text></g><g><title>rusk-wallet`&lt;tower_layer::stack::Stack&lt;Inner,Outer&gt; as tower_layer::Layer&lt;S&gt;&gt;::layer (1 samples, 0.02%)</title><rect x="0.1090%" y="565" width="0.0218%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.3590%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;T,D&gt;::list_cf (1 samples, 0.02%)</title><rect x="0.1308%" y="565" width="0.0218%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="0.3808%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb::DB::ListColumnFamilies(rocksdb::DBOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.1308%" y="549" width="0.0218%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="0.3808%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::NewThreadStatusCfInfo (1 samples, 0.02%)</title><rect x="0.1526%" y="517" width="0.0218%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="1"/><text x="0.4026%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::DBImpl(rocksdb::DBOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.1744%" y="501" width="0.0218%" height="15" fill="rgb(225,111,53)" fg:x="8" fg:w="1"/><text x="0.4244%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::DumpRocksDBBuildVersion (1 samples, 0.02%)</title><rect x="0.1744%" y="485" width="0.0218%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="1"/><text x="0.4244%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::Log (1 samples, 0.02%)</title><rect x="0.1744%" y="469" width="0.0218%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="0.4244%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::EnvLogger::Logv (1 samples, 0.02%)</title><rect x="0.1744%" y="453" width="0.0218%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="0.4244%" y="463.50"></text></g><g><title>libsystem_c.dylib`localtime_r (1 samples, 0.02%)</title><rect x="0.1744%" y="437" width="0.0218%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="1"/><text x="0.4244%" y="447.50"></text></g><g><title>libsystem_c.dylib`tzsetwall_basic (1 samples, 0.02%)</title><rect x="0.1744%" y="421" width="0.0218%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="0.4244%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`access (1 samples, 0.02%)</title><rect x="0.1744%" y="405" width="0.0218%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="0.4244%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::CompositeEnv::LockFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.1962%" y="485" width="0.0218%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="0.4462%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::LockFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.1962%" y="469" width="0.0218%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="0.4462%" y="479.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="0.1962%" y="453" width="0.0218%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="0.4462%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::SetupDBId (1 samples, 0.02%)</title><rect x="0.2180%" y="485" width="0.0218%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="0.4680%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::GetDbIdentityFromIdentityFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2180%" y="469" width="0.0218%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="0.4680%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::ReadFileToString(rocksdb::FileSystem*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2180%" y="453" width="0.0218%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="1"/><text x="0.4680%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::PosixSequentialFile::Read (1 samples, 0.02%)</title><rect x="0.2180%" y="437" width="0.0218%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="1"/><text x="0.4680%" y="447.50"></text></g><g><title>libsystem_c.dylib`fread (1 samples, 0.02%)</title><rect x="0.2180%" y="421" width="0.0218%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="1"/><text x="0.4680%" y="431.50"></text></g><g><title>libsystem_c.dylib`__fread (1 samples, 0.02%)</title><rect x="0.2180%" y="405" width="0.0218%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="1"/><text x="0.4680%" y="415.50"></text></g><g><title>libsystem_c.dylib`__srefill0 (1 samples, 0.02%)</title><rect x="0.2180%" y="389" width="0.0218%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="1"/><text x="0.4680%" y="399.50"></text></g><g><title>libsystem_c.dylib`__smakebuf (1 samples, 0.02%)</title><rect x="0.2180%" y="373" width="0.0218%" height="15" fill="rgb(213,116,39)" fg:x="10" fg:w="1"/><text x="0.4680%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`fstat (1 samples, 0.02%)</title><rect x="0.2180%" y="357" width="0.0218%" height="15" fill="rgb(222,207,29)" fg:x="10" fg:w="1"/><text x="0.4680%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::Recover(std::__1::vector&lt;rocksdb::ColumnFamilyDescriptor, std::__1::allocator (3 samples, 0.07%)</title><rect x="0.1962%" y="501" width="0.0654%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="3"/><text x="0.4462%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::Recover(std::__1::vector&lt;rocksdb::ColumnFamilyDescriptor, std::__1::allocator&lt;rocksdb::ColumnFamilyDescriptor&gt;&gt; const&amp;, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2398%" y="485" width="0.0218%" height="15" fill="rgb(218,138,4)" fg:x="11" fg:w="1"/><text x="0.4898%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::VersionEditHandlerBase::Iterate (1 samples, 0.02%)</title><rect x="0.2398%" y="469" width="0.0218%" height="15" fill="rgb(250,191,14)" fg:x="11" fg:w="1"/><text x="0.4898%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::Initialize (1 samples, 0.02%)</title><rect x="0.2398%" y="453" width="0.0218%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="1"/><text x="0.4898%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::VersionEditHandler::CreateCfAndInit (1 samples, 0.02%)</title><rect x="0.2398%" y="437" width="0.0218%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="0.4898%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::CreateColumnFamily (1 samples, 0.02%)</title><rect x="0.2398%" y="421" width="0.0218%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="0.4898%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilySet::CreateColumnFamily(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2398%" y="405" width="0.0218%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="0.4898%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::InternalStats::InternalStats (1 samples, 0.02%)</title><rect x="0.2398%" y="389" width="0.0218%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="0.4898%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteOptionsFile (1 samples, 0.02%)</title><rect x="0.2616%" y="501" width="0.0218%" height="15" fill="rgb(231,138,38)" fg:x="12" fg:w="1"/><text x="0.5116%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="485" width="0.0218%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="0.5116%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="469" width="0.0218%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="0.5116%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="453" width="0.0218%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="0.5116%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="437" width="0.0218%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="0.5116%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="421" width="0.0218%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="0.5116%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="405" width="0.0218%" height="15" fill="rgb(227,1,9)" fg:x="12" fg:w="1"/><text x="0.5116%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="0.2616%" y="389" width="0.0218%" height="15" fill="rgb(248,47,43)" fg:x="12" fg:w="1"/><text x="0.5116%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="0.2616%" y="373" width="0.0218%" height="15" fill="rgb(221,10,30)" fg:x="12" fg:w="1"/><text x="0.5116%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="357" width="0.0218%" height="15" fill="rgb(210,229,1)" fg:x="12" fg:w="1"/><text x="0.5116%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="341" width="0.0218%" height="15" fill="rgb(222,148,37)" fg:x="12" fg:w="1"/><text x="0.5116%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="325" width="0.0218%" height="15" fill="rgb(234,67,33)" fg:x="12" fg:w="1"/><text x="0.5116%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="309" width="0.0218%" height="15" fill="rgb(247,98,35)" fg:x="12" fg:w="1"/><text x="0.5116%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="0.2616%" y="293" width="0.0218%" height="15" fill="rgb(247,138,52)" fg:x="12" fg:w="1"/><text x="0.5116%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="277" width="0.0218%" height="15" fill="rgb(213,79,30)" fg:x="12" fg:w="1"/><text x="0.5116%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="0.2616%" y="261" width="0.0218%" height="15" fill="rgb(246,177,23)" fg:x="12" fg:w="1"/><text x="0.5116%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="245" width="0.0218%" height="15" fill="rgb(230,62,27)" fg:x="12" fg:w="1"/><text x="0.5116%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="229" width="0.0218%" height="15" fill="rgb(216,154,8)" fg:x="12" fg:w="1"/><text x="0.5116%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="213" width="0.0218%" height="15" fill="rgb(244,35,45)" fg:x="12" fg:w="1"/><text x="0.5116%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="197" width="0.0218%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="0.5116%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="181" width="0.0218%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="1"/><text x="0.5116%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::FlushBlockPolicyFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="0.2616%" y="165" width="0.0218%" height="15" fill="rgb(233,84,52)" fg:x="12" fg:w="1"/><text x="0.5116%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewSharedObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="0.2616%" y="149" width="0.0218%" height="15" fill="rgb(207,117,47)" fg:x="12" fg:w="1"/><text x="0.5116%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FlushBlockPolicyFactory**, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete (1 samples, 0.02%)</title><rect x="0.2616%" y="133" width="0.0218%" height="15" fill="rgb(249,43,39)" fg:x="12" fg:w="1"/><text x="0.5116%" y="143.50"></text></g><g><title>rusk-wallet`std::__1::function&lt;rocksdb::FlushBlockPolicyFactory* (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete&lt;rocksdb::FlushBlockPolicyFactory&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt; rocksdb::ObjectLibrary::FindFactory&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="117" width="0.0218%" height="15" fill="rgb(209,38,44)" fg:x="12" fg:w="1"/><text x="0.5116%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::ObjectLibrary::PatternEntry::Matches(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="101" width="0.0218%" height="15" fill="rgb(236,212,23)" fg:x="12" fg:w="1"/><text x="0.5116%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::ObjectLibrary::PatternEntry::MatchesTarget(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2616%" y="85" width="0.0218%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="1"/><text x="0.5116%" y="95.50"></text></g><g><title>rusk-wallet`dusk_wallet::clients::StateStore::state (8 samples, 0.17%)</title><rect x="0.1308%" y="597" width="0.1744%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="8"/><text x="0.3808%" y="607.50"></text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::new (8 samples, 0.17%)</title><rect x="0.1308%" y="581" width="0.1744%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="8"/><text x="0.3808%" y="591.50"></text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;T,rocksdb::db::DBWithThreadModeInner&gt;::open (7 samples, 0.15%)</title><rect x="0.1526%" y="565" width="0.1526%" height="15" fill="rgb(211,81,21)" fg:x="7" fg:w="7"/><text x="0.4026%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb_open (7 samples, 0.15%)</title><rect x="0.1526%" y="549" width="0.1526%" height="15" fill="rgb(208,190,38)" fg:x="7" fg:w="7"/><text x="0.4026%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::DB::Open(rocksdb::Options const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="0.1526%" y="533" width="0.1526%" height="15" fill="rgb(235,213,38)" fg:x="7" fg:w="7"/><text x="0.4026%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::Open(rocksdb::DBOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyDescriptor, std::__1::allocator&lt;rocksdb::ColumnFamilyDescriptor&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyHandle*, std::__1::allocator (6 samples, 0.13%)</title><rect x="0.1744%" y="517" width="0.1308%" height="15" fill="rgb(237,122,38)" fg:x="8" fg:w="6"/><text x="0.4244%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::ValidateOptions (1 samples, 0.02%)</title><rect x="0.2833%" y="501" width="0.0218%" height="15" fill="rgb(244,218,35)" fg:x="13" fg:w="1"/><text x="0.5333%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::CFOptionsAsConfigurable(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="0.2833%" y="485" width="0.0218%" height="15" fill="rgb(240,68,47)" fg:x="13" fg:w="1"/><text x="0.5333%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::MutableCFOptions (1 samples, 0.02%)</title><rect x="0.2833%" y="469" width="0.0218%" height="15" fill="rgb(210,16,53)" fg:x="13" fg:w="1"/><text x="0.5333%" y="479.50"></text></g><g><title>rusk-wallet`&lt;dusk_bls12_381::scalar::Scalar as subtle::ConditionallySelectable&gt;::conditional_select (1 samples, 0.02%)</title><rect x="0.3051%" y="501" width="0.0218%" height="15" fill="rgb(235,124,12)" fg:x="14" fg:w="1"/><text x="0.5551%" y="511.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::public_spend_key (2 samples, 0.04%)</title><rect x="0.3051%" y="533" width="0.0436%" height="15" fill="rgb(224,169,11)" fg:x="14" fg:w="2"/><text x="0.5551%" y="543.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (2 samples, 0.04%)</title><rect x="0.3051%" y="517" width="0.0436%" height="15" fill="rgb(250,166,2)" fg:x="14" fg:w="2"/><text x="0.5551%" y="527.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (1 samples, 0.02%)</title><rect x="0.3269%" y="501" width="0.0218%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="1"/><text x="0.5769%" y="511.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.02%)</title><rect x="0.3269%" y="485" width="0.0218%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="1"/><text x="0.5769%" y="495.50"></text></g><g><title>rusk-wallet`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.07%)</title><rect x="0.3051%" y="565" width="0.0654%" height="15" fill="rgb(228,99,48)" fg:x="14" fg:w="3"/><text x="0.5551%" y="575.50"></text></g><g><title>rusk-wallet`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.07%)</title><rect x="0.3051%" y="549" width="0.0654%" height="15" fill="rgb(253,11,6)" fg:x="14" fg:w="3"/><text x="0.5551%" y="559.50"></text></g><g><title>rusk-wallet`dusk_wallet_core::derive_ssk (1 samples, 0.02%)</title><rect x="0.3487%" y="533" width="0.0218%" height="15" fill="rgb(247,143,39)" fg:x="16" fg:w="1"/><text x="0.5987%" y="543.50"></text></g><g><title>rusk-wallet`dusk_wallet::wallet::Wallet&lt;F&gt;::from_file (4 samples, 0.09%)</title><rect x="0.3051%" y="581" width="0.0872%" height="15" fill="rgb(236,97,10)" fg:x="14" fg:w="4"/><text x="0.5551%" y="591.50"></text></g><g><title>rusk-wallet`std::fs::read::inner (1 samples, 0.02%)</title><rect x="0.3705%" y="565" width="0.0218%" height="15" fill="rgb(233,208,19)" fg:x="17" fg:w="1"/><text x="0.6205%" y="575.50"></text></g><g><title>rusk-wallet`std::fs::OpenOptions::_open (1 samples, 0.02%)</title><rect x="0.3705%" y="549" width="0.0218%" height="15" fill="rgb(216,164,2)" fg:x="17" fg:w="1"/><text x="0.6205%" y="559.50"></text></g><g><title>rusk-wallet`std::sys::unix::fs::File::open_c (1 samples, 0.02%)</title><rect x="0.3705%" y="533" width="0.0218%" height="15" fill="rgb(220,129,5)" fg:x="17" fg:w="1"/><text x="0.6205%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__open (1 samples, 0.02%)</title><rect x="0.3705%" y="517" width="0.0218%" height="15" fill="rgb(242,17,10)" fg:x="17" fg:w="1"/><text x="0.6205%" y="527.50"></text></g><g><title>rusk-wallet`rusk_wallet::interactive::load_wallet (5 samples, 0.11%)</title><rect x="0.3051%" y="597" width="0.1090%" height="15" fill="rgb(242,107,0)" fg:x="14" fg:w="5"/><text x="0.5551%" y="607.50"></text></g><g><title>rusk-wallet`requestty::prompt_one (1 samples, 0.02%)</title><rect x="0.3923%" y="581" width="0.0218%" height="15" fill="rgb(251,28,31)" fg:x="18" fg:w="1"/><text x="0.6423%" y="591.50"></text></g><g><title>rusk-wallet`requestty::question::Question::ask (1 samples, 0.02%)</title><rect x="0.3923%" y="565" width="0.0218%" height="15" fill="rgb(233,223,10)" fg:x="18" fg:w="1"/><text x="0.6423%" y="575.50"></text></g><g><title>rusk-wallet`requestty::question::select::Select::ask (1 samples, 0.02%)</title><rect x="0.3923%" y="549" width="0.0218%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="1"/><text x="0.6423%" y="559.50"></text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::run (1 samples, 0.02%)</title><rect x="0.3923%" y="533" width="0.0218%" height="15" fill="rgb(232,23,21)" fg:x="18" fg:w="1"/><text x="0.6423%" y="543.50"></text></g><g><title>rusk-wallet`&lt;requestty::question::select::SelectPrompt as requestty_ui::input::Prompt&gt;::finish (1 samples, 0.02%)</title><rect x="0.3923%" y="517" width="0.0218%" height="15" fill="rgb(244,5,23)" fg:x="18" fg:w="1"/><text x="0.6423%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="0.3923%" y="501" width="0.0218%" height="15" fill="rgb(226,81,46)" fg:x="18" fg:w="1"/><text x="0.6423%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="0.4141%" y="533" width="0.0218%" height="15" fill="rgb(247,70,30)" fg:x="19" fg:w="1"/><text x="0.6641%" y="543.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (2 samples, 0.04%)</title><rect x="0.4359%" y="501" width="0.0436%" height="15" fill="rgb(212,68,19)" fg:x="20" fg:w="2"/><text x="0.6859%" y="511.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (2 samples, 0.04%)</title><rect x="0.4359%" y="485" width="0.0436%" height="15" fill="rgb(240,187,13)" fg:x="20" fg:w="2"/><text x="0.6859%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (2 samples, 0.04%)</title><rect x="0.4359%" y="469" width="0.0436%" height="15" fill="rgb(223,113,26)" fg:x="20" fg:w="2"/><text x="0.6859%" y="479.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::to_hash_inputs (1 samples, 0.02%)</title><rect x="0.4795%" y="501" width="0.0218%" height="15" fill="rgb(206,192,2)" fg:x="22" fg:w="1"/><text x="0.7295%" y="511.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="0.4795%" y="485" width="0.0218%" height="15" fill="rgb(241,108,4)" fg:x="22" fg:w="1"/><text x="0.7295%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (3 samples, 0.07%)</title><rect x="0.5013%" y="453" width="0.0654%" height="15" fill="rgb(247,173,49)" fg:x="23" fg:w="3"/><text x="0.7513%" y="463.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (4 samples, 0.09%)</title><rect x="0.5013%" y="485" width="0.0872%" height="15" fill="rgb(224,114,35)" fg:x="23" fg:w="4"/><text x="0.7513%" y="495.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (4 samples, 0.09%)</title><rect x="0.5013%" y="469" width="0.0872%" height="15" fill="rgb(245,159,27)" fg:x="23" fg:w="4"/><text x="0.7513%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="0.5667%" y="453" width="0.0218%" height="15" fill="rgb(245,172,44)" fg:x="26" fg:w="1"/><text x="0.8167%" y="463.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::to_hash_inputs (1 samples, 0.02%)</title><rect x="0.5885%" y="485" width="0.0218%" height="15" fill="rgb(236,23,11)" fg:x="27" fg:w="1"/><text x="0.8385%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="0.5885%" y="469" width="0.0218%" height="15" fill="rgb(205,117,38)" fg:x="27" fg:w="1"/><text x="0.8385%" y="479.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::sk_r (6 samples, 0.13%)</title><rect x="0.5013%" y="501" width="0.1308%" height="15" fill="rgb(237,72,25)" fg:x="23" fg:w="6"/><text x="0.7513%" y="511.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (1 samples, 0.02%)</title><rect x="0.6103%" y="485" width="0.0218%" height="15" fill="rgb(244,70,9)" fg:x="28" fg:w="1"/><text x="0.8603%" y="495.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (1 samples, 0.02%)</title><rect x="0.6103%" y="469" width="0.0218%" height="15" fill="rgb(217,125,39)" fg:x="28" fg:w="1"/><text x="0.8603%" y="479.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (1 samples, 0.02%)</title><rect x="0.6103%" y="453" width="0.0218%" height="15" fill="rgb(235,36,10)" fg:x="28" fg:w="1"/><text x="0.8603%" y="463.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (1 samples, 0.02%)</title><rect x="0.6103%" y="437" width="0.0218%" height="15" fill="rgb(251,123,47)" fg:x="28" fg:w="1"/><text x="0.8603%" y="447.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (1 samples, 0.02%)</title><rect x="0.6321%" y="469" width="0.0218%" height="15" fill="rgb(221,13,13)" fg:x="29" fg:w="1"/><text x="0.8821%" y="479.50"></text></g><g><title>rusk-wallet`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.24%)</title><rect x="0.4359%" y="533" width="0.2398%" height="15" fill="rgb(238,131,9)" fg:x="20" fg:w="11"/><text x="0.6859%" y="543.50"></text></g><g><title>rusk-wallet`phoenix_core::note::Note::gen_nullifier (11 samples, 0.24%)</title><rect x="0.4359%" y="517" width="0.2398%" height="15" fill="rgb(211,50,8)" fg:x="20" fg:w="11"/><text x="0.6859%" y="527.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (2 samples, 0.04%)</title><rect x="0.6321%" y="501" width="0.0436%" height="15" fill="rgb(245,182,24)" fg:x="29" fg:w="2"/><text x="0.8821%" y="511.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (2 samples, 0.04%)</title><rect x="0.6321%" y="485" width="0.0436%" height="15" fill="rgb(242,14,37)" fg:x="29" fg:w="2"/><text x="0.8821%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="0.6539%" y="469" width="0.0218%" height="15" fill="rgb(246,228,12)" fg:x="30" fg:w="1"/><text x="0.9039%" y="479.50"></text></g><g><title>rusk-wallet`&lt;dusk_jubjub::JubJubAffine as dusk_bytes::serialize::Serializable&lt;32_usize&gt;&gt;::from_bytes (2 samples, 0.04%)</title><rect x="0.6757%" y="501" width="0.0436%" height="15" fill="rgb(213,55,15)" fg:x="31" fg:w="2"/><text x="0.9257%" y="511.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (2 samples, 0.04%)</title><rect x="0.6757%" y="485" width="0.0436%" height="15" fill="rgb(209,9,3)" fg:x="31" fg:w="2"/><text x="0.9257%" y="495.50"></text></g><g><title>rusk-wallet`&lt;phoenix_core::note::Note as dusk_bytes::serialize::Serializable&lt;_&gt;&gt;::from_bytes (4 samples, 0.09%)</title><rect x="0.6757%" y="517" width="0.0872%" height="15" fill="rgb(230,59,30)" fg:x="31" fg:w="4"/><text x="0.9257%" y="527.50"></text></g><g><title>rusk-wallet`&lt;dusk_pki::keys::spend::stealth::StealthAddress as dusk_bytes::serialize::Serializable&lt;64_usize&gt;&gt;::from_bytes (2 samples, 0.04%)</title><rect x="0.7193%" y="501" width="0.0436%" height="15" fill="rgb(209,121,21)" fg:x="33" fg:w="2"/><text x="0.9693%" y="511.50"></text></g><g><title>rusk-wallet`&lt;dusk_jubjub::JubJubAffine as dusk_bytes::serialize::Serializable&lt;32_usize&gt;&gt;::from_bytes (2 samples, 0.04%)</title><rect x="0.7193%" y="485" width="0.0436%" height="15" fill="rgb(220,109,13)" fg:x="33" fg:w="2"/><text x="0.9693%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (2 samples, 0.04%)</title><rect x="0.7193%" y="469" width="0.0436%" height="15" fill="rgb(232,18,1)" fg:x="33" fg:w="2"/><text x="0.9693%" y="479.50"></text></g><g><title>rusk-wallet`&lt;phoenix_core::note::Note as dusk_pki::keys::spend::stealth::Ownable&gt;::stealth_address (1 samples, 0.02%)</title><rect x="0.7629%" y="517" width="0.0218%" height="15" fill="rgb(215,41,42)" fg:x="35" fg:w="1"/><text x="1.0129%" y="527.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Add&lt;&amp;dusk_jubjub::ExtendedNielsPoint&gt;&gt;::add (4 samples, 0.09%)</title><rect x="0.7847%" y="469" width="0.0872%" height="15" fill="rgb(224,123,36)" fg:x="36" fg:w="4"/><text x="1.0347%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (36 samples, 0.78%)</title><rect x="0.8718%" y="469" width="0.7847%" height="15" fill="rgb(240,125,3)" fg:x="40" fg:w="36"/><text x="1.1218%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (5 samples, 0.11%)</title><rect x="1.6565%" y="469" width="0.1090%" height="15" fill="rgb(205,98,50)" fg:x="76" fg:w="5"/><text x="1.9065%" y="479.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::view_key (48 samples, 1.05%)</title><rect x="0.7847%" y="517" width="1.0462%" height="15" fill="rgb(205,185,37)" fg:x="36" fg:w="48"/><text x="1.0347%" y="527.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (48 samples, 1.05%)</title><rect x="0.7847%" y="501" width="1.0462%" height="15" fill="rgb(238,207,15)" fg:x="36" fg:w="48"/><text x="1.0347%" y="511.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (48 samples, 1.05%)</title><rect x="0.7847%" y="485" width="1.0462%" height="15" fill="rgb(213,199,42)" fg:x="36" fg:w="48"/><text x="1.0347%" y="495.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::double (3 samples, 0.07%)</title><rect x="1.7655%" y="469" width="0.0654%" height="15" fill="rgb(235,201,11)" fg:x="81" fg:w="3"/><text x="2.0155%" y="479.50"></text></g><g><title>rusk-wallet`&lt;dusk_bls12_381::scalar::Scalar as subtle::ConditionallySelectable&gt;::conditional_select (1 samples, 0.02%)</title><rect x="1.8309%" y="485" width="0.0218%" height="15" fill="rgb(207,46,11)" fg:x="84" fg:w="1"/><text x="2.0809%" y="495.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Add&lt;&amp;dusk_jubjub::ExtendedNielsPoint&gt;&gt;::add (13 samples, 0.28%)</title><rect x="1.8745%" y="469" width="0.2833%" height="15" fill="rgb(241,35,35)" fg:x="86" fg:w="13"/><text x="2.1245%" y="479.50"></text></g><g><title>rusk-wallet`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="2.1578%" y="469" width="0.0218%" height="15" fill="rgb(243,32,47)" fg:x="99" fg:w="1"/><text x="2.4078%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (58 samples, 1.26%)</title><rect x="2.1796%" y="469" width="1.2642%" height="15" fill="rgb(247,202,23)" fg:x="100" fg:w="58"/><text x="2.4296%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (20 samples, 0.44%)</title><rect x="3.4438%" y="469" width="0.4359%" height="15" fill="rgb(219,102,11)" fg:x="158" fg:w="20"/><text x="3.6938%" y="479.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (101 samples, 2.20%)</title><rect x="1.8527%" y="485" width="2.2014%" height="15" fill="rgb(243,110,44)" fg:x="85" fg:w="101"/><text x="2.1027%" y="495.50">r..</text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::double (8 samples, 0.17%)</title><rect x="3.8797%" y="469" width="0.1744%" height="15" fill="rgb(222,74,54)" fg:x="178" fg:w="8"/><text x="4.1297%" y="479.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (103 samples, 2.24%)</title><rect x="1.8309%" y="501" width="2.2450%" height="15" fill="rgb(216,99,12)" fg:x="84" fg:w="103"/><text x="2.0809%" y="511.50">r..</text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::double (1 samples, 0.02%)</title><rect x="4.0541%" y="485" width="0.0218%" height="15" fill="rgb(226,22,26)" fg:x="186" fg:w="1"/><text x="4.3041%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.02%)</title><rect x="4.0759%" y="501" width="0.0218%" height="15" fill="rgb(217,163,10)" fg:x="187" fg:w="1"/><text x="4.3259%" y="511.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.02%)</title><rect x="4.0976%" y="469" width="0.0218%" height="15" fill="rgb(213,25,53)" fg:x="188" fg:w="1"/><text x="4.3476%" y="479.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::to_hash_inputs (4 samples, 0.09%)</title><rect x="4.0976%" y="485" width="0.0872%" height="15" fill="rgb(252,105,26)" fg:x="188" fg:w="4"/><text x="4.3476%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (3 samples, 0.07%)</title><rect x="4.1194%" y="469" width="0.0654%" height="15" fill="rgb(220,39,43)" fg:x="189" fg:w="3"/><text x="4.3694%" y="479.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::add_round_key (2 samples, 0.04%)</title><rect x="4.1848%" y="437" width="0.0436%" height="15" fill="rgb(229,68,48)" fg:x="192" fg:w="2"/><text x="4.4348%" y="447.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (19 samples, 0.41%)</title><rect x="4.2284%" y="437" width="0.4141%" height="15" fill="rgb(252,8,32)" fg:x="194" fg:w="19"/><text x="4.4784%" y="447.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::quintic_s_box (1 samples, 0.02%)</title><rect x="4.6425%" y="437" width="0.0218%" height="15" fill="rgb(223,20,43)" fg:x="213" fg:w="1"/><text x="4.8925%" y="447.50"></text></g><g><title>rusk-wallet`dusk_pki::view::ViewKey::owns (135 samples, 2.94%)</title><rect x="1.8309%" y="517" width="2.9425%" height="15" fill="rgb(229,81,49)" fg:x="84" fg:w="135"/><text x="2.0809%" y="527.50">ru..</text></g><g><title>rusk-wallet`dusk_pki::permutation::hash (31 samples, 0.68%)</title><rect x="4.0976%" y="501" width="0.6757%" height="15" fill="rgb(236,28,36)" fg:x="188" fg:w="31"/><text x="4.3476%" y="511.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (27 samples, 0.59%)</title><rect x="4.1848%" y="485" width="0.5885%" height="15" fill="rgb(249,185,26)" fg:x="192" fg:w="27"/><text x="4.4348%" y="495.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (27 samples, 0.59%)</title><rect x="4.1848%" y="469" width="0.5885%" height="15" fill="rgb(249,174,33)" fg:x="192" fg:w="27"/><text x="4.4348%" y="479.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (27 samples, 0.59%)</title><rect x="4.1848%" y="453" width="0.5885%" height="15" fill="rgb(233,201,37)" fg:x="192" fg:w="27"/><text x="4.4348%" y="463.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (5 samples, 0.11%)</title><rect x="4.6643%" y="437" width="0.1090%" height="15" fill="rgb(221,78,26)" fg:x="214" fg:w="5"/><text x="4.9143%" y="447.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Add&lt;&amp;dusk_jubjub::ExtendedNielsPoint&gt;&gt;::add (3 samples, 0.07%)</title><rect x="4.7951%" y="469" width="0.0654%" height="15" fill="rgb(250,127,30)" fg:x="220" fg:w="3"/><text x="5.0451%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (35 samples, 0.76%)</title><rect x="4.8605%" y="469" width="0.7629%" height="15" fill="rgb(230,49,44)" fg:x="223" fg:w="35"/><text x="5.1105%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (9 samples, 0.20%)</title><rect x="5.6234%" y="469" width="0.1962%" height="15" fill="rgb(229,67,23)" fg:x="258" fg:w="9"/><text x="5.8734%" y="479.50"></text></g><g><title>rusk-wallet`dusk_pki::view::ViewKey::public_spend_key (49 samples, 1.07%)</title><rect x="4.7733%" y="517" width="1.0680%" height="15" fill="rgb(249,83,47)" fg:x="219" fg:w="49"/><text x="5.0233%" y="527.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (49 samples, 1.07%)</title><rect x="4.7733%" y="501" width="1.0680%" height="15" fill="rgb(215,43,3)" fg:x="219" fg:w="49"/><text x="5.0233%" y="511.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (49 samples, 1.07%)</title><rect x="4.7733%" y="485" width="1.0680%" height="15" fill="rgb(238,154,13)" fg:x="219" fg:w="49"/><text x="5.0233%" y="495.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::double (1 samples, 0.02%)</title><rect x="5.8195%" y="469" width="0.0218%" height="15" fill="rgb(219,56,2)" fg:x="267" fg:w="1"/><text x="6.0695%" y="479.50"></text></g><g><title>rusk-wallet`&lt;rocksdb::db_options::Options as core::default::Default&gt;::default (1 samples, 0.02%)</title><rect x="5.8413%" y="501" width="0.0218%" height="15" fill="rgb(233,0,4)" fg:x="268" fg:w="1"/><text x="6.0913%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb_options_create (1 samples, 0.02%)</title><rect x="5.8413%" y="485" width="0.0218%" height="15" fill="rgb(235,30,7)" fg:x="268" fg:w="1"/><text x="6.0913%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="5.8413%" y="469" width="0.0218%" height="15" fill="rgb(250,79,13)" fg:x="268" fg:w="1"/><text x="6.0913%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="5.8413%" y="453" width="0.0218%" height="15" fill="rgb(211,146,34)" fg:x="268" fg:w="1"/><text x="6.0913%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (1 samples, 0.02%)</title><rect x="5.8413%" y="437" width="0.0218%" height="15" fill="rgb(228,22,38)" fg:x="268" fg:w="1"/><text x="6.0913%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.02%)</title><rect x="5.8413%" y="421" width="0.0218%" height="15" fill="rgb(235,168,5)" fg:x="268" fg:w="1"/><text x="6.0913%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="5.8413%" y="405" width="0.0218%" height="15" fill="rgb(221,155,16)" fg:x="268" fg:w="1"/><text x="6.0913%" y="415.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="5.8413%" y="389" width="0.0218%" height="15" fill="rgb(215,215,53)" fg:x="268" fg:w="1"/><text x="6.0913%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="5.8413%" y="373" width="0.0218%" height="15" fill="rgb(223,4,10)" fg:x="268" fg:w="1"/><text x="6.0913%" y="383.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="5.8413%" y="357" width="0.0218%" height="15" fill="rgb(234,103,6)" fg:x="268" fg:w="1"/><text x="6.0913%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.02%)</title><rect x="5.8413%" y="341" width="0.0218%" height="15" fill="rgb(227,97,0)" fg:x="268" fg:w="1"/><text x="6.0913%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (1 samples, 0.02%)</title><rect x="5.8413%" y="325" width="0.0218%" height="15" fill="rgb(234,150,53)" fg:x="268" fg:w="1"/><text x="6.0913%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="5.8413%" y="309" width="0.0218%" height="15" fill="rgb(228,201,54)" fg:x="268" fg:w="1"/><text x="6.0913%" y="319.50"></text></g><g><title>rusk-wallet`&lt;dusk_jubjub::JubJubAffine as core::convert::From&lt;dusk_jubjub::JubJubExtended&gt;&gt;::from (10 samples, 0.22%)</title><rect x="5.8631%" y="453" width="0.2180%" height="15" fill="rgb(222,22,37)" fg:x="269" fg:w="10"/><text x="6.1131%" y="463.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (10 samples, 0.22%)</title><rect x="5.8631%" y="437" width="0.2180%" height="15" fill="rgb(237,53,32)" fg:x="269" fg:w="10"/><text x="6.1131%" y="447.50"></text></g><g><title>rusk-wallet`alloc::fmt::format::format_inner (11 samples, 0.24%)</title><rect x="5.8631%" y="501" width="0.2398%" height="15" fill="rgb(233,25,53)" fg:x="269" fg:w="11"/><text x="6.1131%" y="511.50"></text></g><g><title>rusk-wallet`core::fmt::write (11 samples, 0.24%)</title><rect x="5.8631%" y="485" width="0.2398%" height="15" fill="rgb(210,40,34)" fg:x="269" fg:w="11"/><text x="6.1131%" y="495.50"></text></g><g><title>rusk-wallet`&lt;dusk_pki::keys::spend::public::PublicSpendKey as core::fmt::LowerHex&gt;::fmt (11 samples, 0.24%)</title><rect x="5.8631%" y="469" width="0.2398%" height="15" fill="rgb(241,220,44)" fg:x="269" fg:w="11"/><text x="6.1131%" y="479.50"></text></g><g><title>rusk-wallet`core::fmt::Formatter::write_fmt (1 samples, 0.02%)</title><rect x="6.0811%" y="453" width="0.0218%" height="15" fill="rgb(235,28,35)" fg:x="279" fg:w="1"/><text x="6.3311%" y="463.50"></text></g><g><title>rusk-wallet`core::fmt::write (1 samples, 0.02%)</title><rect x="6.0811%" y="437" width="0.0218%" height="15" fill="rgb(210,56,17)" fg:x="279" fg:w="1"/><text x="6.3311%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyData::AddDirectories(std::__1::map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::shared_ptr&lt;rocksdb::FSDirectory&gt;, std::__1::less&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="6.1029%" y="437" width="0.0218%" height="15" fill="rgb(224,130,29)" fg:x="280" fg:w="1"/><text x="6.3529%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::CreateAndNewDirectory(rocksdb::FileSystem*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::FSDirectory, std::__1::default_delete (1 samples, 0.02%)</title><rect x="6.1029%" y="421" width="0.0218%" height="15" fill="rgb(235,212,8)" fg:x="280" fg:w="1"/><text x="6.3529%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::CreateDirIfMissing(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="6.1029%" y="405" width="0.0218%" height="15" fill="rgb(223,33,50)" fg:x="280" fg:w="1"/><text x="6.3529%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`stat (1 samples, 0.02%)</title><rect x="6.1029%" y="389" width="0.0218%" height="15" fill="rgb(219,149,13)" fg:x="280" fg:w="1"/><text x="6.3529%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::InstallSuperVersionAndScheduleWork (3 samples, 0.07%)</title><rect x="6.1247%" y="437" width="0.0654%" height="15" fill="rgb(250,156,29)" fg:x="281" fg:w="3"/><text x="6.3747%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::Log(rocksdb::InfoLogLevel, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="6.1901%" y="437" width="0.0218%" height="15" fill="rgb(216,193,19)" fg:x="284" fg:w="1"/><text x="6.4401%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::EnvLogger::Logv (1 samples, 0.02%)</title><rect x="6.1901%" y="421" width="0.0218%" height="15" fill="rgb(216,135,14)" fg:x="284" fg:w="1"/><text x="6.4401%" y="431.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.02%)</title><rect x="6.1901%" y="405" width="0.0218%" height="15" fill="rgb(241,47,5)" fg:x="284" fg:w="1"/><text x="6.4401%" y="415.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.02%)</title><rect x="6.1901%" y="389" width="0.0218%" height="15" fill="rgb(233,42,35)" fg:x="284" fg:w="1"/><text x="6.4401%" y="399.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.02%)</title><rect x="6.1901%" y="373" width="0.0218%" height="15" fill="rgb(231,13,6)" fg:x="284" fg:w="1"/><text x="6.4401%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::SyncManifest (1 samples, 0.02%)</title><rect x="6.2119%" y="389" width="0.0218%" height="15" fill="rgb(207,181,40)" fg:x="285" fg:w="1"/><text x="6.4619%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Sync (1 samples, 0.02%)</title><rect x="6.2119%" y="373" width="0.0218%" height="15" fill="rgb(254,173,49)" fg:x="285" fg:w="1"/><text x="6.4619%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::SyncInternal (1 samples, 0.02%)</title><rect x="6.2119%" y="357" width="0.0218%" height="15" fill="rgb(221,1,38)" fg:x="285" fg:w="1"/><text x="6.4619%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`fsync (1 samples, 0.02%)</title><rect x="6.2119%" y="341" width="0.0218%" height="15" fill="rgb(206,124,46)" fg:x="285" fg:w="1"/><text x="6.4619%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyData::CreateNewMemtable (2 samples, 0.04%)</title><rect x="6.2337%" y="373" width="0.0436%" height="15" fill="rgb(249,21,11)" fg:x="286" fg:w="2"/><text x="6.4837%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::MemTable::MemTable (2 samples, 0.04%)</title><rect x="6.2337%" y="357" width="0.0436%" height="15" fill="rgb(222,201,40)" fg:x="286" fg:w="2"/><text x="6.4837%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::SkipListFactory::CreateMemTableRep (2 samples, 0.04%)</title><rect x="6.2337%" y="341" width="0.0436%" height="15" fill="rgb(235,61,29)" fg:x="286" fg:w="2"/><text x="6.4837%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConcurrentArena::AllocateAligned (1 samples, 0.02%)</title><rect x="6.2554%" y="325" width="0.0218%" height="15" fill="rgb(219,207,3)" fg:x="287" fg:w="1"/><text x="6.5054%" y="335.50"></text></g><g><title>rusk-wallet`char* rocksdb::ConcurrentArena::AllocateImpl&lt;rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*)::&apos;lambda&apos;()&gt;(unsigned long, bool, rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*)::&apos;lambda&apos; (1 samples, 0.02%)</title><rect x="6.2554%" y="309" width="0.0218%" height="15" fill="rgb(222,56,46)" fg:x="287" fg:w="1"/><text x="6.5054%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::CreateColumnFamily (3 samples, 0.07%)</title><rect x="6.2337%" y="389" width="0.0654%" height="15" fill="rgb(239,76,54)" fg:x="286" fg:w="3"/><text x="6.4837%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilySet::CreateColumnFamily(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="6.2772%" y="373" width="0.0218%" height="15" fill="rgb(231,124,27)" fg:x="288" fg:w="1"/><text x="6.5272%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyData::ColumnFamilyData(unsigned int, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::Version*, rocksdb::Cache*, rocksdb::WriteBufferManager*, rocksdb::ColumnFamilyOptions const&amp;, rocksdb::ImmutableDBOptions const&amp;, rocksdb::FileOptions const*, rocksdb::ColumnFamilySet*, rocksdb::BlockCacheTracer*, std::__1::shared_ptr&lt;rocksdb::IOTracer&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="6.2772%" y="357" width="0.0218%" height="15" fill="rgb(249,195,6)" fg:x="288" fg:w="1"/><text x="6.5272%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::InternalStats::InternalStats (1 samples, 0.02%)</title><rect x="6.2772%" y="341" width="0.0218%" height="15" fill="rgb(237,174,47)" fg:x="288" fg:w="1"/><text x="6.5272%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::CacheEntryStatsCollector&lt;rocksdb::InternalStats::CacheEntryRoleStats&gt;::GetShared(rocksdb::Cache*, rocksdb::SystemClock*, std::__1::shared_ptr&lt;rocksdb::CacheEntryStatsCollector (1 samples, 0.02%)</title><rect x="6.2772%" y="325" width="0.0218%" height="15" fill="rgb(206,201,31)" fg:x="288" fg:w="1"/><text x="6.5272%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::InsertItem (1 samples, 0.02%)</title><rect x="6.2772%" y="309" width="0.0218%" height="15" fill="rgb(231,57,52)" fg:x="288" fg:w="1"/><text x="6.5272%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::TryInsertIntoSecondaryCache(rocksdb::autovector (1 samples, 0.02%)</title><rect x="6.2772%" y="293" width="0.0218%" height="15" fill="rgb(248,177,22)" fg:x="288" fg:w="1"/><text x="6.5272%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Flush (1 samples, 0.02%)</title><rect x="6.2990%" y="373" width="0.0218%" height="15" fill="rgb(215,211,37)" fg:x="289" fg:w="1"/><text x="6.5490%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::WriteBuffered (1 samples, 0.02%)</title><rect x="6.2990%" y="357" width="0.0218%" height="15" fill="rgb(241,128,51)" fg:x="289" fg:w="1"/><text x="6.5490%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="6.2990%" y="341" width="0.0218%" height="15" fill="rgb(227,165,31)" fg:x="289" fg:w="1"/><text x="6.5490%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::CreateColumnFamilyImpl(rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="6.1029%" y="453" width="0.2398%" height="15" fill="rgb(228,167,24)" fg:x="280" fg:w="11"/><text x="6.3529%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::LogAndApply (6 samples, 0.13%)</title><rect x="6.2119%" y="437" width="0.1308%" height="15" fill="rgb(228,143,12)" fg:x="285" fg:w="6"/><text x="6.4619%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::LogAndApply(rocksdb::autovector&lt;rocksdb::ColumnFamilyData*, 8ul&gt; const&amp;, rocksdb::autovector&lt;rocksdb::MutableCFOptions const*, 8ul&gt; const&amp;, rocksdb::autovector&lt;rocksdb::autovector&lt;rocksdb::VersionEdit*, 8ul&gt;, 8ul&gt; const&amp;, rocksdb::InstrumentedMutex*, rocksdb::FSDirectory*, bool, rocksdb::ColumnFamilyOptions const*, std::__1::vector&lt;std::__1::function&lt;void (rocksdb::Status const&amp;)&gt;, std::__1::allocator&lt;std::__1::function&lt;void  (6 samples, 0.13%)</title><rect x="6.2119%" y="421" width="0.1308%" height="15" fill="rgb(249,149,8)" fg:x="285" fg:w="6"/><text x="6.4619%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::VersionSet::ProcessManifestWrites(std::__1::deque&lt;rocksdb::VersionSet::ManifestWriter, std::__1::allocator (6 samples, 0.13%)</title><rect x="6.2119%" y="405" width="0.1308%" height="15" fill="rgb(243,35,44)" fg:x="285" fg:w="6"/><text x="6.4619%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::log::Writer::AddRecord (2 samples, 0.04%)</title><rect x="6.2990%" y="389" width="0.0436%" height="15" fill="rgb(246,89,9)" fg:x="289" fg:w="2"/><text x="6.5490%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::log::Writer::EmitPhysicalRecord (1 samples, 0.02%)</title><rect x="6.3208%" y="373" width="0.0218%" height="15" fill="rgb(233,213,13)" fg:x="290" fg:w="1"/><text x="6.5708%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::FSWritableFile::PrepareWrite (1 samples, 0.02%)</title><rect x="6.3208%" y="357" width="0.0218%" height="15" fill="rgb(233,141,41)" fg:x="290" fg:w="1"/><text x="6.5708%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.04%)</title><rect x="6.3644%" y="437" width="0.0436%" height="15" fill="rgb(239,167,4)" fg:x="292" fg:w="2"/><text x="6.6144%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="6.3644%" y="421" width="0.0436%" height="15" fill="rgb(209,217,16)" fg:x="292" fg:w="2"/><text x="6.6144%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::AdvancedColumnFamilyOptions (1 samples, 0.02%)</title><rect x="6.4080%" y="421" width="0.0218%" height="15" fill="rgb(219,88,35)" fg:x="294" fg:w="1"/><text x="6.6580%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::AdvancedColumnFamilyOptions (1 samples, 0.02%)</title><rect x="6.4516%" y="405" width="0.0218%" height="15" fill="rgb(220,193,23)" fg:x="296" fg:w="1"/><text x="6.7016%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (3 samples, 0.07%)</title><rect x="6.4298%" y="421" width="0.0654%" height="15" fill="rgb(230,90,52)" fg:x="295" fg:w="3"/><text x="6.6798%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::DbPath* std::__1::__uninitialized_allocator_copy[abi:v15006]&lt;std::__1::allocator&lt;rocksdb::DbPath&gt;, rocksdb::DbPath*, rocksdb::DbPath*, rocksdb::DbPath*&gt;(std::__1::allocator (1 samples, 0.02%)</title><rect x="6.4734%" y="405" width="0.0218%" height="15" fill="rgb(252,106,19)" fg:x="297" fg:w="1"/><text x="6.7234%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="6.4734%" y="389" width="0.0218%" height="15" fill="rgb(206,74,20)" fg:x="297" fg:w="1"/><text x="6.7234%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="6.4734%" y="373" width="0.0218%" height="15" fill="rgb(230,138,44)" fg:x="297" fg:w="1"/><text x="6.7234%" y="383.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="6.4734%" y="357" width="0.0218%" height="15" fill="rgb(235,182,43)" fg:x="297" fg:w="1"/><text x="6.7234%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BuildColumnFamilyOptions (5 samples, 0.11%)</title><rect x="6.4080%" y="437" width="0.1090%" height="15" fill="rgb(242,16,51)" fg:x="294" fg:w="5"/><text x="6.6580%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::UpdateColumnFamilyOptions (1 samples, 0.02%)</title><rect x="6.4952%" y="421" width="0.0218%" height="15" fill="rgb(248,9,4)" fg:x="298" fg:w="1"/><text x="6.7452%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::NewDirectory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::IOOptions const&amp;, std::__1::unique_ptr&lt;rocksdb::FSDirectory, std::__1::default_delete (2 samples, 0.04%)</title><rect x="6.5170%" y="421" width="0.0436%" height="15" fill="rgb(210,31,22)" fg:x="299" fg:w="2"/><text x="6.7670%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.04%)</title><rect x="6.5170%" y="405" width="0.0436%" height="15" fill="rgb(239,54,39)" fg:x="299" fg:w="2"/><text x="6.7670%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::CompositeEnv::GetFileSize(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="6.5606%" y="421" width="0.0436%" height="15" fill="rgb(230,99,41)" fg:x="301" fg:w="2"/><text x="6.8106%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`stat (2 samples, 0.04%)</title><rect x="6.5606%" y="405" width="0.0436%" height="15" fill="rgb(253,106,12)" fg:x="301" fg:w="2"/><text x="6.8106%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::CompositeEnv::RenameFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.26%)</title><rect x="6.6042%" y="421" width="0.2616%" height="15" fill="rgb(213,46,41)" fg:x="303" fg:w="12"/><text x="6.8542%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::RenameFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.26%)</title><rect x="6.6042%" y="405" width="0.2616%" height="15" fill="rgb(215,133,35)" fg:x="303" fg:w="12"/><text x="6.8542%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__rename (12 samples, 0.26%)</title><rect x="6.6042%" y="389" width="0.2616%" height="15" fill="rgb(213,28,5)" fg:x="303" fg:w="12"/><text x="6.8542%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::GetChildren(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::IOOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="6.8657%" y="405" width="0.0218%" height="15" fill="rgb(215,77,49)" fg:x="315" fg:w="1"/><text x="7.1157%" y="415.50"></text></g><g><title>libsystem_c.dylib`readdir (1 samples, 0.02%)</title><rect x="6.8657%" y="389" width="0.0218%" height="15" fill="rgb(248,100,22)" fg:x="315" fg:w="1"/><text x="7.1157%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__getdirentries64 (1 samples, 0.02%)</title><rect x="6.8657%" y="373" width="0.0218%" height="15" fill="rgb(208,67,9)" fg:x="315" fg:w="1"/><text x="7.1157%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::CompositeEnv::DeleteFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="6.8875%" y="405" width="0.1744%" height="15" fill="rgb(219,133,21)" fg:x="316" fg:w="8"/><text x="7.1375%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::DeleteFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="6.8875%" y="389" width="0.1744%" height="15" fill="rgb(246,46,29)" fg:x="316" fg:w="8"/><text x="7.1375%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (8 samples, 0.17%)</title><rect x="6.8875%" y="373" width="0.1744%" height="15" fill="rgb(246,185,52)" fg:x="316" fg:w="8"/><text x="7.1375%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::DeleteObsoleteOptionsFiles (10 samples, 0.22%)</title><rect x="6.8657%" y="421" width="0.2180%" height="15" fill="rgb(252,136,11)" fg:x="315" fg:w="10"/><text x="7.1157%" y="431.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;std::__1::__value_type&lt;rocksdb::PeriodicTaskType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__map_value_compare&lt;rocksdb::PeriodicTaskType, std::__1::__value_type&lt;rocksdb::PeriodicTaskType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::less&lt;rocksdb::PeriodicTaskType&gt;, true&gt;, std::__1::allocator&lt;std::__1::__value_type&lt;rocksdb::PeriodicTaskType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::destroy(std::__1::__tree_node&lt;std::__1::__value_type&lt;rocksdb::PeriodicTaskType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="7.0619%" y="405" width="0.0218%" height="15" fill="rgb(219,138,53)" fg:x="324" fg:w="1"/><text x="7.3119%" y="415.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="7.0619%" y="389" width="0.0218%" height="15" fill="rgb(211,51,23)" fg:x="324" fg:w="1"/><text x="7.3119%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::RenameTempFileToOptionsFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.59%)</title><rect x="6.5170%" y="437" width="0.5885%" height="15" fill="rgb(247,221,28)" fg:x="299" fg:w="27"/><text x="6.7670%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::OptionsFileName(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="7.0837%" y="421" width="0.0218%" height="15" fill="rgb(251,222,45)" fg:x="325" fg:w="1"/><text x="7.3337%" y="431.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.02%)</title><rect x="7.0837%" y="405" width="0.0218%" height="15" fill="rgb(217,162,53)" fg:x="325" fg:w="1"/><text x="7.3337%" y="415.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.02%)</title><rect x="7.0837%" y="389" width="0.0218%" height="15" fill="rgb(229,93,14)" fg:x="325" fg:w="1"/><text x="7.3337%" y="399.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.02%)</title><rect x="7.0837%" y="373" width="0.0218%" height="15" fill="rgb(209,67,49)" fg:x="325" fg:w="1"/><text x="7.3337%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="7.0837%" y="357" width="0.0218%" height="15" fill="rgb(213,87,29)" fg:x="325" fg:w="1"/><text x="7.3337%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="7.1055%" y="421" width="0.0218%" height="15" fill="rgb(205,151,52)" fg:x="326" fg:w="1"/><text x="7.3555%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="7.1273%" y="421" width="0.0436%" height="15" fill="rgb(253,215,39)" fg:x="327" fg:w="2"/><text x="7.3773%" y="431.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="7.2581%" y="373" width="0.0218%" height="15" fill="rgb(221,220,41)" fg:x="333" fg:w="1"/><text x="7.5081%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="7.2581%" y="357" width="0.0218%" height="15" fill="rgb(218,133,21)" fg:x="333" fg:w="1"/><text x="7.5081%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="7.2581%" y="341" width="0.0218%" height="15" fill="rgb(221,193,43)" fg:x="333" fg:w="1"/><text x="7.5081%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="7.2581%" y="325" width="0.0218%" height="15" fill="rgb(240,128,52)" fg:x="333" fg:w="1"/><text x="7.5081%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="7.2799%" y="373" width="0.0436%" height="15" fill="rgb(253,114,12)" fg:x="334" fg:w="2"/><text x="7.5299%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (7 samples, 0.15%)</title><rect x="7.1927%" y="389" width="0.1526%" height="15" fill="rgb(215,223,47)" fg:x="330" fg:w="7"/><text x="7.4427%" y="399.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="7.3235%" y="373" width="0.0218%" height="15" fill="rgb(248,225,23)" fg:x="336" fg:w="1"/><text x="7.5735%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (8 samples, 0.17%)</title><rect x="7.1927%" y="405" width="0.1744%" height="15" fill="rgb(250,108,0)" fg:x="330" fg:w="8"/><text x="7.4427%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="7.3452%" y="389" width="0.0218%" height="15" fill="rgb(228,208,7)" fg:x="337" fg:w="1"/><text x="7.5952%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (7 samples, 0.15%)</title><rect x="7.3670%" y="405" width="0.1526%" height="15" fill="rgb(244,45,10)" fg:x="338" fg:w="7"/><text x="7.6170%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.02%)</title><rect x="7.5196%" y="341" width="0.0218%" height="15" fill="rgb(207,125,25)" fg:x="345" fg:w="1"/><text x="7.7696%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="7.5196%" y="405" width="0.0436%" height="15" fill="rgb(210,195,18)" fg:x="345" fg:w="2"/><text x="7.7696%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="7.5196%" y="389" width="0.0436%" height="15" fill="rgb(249,80,12)" fg:x="345" fg:w="2"/><text x="7.7696%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.04%)</title><rect x="7.5196%" y="373" width="0.0436%" height="15" fill="rgb(221,65,9)" fg:x="345" fg:w="2"/><text x="7.7696%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.04%)</title><rect x="7.5196%" y="357" width="0.0436%" height="15" fill="rgb(235,49,36)" fg:x="345" fg:w="2"/><text x="7.7696%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="7.5414%" y="341" width="0.0218%" height="15" fill="rgb(225,32,20)" fg:x="346" fg:w="1"/><text x="7.7914%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.07%)</title><rect x="7.6068%" y="389" width="0.0654%" height="15" fill="rgb(215,141,46)" fg:x="349" fg:w="3"/><text x="7.8568%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.13%)</title><rect x="7.5632%" y="405" width="0.1308%" height="15" fill="rgb(250,160,47)" fg:x="347" fg:w="6"/><text x="7.8132%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="7.6722%" y="389" width="0.0218%" height="15" fill="rgb(216,222,40)" fg:x="352" fg:w="1"/><text x="7.9222%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="7.6940%" y="405" width="0.0218%" height="15" fill="rgb(234,217,39)" fg:x="353" fg:w="1"/><text x="7.9440%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (11 samples, 0.24%)</title><rect x="7.7158%" y="405" width="0.2398%" height="15" fill="rgb(207,178,40)" fg:x="354" fg:w="11"/><text x="7.9658%" y="415.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (3 samples, 0.07%)</title><rect x="7.9555%" y="405" width="0.0654%" height="15" fill="rgb(221,136,13)" fg:x="365" fg:w="3"/><text x="8.2055%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (1 samples, 0.02%)</title><rect x="8.0209%" y="389" width="0.0218%" height="15" fill="rgb(249,199,10)" fg:x="368" fg:w="1"/><text x="8.2709%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::OpenWritableFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FileOptions const&amp;, bool, std::__1::unique_ptr&lt;rocksdb::FSWritableFile, std::__1::default_delete (8 samples, 0.17%)</title><rect x="8.0209%" y="405" width="0.1744%" height="15" fill="rgb(249,222,13)" fg:x="368" fg:w="8"/><text x="8.2709%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__open (7 samples, 0.15%)</title><rect x="8.0427%" y="389" width="0.1526%" height="15" fill="rgb(244,185,38)" fg:x="369" fg:w="7"/><text x="8.2927%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (5 samples, 0.11%)</title><rect x="8.1953%" y="389" width="0.1090%" height="15" fill="rgb(236,202,9)" fg:x="376" fg:w="5"/><text x="8.4453%" y="399.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="8.3043%" y="389" width="0.0218%" height="15" fill="rgb(250,229,37)" fg:x="381" fg:w="1"/><text x="8.5543%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.09%)</title><rect x="8.3261%" y="389" width="0.0872%" height="15" fill="rgb(206,174,23)" fg:x="382" fg:w="4"/><text x="8.5761%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.11%)</title><rect x="8.4133%" y="389" width="0.1090%" height="15" fill="rgb(211,33,43)" fg:x="386" fg:w="5"/><text x="8.6633%" y="399.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="8.5222%" y="389" width="0.0218%" height="15" fill="rgb(245,58,50)" fg:x="391" fg:w="1"/><text x="8.7722%" y="399.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="8.5440%" y="389" width="0.0872%" height="15" fill="rgb(244,68,36)" fg:x="392" fg:w="4"/><text x="8.7940%" y="399.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="8.9582%" y="373" width="0.0218%" height="15" fill="rgb(232,229,15)" fg:x="411" fg:w="1"/><text x="9.2082%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="9.0235%" y="357" width="0.0218%" height="15" fill="rgb(254,30,23)" fg:x="414" fg:w="1"/><text x="9.2735%" y="367.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="9.0453%" y="357" width="0.0218%" height="15" fill="rgb(235,160,14)" fg:x="415" fg:w="1"/><text x="9.2953%" y="367.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="9.0671%" y="357" width="0.0218%" height="15" fill="rgb(212,155,44)" fg:x="416" fg:w="1"/><text x="9.3171%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (3 samples, 0.07%)</title><rect x="9.0889%" y="357" width="0.0654%" height="15" fill="rgb(226,2,50)" fg:x="417" fg:w="3"/><text x="9.3389%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="9.1107%" y="341" width="0.0436%" height="15" fill="rgb(234,177,6)" fg:x="418" fg:w="2"/><text x="9.3607%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="9.1543%" y="357" width="0.0218%" height="15" fill="rgb(217,24,9)" fg:x="420" fg:w="1"/><text x="9.4043%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="9.1761%" y="357" width="0.0436%" height="15" fill="rgb(220,13,46)" fg:x="421" fg:w="2"/><text x="9.4261%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (13 samples, 0.28%)</title><rect x="8.9799%" y="373" width="0.2833%" height="15" fill="rgb(239,221,27)" fg:x="412" fg:w="13"/><text x="9.2299%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="9.2197%" y="357" width="0.0436%" height="15" fill="rgb(222,198,25)" fg:x="423" fg:w="2"/><text x="9.4697%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="9.2633%" y="373" width="0.0218%" height="15" fill="rgb(211,99,13)" fg:x="425" fg:w="1"/><text x="9.5133%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="9.2851%" y="373" width="0.0218%" height="15" fill="rgb(232,111,31)" fg:x="426" fg:w="1"/><text x="9.5351%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.15%)</title><rect x="9.3069%" y="373" width="0.1526%" height="15" fill="rgb(245,82,37)" fg:x="427" fg:w="7"/><text x="9.5569%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="9.4595%" y="373" width="0.0218%" height="15" fill="rgb(227,149,46)" fg:x="434" fg:w="1"/><text x="9.7095%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.28%)</title><rect x="9.4813%" y="373" width="0.2833%" height="15" fill="rgb(218,36,50)" fg:x="435" fg:w="13"/><text x="9.7313%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (2 samples, 0.04%)</title><rect x="9.7646%" y="373" width="0.0436%" height="15" fill="rgb(226,80,48)" fg:x="448" fg:w="2"/><text x="10.0146%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (1 samples, 0.02%)</title><rect x="9.8300%" y="357" width="0.0218%" height="15" fill="rgb(238,224,15)" fg:x="451" fg:w="1"/><text x="10.0800%" y="367.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::to_string (1 samples, 0.02%)</title><rect x="9.8518%" y="357" width="0.0218%" height="15" fill="rgb(241,136,10)" fg:x="452" fg:w="1"/><text x="10.1018%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="9.8954%" y="341" width="0.0218%" height="15" fill="rgb(208,32,45)" fg:x="454" fg:w="1"/><text x="10.1454%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="9.9172%" y="341" width="0.0218%" height="15" fill="rgb(207,135,9)" fg:x="455" fg:w="1"/><text x="10.1672%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="9.8736%" y="357" width="0.1308%" height="15" fill="rgb(206,86,44)" fg:x="453" fg:w="6"/><text x="10.1236%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="9.9390%" y="341" width="0.0654%" height="15" fill="rgb(245,177,15)" fg:x="456" fg:w="3"/><text x="10.1890%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (3 samples, 0.07%)</title><rect x="9.9390%" y="325" width="0.0654%" height="15" fill="rgb(206,64,50)" fg:x="456" fg:w="3"/><text x="10.1890%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (3 samples, 0.07%)</title><rect x="9.9390%" y="309" width="0.0654%" height="15" fill="rgb(234,36,40)" fg:x="456" fg:w="3"/><text x="10.1890%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="9.9826%" y="293" width="0.0218%" height="15" fill="rgb(213,64,8)" fg:x="458" fg:w="1"/><text x="10.2326%" y="303.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="10.0262%" y="341" width="0.0218%" height="15" fill="rgb(210,75,36)" fg:x="460" fg:w="1"/><text x="10.2762%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::__itoa::__base_10_u32[abi:v15006] (1 samples, 0.02%)</title><rect x="10.0480%" y="341" width="0.0218%" height="15" fill="rgb(229,88,21)" fg:x="461" fg:w="1"/><text x="10.2980%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (2 samples, 0.04%)</title><rect x="10.0697%" y="341" width="0.0436%" height="15" fill="rgb(252,204,47)" fg:x="462" fg:w="2"/><text x="10.3197%" y="351.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.02%)</title><rect x="10.0915%" y="325" width="0.0218%" height="15" fill="rgb(208,77,27)" fg:x="463" fg:w="1"/><text x="10.3415%" y="335.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.02%)</title><rect x="10.0915%" y="309" width="0.0218%" height="15" fill="rgb(221,76,26)" fg:x="463" fg:w="1"/><text x="10.3415%" y="319.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.02%)</title><rect x="10.0915%" y="293" width="0.0218%" height="15" fill="rgb(225,139,18)" fg:x="463" fg:w="1"/><text x="10.3415%" y="303.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (1 samples, 0.02%)</title><rect x="10.0915%" y="277" width="0.0218%" height="15" fill="rgb(230,137,11)" fg:x="463" fg:w="1"/><text x="10.3415%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="10.1133%" y="341" width="0.0872%" height="15" fill="rgb(212,28,1)" fg:x="464" fg:w="4"/><text x="10.3633%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="10.0044%" y="357" width="0.2180%" height="15" fill="rgb(248,164,17)" fg:x="459" fg:w="10"/><text x="10.2544%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="10.2005%" y="341" width="0.0218%" height="15" fill="rgb(222,171,42)" fg:x="468" fg:w="1"/><text x="10.4505%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.44%)</title><rect x="9.8082%" y="373" width="0.4359%" height="15" fill="rgb(243,84,45)" fg:x="450" fg:w="20"/><text x="10.0582%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::CacheTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CacheTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::CacheTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="10.2223%" y="357" width="0.0218%" height="15" fill="rgb(252,49,23)" fg:x="469" fg:w="1"/><text x="10.4723%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (75 samples, 1.63%)</title><rect x="8.6312%" y="389" width="1.6347%" height="15" fill="rgb(215,19,7)" fg:x="396" fg:w="75"/><text x="8.8812%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::CacheTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CacheTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::CacheTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="10.2441%" y="373" width="0.0218%" height="15" fill="rgb(238,81,41)" fg:x="470" fg:w="1"/><text x="10.4941%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (96 samples, 2.09%)</title><rect x="8.1953%" y="405" width="2.0924%" height="15" fill="rgb(210,199,37)" fg:x="376" fg:w="96"/><text x="8.4453%" y="415.50">r..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="10.2659%" y="389" width="0.0218%" height="15" fill="rgb(244,192,49)" fg:x="471" fg:w="1"/><text x="10.5159%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="10.6582%" y="357" width="0.0218%" height="15" fill="rgb(226,211,11)" fg:x="489" fg:w="1"/><text x="10.9082%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by (2 samples, 0.04%)</title><rect x="10.6582%" y="373" width="0.0436%" height="15" fill="rgb(236,162,54)" fg:x="489" fg:w="2"/><text x="10.9082%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="10.6800%" y="357" width="0.0218%" height="15" fill="rgb(220,229,9)" fg:x="490" fg:w="1"/><text x="10.9300%" y="367.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="10.7018%" y="373" width="0.0436%" height="15" fill="rgb(250,87,22)" fg:x="491" fg:w="2"/><text x="10.9518%" y="383.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="10.7454%" y="373" width="0.0218%" height="15" fill="rgb(239,43,17)" fg:x="493" fg:w="1"/><text x="10.9954%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::EscapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (23 samples, 0.50%)</title><rect x="10.2877%" y="405" width="0.5013%" height="15" fill="rgb(231,177,25)" fg:x="472" fg:w="23"/><text x="10.5377%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (18 samples, 0.39%)</title><rect x="10.3967%" y="389" width="0.3923%" height="15" fill="rgb(219,179,1)" fg:x="477" fg:w="18"/><text x="10.6467%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="10.7672%" y="373" width="0.0218%" height="15" fill="rgb(238,219,53)" fg:x="494" fg:w="1"/><text x="11.0172%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::FSWritableFile::PrepareWrite (1 samples, 0.02%)</title><rect x="10.7890%" y="405" width="0.0218%" height="15" fill="rgb(232,167,36)" fg:x="495" fg:w="1"/><text x="11.0390%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="10.8108%" y="389" width="0.0218%" height="15" fill="rgb(244,19,51)" fg:x="496" fg:w="1"/><text x="11.0608%" y="399.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="10.8326%" y="373" width="0.0218%" height="15" fill="rgb(224,6,22)" fg:x="497" fg:w="1"/><text x="11.0826%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="10.8544%" y="373" width="0.0218%" height="15" fill="rgb(224,145,5)" fg:x="498" fg:w="1"/><text x="11.1044%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="10.8980%" y="341" width="0.0218%" height="15" fill="rgb(234,130,49)" fg:x="500" fg:w="1"/><text x="11.1480%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableMutableCFOptions::ConfigurableMutableCFOptions (2 samples, 0.04%)</title><rect x="10.8980%" y="357" width="0.0436%" height="15" fill="rgb(254,6,2)" fg:x="500" fg:w="2"/><text x="11.1480%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::RegisterOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="10.9198%" y="341" width="0.0218%" height="15" fill="rgb(208,96,46)" fg:x="501" fg:w="1"/><text x="11.1698%" y="351.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::Configurable::RegisteredOptions, std::__1::allocator&lt;rocksdb::Configurable::RegisteredOptions&gt;&gt;::__emplace_back_slow_path&lt;rocksdb::Configurable::RegisteredOptions&amp;&gt; (1 samples, 0.02%)</title><rect x="10.9198%" y="325" width="0.0218%" height="15" fill="rgb(239,3,39)" fg:x="501" fg:w="1"/><text x="11.1698%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="10.9852%" y="341" width="0.0218%" height="15" fill="rgb(233,210,1)" fg:x="504" fg:w="1"/><text x="11.2352%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::CFOptionsAsConfigurable(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="10.8326%" y="389" width="0.2180%" height="15" fill="rgb(244,137,37)" fg:x="497" fg:w="10"/><text x="11.0826%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigurableCFOptions(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="10.8762%" y="373" width="0.1744%" height="15" fill="rgb(240,136,2)" fg:x="499" fg:w="8"/><text x="11.1262%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::MutableCFOptions (5 samples, 0.11%)</title><rect x="10.9416%" y="357" width="0.1090%" height="15" fill="rgb(239,18,37)" fg:x="502" fg:w="5"/><text x="11.1916%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::RefreshDerivedOptions (2 samples, 0.04%)</title><rect x="11.0070%" y="341" width="0.0436%" height="15" fill="rgb(218,185,22)" fg:x="505" fg:w="2"/><text x="11.2570%" y="351.50"></text></g><g><title>rusk-wallet`std::__1::vector&lt;unsigned long long, std::__1::allocator&lt;unsigned long long&gt;&gt;::__append (1 samples, 0.02%)</title><rect x="11.0288%" y="325" width="0.0218%" height="15" fill="rgb(225,218,4)" fg:x="506" fg:w="1"/><text x="11.2788%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="11.0288%" y="309" width="0.0218%" height="15" fill="rgb(230,182,32)" fg:x="506" fg:w="1"/><text x="11.2788%" y="319.50"></text></g><g><title>libc+ (3 samples, 0.07%)</title><rect x="11.0506%" y="373" width="0.0654%" height="15" fill="rgb(242,56,43)" fg:x="507" fg:w="3"/><text x="11.3006%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (10 samples, 0.22%)</title><rect x="11.1160%" y="373" width="0.2180%" height="15" fill="rgb(233,99,24)" fg:x="510" fg:w="10"/><text x="11.3660%" y="383.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (6 samples, 0.13%)</title><rect x="11.3339%" y="373" width="0.1308%" height="15" fill="rgb(234,209,42)" fg:x="520" fg:w="6"/><text x="11.5839%" y="383.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="11.4647%" y="373" width="0.0436%" height="15" fill="rgb(227,7,12)" fg:x="526" fg:w="2"/><text x="11.7147%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="11.5083%" y="373" width="0.0218%" height="15" fill="rgb(245,203,43)" fg:x="528" fg:w="1"/><text x="11.7583%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.22%)</title><rect x="11.5301%" y="373" width="0.2180%" height="15" fill="rgb(238,205,33)" fg:x="529" fg:w="10"/><text x="11.7801%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (25 samples, 0.54%)</title><rect x="11.7480%" y="373" width="0.5449%" height="15" fill="rgb(231,56,7)" fg:x="539" fg:w="25"/><text x="11.9980%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="12.2929%" y="373" width="0.0436%" height="15" fill="rgb(244,186,29)" fg:x="564" fg:w="2"/><text x="12.5429%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (2 samples, 0.04%)</title><rect x="12.3365%" y="373" width="0.0436%" height="15" fill="rgb(234,111,31)" fg:x="566" fg:w="2"/><text x="12.5865%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="12.3801%" y="373" width="0.0218%" height="15" fill="rgb(241,149,10)" fg:x="568" fg:w="1"/><text x="12.6301%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="12.4019%" y="373" width="0.0436%" height="15" fill="rgb(249,206,44)" fg:x="569" fg:w="2"/><text x="12.6519%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (3 samples, 0.07%)</title><rect x="13.0776%" y="357" width="0.0654%" height="15" fill="rgb(251,153,30)" fg:x="600" fg:w="3"/><text x="13.3276%" y="367.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="13.1430%" y="357" width="0.0218%" height="15" fill="rgb(239,152,38)" fg:x="603" fg:w="1"/><text x="13.3930%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (2 samples, 0.04%)</title><rect x="13.1648%" y="357" width="0.0436%" height="15" fill="rgb(249,139,47)" fg:x="604" fg:w="2"/><text x="13.4148%" y="367.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (2 samples, 0.04%)</title><rect x="13.4263%" y="341" width="0.0436%" height="15" fill="rgb(244,64,35)" fg:x="616" fg:w="2"/><text x="13.6763%" y="351.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator delete(void*) (3 samples, 0.07%)</title><rect x="13.4699%" y="341" width="0.0654%" height="15" fill="rgb(216,46,15)" fg:x="618" fg:w="3"/><text x="13.7199%" y="351.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="13.6443%" y="325" width="0.0218%" height="15" fill="rgb(250,74,19)" fg:x="626" fg:w="1"/><text x="13.8943%" y="335.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="13.6661%" y="325" width="0.0218%" height="15" fill="rgb(249,42,33)" fg:x="627" fg:w="1"/><text x="13.9161%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="13.6879%" y="325" width="0.0654%" height="15" fill="rgb(242,149,17)" fg:x="628" fg:w="3"/><text x="13.9379%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.13%)</title><rect x="13.7533%" y="325" width="0.1308%" height="15" fill="rgb(244,29,21)" fg:x="631" fg:w="6"/><text x="14.0033%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.11%)</title><rect x="13.8840%" y="325" width="0.1090%" height="15" fill="rgb(220,130,37)" fg:x="637" fg:w="5"/><text x="14.1340%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (22 samples, 0.48%)</title><rect x="13.5353%" y="341" width="0.4795%" height="15" fill="rgb(211,67,2)" fg:x="621" fg:w="22"/><text x="13.7853%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="13.9930%" y="325" width="0.0218%" height="15" fill="rgb(235,68,52)" fg:x="642" fg:w="1"/><text x="14.2430%" y="335.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="14.0148%" y="341" width="0.0218%" height="15" fill="rgb(246,142,3)" fg:x="643" fg:w="1"/><text x="14.2648%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="14.0366%" y="341" width="0.0218%" height="15" fill="rgb(241,25,7)" fg:x="644" fg:w="1"/><text x="14.2866%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="14.0584%" y="341" width="0.0218%" height="15" fill="rgb(242,119,39)" fg:x="645" fg:w="1"/><text x="14.3084%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="14.0802%" y="341" width="0.0654%" height="15" fill="rgb(241,98,45)" fg:x="646" fg:w="3"/><text x="14.3302%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (50 samples, 1.09%)</title><rect x="13.2084%" y="357" width="1.0898%" height="15" fill="rgb(254,28,30)" fg:x="606" fg:w="50"/><text x="13.4584%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.15%)</title><rect x="14.1456%" y="341" width="0.1526%" height="15" fill="rgb(241,142,54)" fg:x="649" fg:w="7"/><text x="14.3956%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="14.2982%" y="357" width="0.0218%" height="15" fill="rgb(222,85,15)" fg:x="656" fg:w="1"/><text x="14.5482%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.22%)</title><rect x="14.3200%" y="357" width="0.2180%" height="15" fill="rgb(210,85,47)" fg:x="657" fg:w="10"/><text x="14.5700%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (18 samples, 0.39%)</title><rect x="14.5379%" y="357" width="0.3923%" height="15" fill="rgb(224,206,25)" fg:x="667" fg:w="18"/><text x="14.7879%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.13%)</title><rect x="14.9303%" y="357" width="0.1308%" height="15" fill="rgb(243,201,19)" fg:x="685" fg:w="6"/><text x="15.1803%" y="367.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="15.0610%" y="357" width="0.0436%" height="15" fill="rgb(236,59,4)" fg:x="691" fg:w="2"/><text x="15.3110%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.39%)</title><rect x="15.1046%" y="357" width="0.3923%" height="15" fill="rgb(254,179,45)" fg:x="693" fg:w="18"/><text x="15.3546%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.07%)</title><rect x="15.4969%" y="357" width="0.0654%" height="15" fill="rgb(226,14,10)" fg:x="711" fg:w="3"/><text x="15.7469%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (2 samples, 0.04%)</title><rect x="15.5623%" y="357" width="0.0436%" height="15" fill="rgb(244,27,41)" fg:x="714" fg:w="2"/><text x="15.8123%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; std::__1::operator+&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;(char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="15.8021%" y="341" width="0.0218%" height="15" fill="rgb(235,35,32)" fg:x="725" fg:w="1"/><text x="16.0521%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (1 samples, 0.02%)</title><rect x="15.8239%" y="341" width="0.0218%" height="15" fill="rgb(218,68,31)" fg:x="726" fg:w="1"/><text x="16.0739%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="15.8457%" y="341" width="0.0218%" height="15" fill="rgb(207,120,37)" fg:x="727" fg:w="1"/><text x="16.0957%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; std::__1::operator+&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;(char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="15.8675%" y="325" width="0.0218%" height="15" fill="rgb(227,98,0)" fg:x="728" fg:w="1"/><text x="16.1175%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="15.8893%" y="325" width="0.0218%" height="15" fill="rgb(207,7,3)" fg:x="729" fg:w="1"/><text x="16.1393%" y="335.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="15.9111%" y="325" width="0.0218%" height="15" fill="rgb(206,98,19)" fg:x="730" fg:w="1"/><text x="16.1611%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="15.9329%" y="325" width="0.0218%" height="15" fill="rgb(217,5,26)" fg:x="731" fg:w="1"/><text x="16.1829%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="15.9547%" y="325" width="0.0654%" height="15" fill="rgb(235,190,38)" fg:x="732" fg:w="3"/><text x="16.2047%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="16.0201%" y="325" width="0.0218%" height="15" fill="rgb(247,86,24)" fg:x="735" fg:w="1"/><text x="16.2701%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="16.0201%" y="309" width="0.0218%" height="15" fill="rgb(205,101,16)" fg:x="735" fg:w="1"/><text x="16.2701%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="16.0418%" y="325" width="0.0218%" height="15" fill="rgb(246,168,33)" fg:x="736" fg:w="1"/><text x="16.2918%" y="335.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="16.0636%" y="325" width="0.0436%" height="15" fill="rgb(231,114,1)" fg:x="737" fg:w="2"/><text x="16.3136%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (2 samples, 0.04%)</title><rect x="16.3034%" y="309" width="0.0436%" height="15" fill="rgb(207,184,53)" fg:x="748" fg:w="2"/><text x="16.5534%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="16.5867%" y="277" width="0.0218%" height="15" fill="rgb(224,95,51)" fg:x="761" fg:w="1"/><text x="16.8367%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="16.6085%" y="277" width="0.0436%" height="15" fill="rgb(212,188,45)" fg:x="762" fg:w="2"/><text x="16.8585%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="16.6521%" y="277" width="0.0218%" height="15" fill="rgb(223,154,38)" fg:x="764" fg:w="1"/><text x="16.9021%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (10 samples, 0.22%)</title><rect x="16.5432%" y="293" width="0.2180%" height="15" fill="rgb(251,22,52)" fg:x="759" fg:w="10"/><text x="16.7932%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.09%)</title><rect x="16.6739%" y="277" width="0.0872%" height="15" fill="rgb(229,209,22)" fg:x="765" fg:w="4"/><text x="16.9239%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (20 samples, 0.44%)</title><rect x="16.3470%" y="309" width="0.4359%" height="15" fill="rgb(234,138,34)" fg:x="750" fg:w="20"/><text x="16.5970%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="16.7611%" y="293" width="0.0218%" height="15" fill="rgb(212,95,11)" fg:x="769" fg:w="1"/><text x="17.0111%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="16.7829%" y="309" width="0.0218%" height="15" fill="rgb(240,179,47)" fg:x="770" fg:w="1"/><text x="17.0329%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="16.8047%" y="309" width="0.0218%" height="15" fill="rgb(240,163,11)" fg:x="771" fg:w="1"/><text x="17.0547%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="16.8265%" y="309" width="0.0872%" height="15" fill="rgb(236,37,12)" fg:x="772" fg:w="4"/><text x="17.0765%" y="319.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="16.9355%" y="293" width="0.0218%" height="15" fill="rgb(232,164,16)" fg:x="777" fg:w="1"/><text x="17.1855%" y="303.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::assign (1 samples, 0.02%)</title><rect x="16.9573%" y="293" width="0.0218%" height="15" fill="rgb(244,205,15)" fg:x="778" fg:w="1"/><text x="17.2073%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::__itoa::__base_10_u32[abi:v15006] (3 samples, 0.07%)</title><rect x="17.0227%" y="277" width="0.0654%" height="15" fill="rgb(223,117,47)" fg:x="781" fg:w="3"/><text x="17.2727%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (57 samples, 1.24%)</title><rect x="15.8675%" y="341" width="1.2424%" height="15" fill="rgb(244,107,35)" fg:x="728" fg:w="57"/><text x="16.1175%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (46 samples, 1.00%)</title><rect x="16.1072%" y="325" width="1.0026%" height="15" fill="rgb(205,140,8)" fg:x="739" fg:w="46"/><text x="16.3572%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (9 samples, 0.20%)</title><rect x="16.9137%" y="309" width="0.1962%" height="15" fill="rgb(228,84,46)" fg:x="776" fg:w="9"/><text x="17.1637%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="16.9791%" y="293" width="0.1308%" height="15" fill="rgb(254,188,9)" fg:x="779" fg:w="6"/><text x="17.2291%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="17.0881%" y="277" width="0.0218%" height="15" fill="rgb(206,112,54)" fg:x="784" fg:w="1"/><text x="17.3381%" y="287.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="17.1534%" y="325" width="0.0218%" height="15" fill="rgb(216,84,49)" fg:x="787" fg:w="1"/><text x="17.4034%" y="335.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (2 samples, 0.04%)</title><rect x="17.1752%" y="325" width="0.0436%" height="15" fill="rgb(214,194,35)" fg:x="788" fg:w="2"/><text x="17.4252%" y="335.50"></text></g><g><title>libc++.1.dylib`char* std::__1::__itoa::__append10[abi:v15006]&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="17.2188%" y="325" width="0.0218%" height="15" fill="rgb(249,28,3)" fg:x="790" fg:w="1"/><text x="17.4688%" y="335.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memset (1 samples, 0.02%)</title><rect x="17.3278%" y="293" width="0.0218%" height="15" fill="rgb(222,56,52)" fg:x="795" fg:w="1"/><text x="17.5778%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (3 samples, 0.07%)</title><rect x="17.3496%" y="293" width="0.0654%" height="15" fill="rgb(245,217,50)" fg:x="796" fg:w="3"/><text x="17.5996%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::(anonymous namespace)::initial_string&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator() (5 samples, 0.11%)</title><rect x="17.3278%" y="309" width="0.1090%" height="15" fill="rgb(213,201,24)" fg:x="795" fg:w="5"/><text x="17.5778%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="17.4150%" y="293" width="0.0218%" height="15" fill="rgb(248,116,28)" fg:x="799" fg:w="1"/><text x="17.6650%" y="303.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.02%)</title><rect x="17.4368%" y="277" width="0.0218%" height="15" fill="rgb(219,72,43)" fg:x="800" fg:w="1"/><text x="17.6868%" y="287.50"></text></g><g><title>libsystem_c.dylib`__dtoa (4 samples, 0.09%)</title><rect x="17.5240%" y="261" width="0.0872%" height="15" fill="rgb(209,138,14)" fg:x="804" fg:w="4"/><text x="17.7740%" y="271.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$pthread_getspecific (1 samples, 0.02%)</title><rect x="17.5894%" y="245" width="0.0218%" height="15" fill="rgb(222,18,33)" fg:x="807" fg:w="1"/><text x="17.8394%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (18 samples, 0.39%)</title><rect x="17.2406%" y="325" width="0.3923%" height="15" fill="rgb(213,199,7)" fg:x="791" fg:w="18"/><text x="17.4906%" y="335.50"></text></g><g><title>libsystem_c.dylib`snprintf (9 samples, 0.20%)</title><rect x="17.4368%" y="309" width="0.1962%" height="15" fill="rgb(250,110,10)" fg:x="800" fg:w="9"/><text x="17.6868%" y="319.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (9 samples, 0.20%)</title><rect x="17.4368%" y="293" width="0.1962%" height="15" fill="rgb(248,123,6)" fg:x="800" fg:w="9"/><text x="17.6868%" y="303.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (8 samples, 0.17%)</title><rect x="17.4586%" y="277" width="0.1744%" height="15" fill="rgb(206,91,31)" fg:x="801" fg:w="8"/><text x="17.7086%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (1 samples, 0.02%)</title><rect x="17.6112%" y="261" width="0.0218%" height="15" fill="rgb(211,154,13)" fg:x="808" fg:w="1"/><text x="17.8612%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="17.6330%" y="325" width="0.0436%" height="15" fill="rgb(225,148,7)" fg:x="809" fg:w="2"/><text x="17.8830%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.59%)</title><rect x="17.1099%" y="341" width="0.5885%" height="15" fill="rgb(220,160,43)" fg:x="785" fg:w="27"/><text x="17.3599%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="17.6765%" y="325" width="0.0218%" height="15" fill="rgb(213,52,39)" fg:x="811" fg:w="1"/><text x="17.9265%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="17.7855%" y="325" width="0.0218%" height="15" fill="rgb(243,137,7)" fg:x="816" fg:w="1"/><text x="18.0355%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="17.8073%" y="325" width="0.0218%" height="15" fill="rgb(230,79,13)" fg:x="817" fg:w="1"/><text x="18.0573%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="17.8073%" y="309" width="0.0218%" height="15" fill="rgb(247,105,23)" fg:x="817" fg:w="1"/><text x="18.0573%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (1 samples, 0.02%)</title><rect x="17.8073%" y="293" width="0.0218%" height="15" fill="rgb(223,179,41)" fg:x="817" fg:w="1"/><text x="18.0573%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::SerializeVector&lt;int&gt;(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="17.6983%" y="341" width="0.1526%" height="15" fill="rgb(218,9,34)" fg:x="812" fg:w="7"/><text x="17.9483%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="17.8291%" y="325" width="0.0218%" height="15" fill="rgb(222,106,8)" fg:x="818" fg:w="1"/><text x="18.0791%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::SerializeVector&lt;std::__1::shared_ptr&lt;rocksdb::TablePropertiesCollectorFactory&gt;&gt;(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;std::__1::shared_ptr&lt;rocksdb::TablePropertiesCollectorFactory&gt;, std::__1::allocator&lt;std::__1::shared_ptr&lt;rocksdb::TablePropertiesCollectorFactory&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="17.8509%" y="341" width="0.0218%" height="15" fill="rgb(211,220,0)" fg:x="819" fg:w="1"/><text x="18.1009%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (252 samples, 5.49%)</title><rect x="12.4455%" y="373" width="5.4926%" height="15" fill="rgb(229,52,16)" fg:x="571" fg:w="252"/><text x="12.6955%" y="383.50">rusk-wa..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (107 samples, 2.33%)</title><rect x="15.6059%" y="357" width="2.3322%" height="15" fill="rgb(212,155,18)" fg:x="716" fg:w="107"/><text x="15.8559%" y="367.50">r..</text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_3, std::__1::allocator&lt;rocksdb::$_3&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*&amp;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="17.8727%" y="341" width="0.0654%" height="15" fill="rgb(242,21,14)" fg:x="820" fg:w="3"/><text x="18.1227%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="17.8945%" y="325" width="0.0436%" height="15" fill="rgb(222,19,48)" fg:x="821" fg:w="2"/><text x="18.1445%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="17.9163%" y="309" width="0.0218%" height="15" fill="rgb(232,45,27)" fg:x="822" fg:w="1"/><text x="18.1663%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (317 samples, 6.91%)</title><rect x="11.0506%" y="389" width="6.9093%" height="15" fill="rgb(249,103,42)" fg:x="507" fg:w="317"/><text x="11.3006%" y="399.50">rusk-wall..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="17.9381%" y="373" width="0.0218%" height="15" fill="rgb(246,81,33)" fg:x="823" fg:w="1"/><text x="18.1881%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::~AdvancedColumnFamilyOptions (1 samples, 0.02%)</title><rect x="17.9599%" y="373" width="0.0218%" height="15" fill="rgb(252,33,42)" fg:x="824" fg:w="1"/><text x="18.2099%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="17.9599%" y="357" width="0.0218%" height="15" fill="rgb(209,212,41)" fg:x="824" fg:w="1"/><text x="18.2099%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::GetStringFromColumnFamilyOptions(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (330 samples, 7.19%)</title><rect x="10.8108%" y="405" width="7.1927%" height="15" fill="rgb(207,154,6)" fg:x="496" fg:w="330"/><text x="11.0608%" y="415.50">rusk-walle..</text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::~ConfigurableCFOptions (2 samples, 0.04%)</title><rect x="17.9599%" y="389" width="0.0436%" height="15" fill="rgb(223,64,47)" fg:x="824" fg:w="2"/><text x="18.2099%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="17.9817%" y="373" width="0.0218%" height="15" fill="rgb(211,161,38)" fg:x="825" fg:w="1"/><text x="18.2317%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="17.9817%" y="357" width="0.0218%" height="15" fill="rgb(219,138,40)" fg:x="825" fg:w="1"/><text x="18.2317%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::GetStringFromDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="18.0035%" y="405" width="0.0436%" height="15" fill="rgb(241,228,46)" fg:x="826" fg:w="2"/><text x="18.2535%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="18.0035%" y="389" width="0.0436%" height="15" fill="rgb(223,209,38)" fg:x="826" fg:w="2"/><text x="18.2535%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="18.0035%" y="373" width="0.0436%" height="15" fill="rgb(236,164,45)" fg:x="826" fg:w="2"/><text x="18.2535%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="18.0035%" y="357" width="0.0436%" height="15" fill="rgb(231,15,5)" fg:x="826" fg:w="2"/><text x="18.2535%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="18.0253%" y="341" width="0.0218%" height="15" fill="rgb(252,35,15)" fg:x="827" fg:w="1"/><text x="18.2753%" y="351.50"></text></g><g><title>libc+ (4 samples, 0.09%)</title><rect x="18.0471%" y="389" width="0.0872%" height="15" fill="rgb(248,181,18)" fg:x="828" fg:w="4"/><text x="18.2971%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="18.1343%" y="389" width="0.1526%" height="15" fill="rgb(233,39,42)" fg:x="832" fg:w="7"/><text x="18.3843%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="18.2868%" y="389" width="0.0218%" height="15" fill="rgb(238,110,33)" fg:x="839" fg:w="1"/><text x="18.5368%" y="399.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (8 samples, 0.17%)</title><rect x="18.3086%" y="389" width="0.1744%" height="15" fill="rgb(233,195,10)" fg:x="840" fg:w="8"/><text x="18.5586%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.11%)</title><rect x="18.4830%" y="389" width="0.1090%" height="15" fill="rgb(254,105,3)" fg:x="848" fg:w="5"/><text x="18.7330%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.78%)</title><rect x="18.5920%" y="389" width="0.7847%" height="15" fill="rgb(221,225,9)" fg:x="853" fg:w="36"/><text x="18.8420%" y="399.50"></text></g><g><title>libsystem_pthread.dylib`___chkstk_darwin (1 samples, 0.02%)</title><rect x="19.3766%" y="389" width="0.0218%" height="15" fill="rgb(224,227,45)" fg:x="889" fg:w="1"/><text x="19.6266%" y="399.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (4 samples, 0.09%)</title><rect x="19.3984%" y="389" width="0.0872%" height="15" fill="rgb(229,198,43)" fg:x="890" fg:w="4"/><text x="19.6484%" y="399.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="19.4856%" y="389" width="0.0218%" height="15" fill="rgb(206,209,35)" fg:x="894" fg:w="1"/><text x="19.7356%" y="399.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="19.5074%" y="389" width="0.0218%" height="15" fill="rgb(245,195,53)" fg:x="895" fg:w="1"/><text x="19.7574%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="19.5292%" y="389" width="0.0218%" height="15" fill="rgb(240,92,26)" fg:x="896" fg:w="1"/><text x="19.7792%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::LineFileReader::ReadLine(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="19.5510%" y="389" width="0.1090%" height="15" fill="rgb(207,40,23)" fg:x="897" fg:w="5"/><text x="19.8010%" y="399.50"></text></g><g><title>libc+ (4 samples, 0.09%)</title><rect x="20.1177%" y="373" width="0.0872%" height="15" fill="rgb(223,111,35)" fg:x="923" fg:w="4"/><text x="20.3677%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="20.2049%" y="373" width="0.0218%" height="15" fill="rgb(229,147,28)" fg:x="927" fg:w="1"/><text x="20.4549%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (2 samples, 0.04%)</title><rect x="20.2267%" y="373" width="0.0436%" height="15" fill="rgb(211,29,28)" fg:x="928" fg:w="2"/><text x="20.4767%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="20.2703%" y="373" width="0.0218%" height="15" fill="rgb(228,72,33)" fg:x="930" fg:w="1"/><text x="20.5203%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (3 samples, 0.07%)</title><rect x="20.2921%" y="373" width="0.0654%" height="15" fill="rgb(205,214,31)" fg:x="931" fg:w="3"/><text x="20.5421%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (2 samples, 0.04%)</title><rect x="20.5536%" y="357" width="0.0436%" height="15" fill="rgb(224,111,15)" fg:x="943" fg:w="2"/><text x="20.8036%" y="367.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="20.5972%" y="341" width="0.0218%" height="15" fill="rgb(253,21,26)" fg:x="945" fg:w="1"/><text x="20.8472%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.15%)</title><rect x="20.6190%" y="341" width="0.1526%" height="15" fill="rgb(245,139,43)" fg:x="946" fg:w="7"/><text x="20.8690%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (15 samples, 0.33%)</title><rect x="20.5972%" y="357" width="0.3269%" height="15" fill="rgb(252,170,7)" fg:x="945" fg:w="15"/><text x="20.8472%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.15%)</title><rect x="20.7716%" y="341" width="0.1526%" height="15" fill="rgb(231,118,14)" fg:x="953" fg:w="7"/><text x="21.0216%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.59%)</title><rect x="20.3575%" y="373" width="0.5885%" height="15" fill="rgb(238,83,0)" fg:x="934" fg:w="27"/><text x="20.6075%" y="383.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="20.9241%" y="357" width="0.0218%" height="15" fill="rgb(221,39,39)" fg:x="960" fg:w="1"/><text x="21.1741%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (5 samples, 0.11%)</title><rect x="21.2947%" y="357" width="0.1090%" height="15" fill="rgb(222,119,46)" fg:x="977" fg:w="5"/><text x="21.5447%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="21.4037%" y="357" width="0.0654%" height="15" fill="rgb(222,165,49)" fg:x="982" fg:w="3"/><text x="21.6537%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (36 samples, 0.78%)</title><rect x="20.9459%" y="373" width="0.7847%" height="15" fill="rgb(219,113,52)" fg:x="961" fg:w="36"/><text x="21.1959%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (12 samples, 0.26%)</title><rect x="21.4690%" y="357" width="0.2616%" height="15" fill="rgb(214,7,15)" fg:x="985" fg:w="12"/><text x="21.7190%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="21.7306%" y="373" width="0.0218%" height="15" fill="rgb(235,32,4)" fg:x="997" fg:w="1"/><text x="21.9806%" y="383.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (4 samples, 0.09%)</title><rect x="21.7524%" y="373" width="0.0872%" height="15" fill="rgb(238,90,54)" fg:x="998" fg:w="4"/><text x="22.0024%" y="383.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (8 samples, 0.17%)</title><rect x="21.8396%" y="373" width="0.1744%" height="15" fill="rgb(213,208,19)" fg:x="1002" fg:w="8"/><text x="22.0896%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (8 samples, 0.17%)</title><rect x="22.0139%" y="373" width="0.1744%" height="15" fill="rgb(233,156,4)" fg:x="1010" fg:w="8"/><text x="22.2639%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (67 samples, 1.46%)</title><rect x="22.1883%" y="373" width="1.4603%" height="15" fill="rgb(207,194,5)" fg:x="1018" fg:w="67"/><text x="22.4383%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.09%)</title><rect x="23.6486%" y="373" width="0.0872%" height="15" fill="rgb(206,111,30)" fg:x="1085" fg:w="4"/><text x="23.8986%" y="383.50"></text></g><g><title>libsystem_platform.dylib`__bzero (7 samples, 0.15%)</title><rect x="23.7358%" y="373" width="0.1526%" height="15" fill="rgb(243,70,54)" fg:x="1089" fg:w="7"/><text x="23.9858%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (40 samples, 0.87%)</title><rect x="23.8884%" y="373" width="0.8718%" height="15" fill="rgb(242,28,8)" fg:x="1096" fg:w="40"/><text x="24.1384%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.04%)</title><rect x="24.7602%" y="373" width="0.0436%" height="15" fill="rgb(219,106,18)" fg:x="1136" fg:w="2"/><text x="25.0102%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (26 samples, 0.57%)</title><rect x="24.8038%" y="373" width="0.5667%" height="15" fill="rgb(244,222,10)" fg:x="1138" fg:w="26"/><text x="25.0538%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (22 samples, 0.48%)</title><rect x="25.3705%" y="373" width="0.4795%" height="15" fill="rgb(236,179,52)" fg:x="1164" fg:w="22"/><text x="25.6205%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memchr (5 samples, 0.11%)</title><rect x="25.8500%" y="373" width="0.1090%" height="15" fill="rgb(213,23,39)" fg:x="1186" fg:w="5"/><text x="26.1000%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="25.9590%" y="373" width="0.0218%" height="15" fill="rgb(238,48,10)" fg:x="1191" fg:w="1"/><text x="26.2090%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (2 samples, 0.04%)</title><rect x="25.9808%" y="373" width="0.0436%" height="15" fill="rgb(251,196,23)" fg:x="1192" fg:w="2"/><text x="26.2308%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="26.0244%" y="373" width="0.0218%" height="15" fill="rgb(250,152,24)" fg:x="1194" fg:w="1"/><text x="26.2744%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="26.0462%" y="373" width="0.0436%" height="15" fill="rgb(209,150,17)" fg:x="1195" fg:w="2"/><text x="26.2962%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="26.0898%" y="373" width="0.0654%" height="15" fill="rgb(234,202,34)" fg:x="1197" fg:w="3"/><text x="26.3398%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (4 samples, 0.09%)</title><rect x="26.1552%" y="373" width="0.0872%" height="15" fill="rgb(253,148,53)" fg:x="1200" fg:w="4"/><text x="26.4052%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="26.2424%" y="373" width="0.0218%" height="15" fill="rgb(218,129,16)" fg:x="1204" fg:w="1"/><text x="26.4924%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__fcntl (1 samples, 0.02%)</title><rect x="26.2642%" y="357" width="0.0218%" height="15" fill="rgb(216,85,19)" fg:x="1205" fg:w="1"/><text x="26.5142%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::NewSequentialFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FileOptions const&amp;, std::__1::unique_ptr&lt;rocksdb::FSSequentialFile, std::__1::default_delete (6 samples, 0.13%)</title><rect x="26.2642%" y="373" width="0.1308%" height="15" fill="rgb(235,228,7)" fg:x="1205" fg:w="6"/><text x="26.5142%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__open (5 samples, 0.11%)</title><rect x="26.2860%" y="357" width="0.1090%" height="15" fill="rgb(245,175,0)" fg:x="1206" fg:w="5"/><text x="26.5360%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="26.3949%" y="373" width="0.0218%" height="15" fill="rgb(208,168,36)" fg:x="1211" fg:w="1"/><text x="26.6449%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="26.5257%" y="357" width="0.0436%" height="15" fill="rgb(246,171,24)" fg:x="1217" fg:w="2"/><text x="26.7757%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="26.5693%" y="357" width="0.0218%" height="15" fill="rgb(215,142,24)" fg:x="1219" fg:w="1"/><text x="26.8193%" y="367.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="26.7219%" y="341" width="0.0218%" height="15" fill="rgb(250,187,7)" fg:x="1226" fg:w="1"/><text x="26.9719%" y="351.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="26.7873%" y="325" width="0.0218%" height="15" fill="rgb(228,66,33)" fg:x="1229" fg:w="1"/><text x="27.0373%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="26.8091%" y="325" width="0.0218%" height="15" fill="rgb(234,215,21)" fg:x="1230" fg:w="1"/><text x="27.0591%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.09%)</title><rect x="26.8309%" y="325" width="0.0872%" height="15" fill="rgb(222,191,20)" fg:x="1231" fg:w="4"/><text x="27.0809%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.13%)</title><rect x="26.9180%" y="325" width="0.1308%" height="15" fill="rgb(245,79,54)" fg:x="1235" fg:w="6"/><text x="27.1680%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.11%)</title><rect x="27.0488%" y="325" width="0.1090%" height="15" fill="rgb(240,10,37)" fg:x="1241" fg:w="5"/><text x="27.2988%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (21 samples, 0.46%)</title><rect x="26.7437%" y="341" width="0.4577%" height="15" fill="rgb(214,192,32)" fg:x="1227" fg:w="21"/><text x="26.9937%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="27.1578%" y="325" width="0.0436%" height="15" fill="rgb(209,36,54)" fg:x="1246" fg:w="2"/><text x="27.4078%" y="335.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="27.2014%" y="341" width="0.0436%" height="15" fill="rgb(220,10,11)" fg:x="1248" fg:w="2"/><text x="27.4514%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="27.2450%" y="341" width="0.0436%" height="15" fill="rgb(221,106,17)" fg:x="1250" fg:w="2"/><text x="27.4950%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (41 samples, 0.89%)</title><rect x="26.5911%" y="357" width="0.8936%" height="15" fill="rgb(251,142,44)" fg:x="1220" fg:w="41"/><text x="26.8411%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.20%)</title><rect x="27.2886%" y="341" width="0.1962%" height="15" fill="rgb(238,13,15)" fg:x="1252" fg:w="9"/><text x="27.5386%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (21 samples, 0.46%)</title><rect x="27.4847%" y="357" width="0.4577%" height="15" fill="rgb(208,107,27)" fg:x="1261" fg:w="21"/><text x="27.7347%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.13%)</title><rect x="27.9425%" y="341" width="0.1308%" height="15" fill="rgb(205,136,37)" fg:x="1282" fg:w="6"/><text x="28.1925%" y="351.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="28.0732%" y="325" width="0.0218%" height="15" fill="rgb(250,205,27)" fg:x="1288" fg:w="1"/><text x="28.3232%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::LineFileReader::ReadLine(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (86 samples, 1.87%)</title><rect x="26.4167%" y="373" width="1.8745%" height="15" fill="rgb(210,80,43)" fg:x="1212" fg:w="86"/><text x="26.6667%" y="383.50">r..</text></g><g><title>rusk-wallet`rocksdb::SequentialFileReader::Read (16 samples, 0.35%)</title><rect x="27.9425%" y="357" width="0.3487%" height="15" fill="rgb(247,160,36)" fg:x="1282" fg:w="16"/><text x="28.1925%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::ReadaheadSequentialFile::Read (10 samples, 0.22%)</title><rect x="28.0732%" y="341" width="0.2180%" height="15" fill="rgb(234,13,49)" fg:x="1288" fg:w="10"/><text x="28.3232%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::PosixSequentialFile::Read (9 samples, 0.20%)</title><rect x="28.0950%" y="325" width="0.1962%" height="15" fill="rgb(234,122,0)" fg:x="1289" fg:w="9"/><text x="28.3450%" y="335.50"></text></g><g><title>libsystem_c.dylib`fread (9 samples, 0.20%)</title><rect x="28.0950%" y="309" width="0.1962%" height="15" fill="rgb(207,146,38)" fg:x="1289" fg:w="9"/><text x="28.3450%" y="319.50"></text></g><g><title>libsystem_c.dylib`__fread (9 samples, 0.20%)</title><rect x="28.0950%" y="293" width="0.1962%" height="15" fill="rgb(207,177,25)" fg:x="1289" fg:w="9"/><text x="28.3450%" y="303.50"></text></g><g><title>libsystem_c.dylib`__srefill1 (9 samples, 0.20%)</title><rect x="28.0950%" y="277" width="0.1962%" height="15" fill="rgb(211,178,42)" fg:x="1289" fg:w="9"/><text x="28.3450%" y="287.50"></text></g><g><title>libsystem_c.dylib`_sread (9 samples, 0.20%)</title><rect x="28.0950%" y="261" width="0.1962%" height="15" fill="rgb(230,69,54)" fg:x="1289" fg:w="9"/><text x="28.3450%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__read_nocancel (9 samples, 0.20%)</title><rect x="28.0950%" y="245" width="0.1962%" height="15" fill="rgb(214,135,41)" fg:x="1289" fg:w="9"/><text x="28.3450%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="28.3348%" y="357" width="0.0218%" height="15" fill="rgb(237,67,25)" fg:x="1300" fg:w="1"/><text x="28.5848%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="28.3566%" y="357" width="0.0218%" height="15" fill="rgb(222,189,50)" fg:x="1301" fg:w="1"/><text x="28.6066%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::~AdvancedColumnFamilyOptions (1 samples, 0.02%)</title><rect x="28.3784%" y="357" width="0.0218%" height="15" fill="rgb(245,148,34)" fg:x="1302" fg:w="1"/><text x="28.6284%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="28.3784%" y="341" width="0.0218%" height="15" fill="rgb(222,29,6)" fg:x="1302" fg:w="1"/><text x="28.6284%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="28.4002%" y="341" width="0.0218%" height="15" fill="rgb(221,189,43)" fg:x="1303" fg:w="1"/><text x="28.6502%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="28.4220%" y="325" width="0.0218%" height="15" fill="rgb(207,36,27)" fg:x="1304" fg:w="1"/><text x="28.6720%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="28.4438%" y="309" width="0.0218%" height="15" fill="rgb(217,90,24)" fg:x="1305" fg:w="1"/><text x="28.6938%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="28.4656%" y="309" width="0.0218%" height="15" fill="rgb(224,66,35)" fg:x="1306" fg:w="1"/><text x="28.7156%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="28.4874%" y="293" width="0.0218%" height="15" fill="rgb(221,13,50)" fg:x="1307" fg:w="1"/><text x="28.7374%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="28.5092%" y="293" width="0.0218%" height="15" fill="rgb(236,68,49)" fg:x="1308" fg:w="1"/><text x="28.7592%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (5 samples, 0.11%)</title><rect x="28.5310%" y="293" width="0.1090%" height="15" fill="rgb(229,146,28)" fg:x="1309" fg:w="5"/><text x="28.7810%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (11 samples, 0.24%)</title><rect x="28.4874%" y="309" width="0.2398%" height="15" fill="rgb(225,31,38)" fg:x="1307" fg:w="11"/><text x="28.7374%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*), std::__1::allocator&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*)&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (4 samples, 0.09%)</title><rect x="28.6399%" y="293" width="0.0872%" height="15" fill="rgb(250,208,3)" fg:x="1314" fg:w="4"/><text x="28.8899%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::~Mutex (4 samples, 0.09%)</title><rect x="28.6399%" y="277" width="0.0872%" height="15" fill="rgb(246,54,23)" fg:x="1314" fg:w="4"/><text x="28.8899%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (4 samples, 0.09%)</title><rect x="28.6399%" y="261" width="0.0872%" height="15" fill="rgb(243,76,11)" fg:x="1314" fg:w="4"/><text x="28.8899%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="28.7271%" y="293" width="0.0218%" height="15" fill="rgb(245,21,50)" fg:x="1318" fg:w="1"/><text x="28.9771%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="28.7489%" y="277" width="0.0218%" height="15" fill="rgb(228,9,43)" fg:x="1319" fg:w="1"/><text x="28.9989%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="28.7707%" y="277" width="0.0218%" height="15" fill="rgb(208,100,47)" fg:x="1320" fg:w="1"/><text x="29.0207%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="28.7925%" y="277" width="0.0218%" height="15" fill="rgb(232,26,8)" fg:x="1321" fg:w="1"/><text x="29.0425%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (22 samples, 0.48%)</title><rect x="28.4002%" y="357" width="0.4795%" height="15" fill="rgb(216,166,38)" fg:x="1303" fg:w="22"/><text x="28.6502%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (21 samples, 0.46%)</title><rect x="28.4220%" y="341" width="0.4577%" height="15" fill="rgb(251,202,51)" fg:x="1304" fg:w="21"/><text x="28.6720%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (20 samples, 0.44%)</title><rect x="28.4438%" y="325" width="0.4359%" height="15" fill="rgb(254,216,34)" fg:x="1305" fg:w="20"/><text x="28.6938%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (7 samples, 0.15%)</title><rect x="28.7271%" y="309" width="0.1526%" height="15" fill="rgb(251,32,27)" fg:x="1318" fg:w="7"/><text x="28.9771%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (6 samples, 0.13%)</title><rect x="28.7489%" y="293" width="0.1308%" height="15" fill="rgb(208,127,28)" fg:x="1319" fg:w="6"/><text x="28.9989%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (3 samples, 0.07%)</title><rect x="28.8143%" y="277" width="0.0654%" height="15" fill="rgb(224,137,22)" fg:x="1322" fg:w="3"/><text x="29.0643%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (2 samples, 0.04%)</title><rect x="28.8361%" y="261" width="0.0436%" height="15" fill="rgb(254,70,32)" fg:x="1323" fg:w="2"/><text x="29.0861%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="28.8579%" y="245" width="0.0218%" height="15" fill="rgb(229,75,37)" fg:x="1324" fg:w="1"/><text x="29.1079%" y="255.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (5 samples, 0.11%)</title><rect x="28.8797%" y="341" width="0.1090%" height="15" fill="rgb(252,64,23)" fg:x="1325" fg:w="5"/><text x="29.1297%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.11%)</title><rect x="28.8797%" y="325" width="0.1090%" height="15" fill="rgb(232,162,48)" fg:x="1325" fg:w="5"/><text x="29.1297%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.09%)</title><rect x="28.9015%" y="309" width="0.0872%" height="15" fill="rgb(246,160,12)" fg:x="1326" fg:w="4"/><text x="29.1515%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.04%)</title><rect x="28.9451%" y="293" width="0.0436%" height="15" fill="rgb(247,166,0)" fg:x="1328" fg:w="2"/><text x="29.1951%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="28.9887%" y="341" width="0.0218%" height="15" fill="rgb(249,219,21)" fg:x="1330" fg:w="1"/><text x="29.2387%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16 (1 samples, 0.02%)</title><rect x="29.0105%" y="341" width="0.0218%" height="15" fill="rgb(205,209,3)" fg:x="1331" fg:w="1"/><text x="29.2605%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="29.0323%" y="325" width="0.0218%" height="15" fill="rgb(243,44,1)" fg:x="1332" fg:w="1"/><text x="29.2823%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="29.0541%" y="325" width="0.0436%" height="15" fill="rgb(206,159,16)" fg:x="1333" fg:w="2"/><text x="29.3041%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::AdvancedColumnFamilyOptions (5 samples, 0.11%)</title><rect x="29.0323%" y="341" width="0.1090%" height="15" fill="rgb(244,77,30)" fg:x="1332" fg:w="5"/><text x="29.2823%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::SkipListFactory::SkipListFactory (2 samples, 0.04%)</title><rect x="29.0976%" y="325" width="0.0436%" height="15" fill="rgb(218,69,12)" fg:x="1335" fg:w="2"/><text x="29.3476%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::RegisterOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="29.0976%" y="309" width="0.0436%" height="15" fill="rgb(212,87,7)" fg:x="1335" fg:w="2"/><text x="29.3476%" y="319.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::Configurable::RegisteredOptions, std::__1::allocator&lt;rocksdb::Configurable::RegisteredOptions&gt;&gt;::__emplace_back_slow_path&lt;rocksdb::Configurable::RegisteredOptions&amp;&gt; (2 samples, 0.04%)</title><rect x="29.0976%" y="293" width="0.0436%" height="15" fill="rgb(245,114,25)" fg:x="1335" fg:w="2"/><text x="29.3476%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="29.1194%" y="277" width="0.0218%" height="15" fill="rgb(210,61,42)" fg:x="1336" fg:w="1"/><text x="29.3694%" y="287.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (4 samples, 0.09%)</title><rect x="29.3592%" y="309" width="0.0872%" height="15" fill="rgb(211,52,33)" fg:x="1347" fg:w="4"/><text x="29.6092%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.09%)</title><rect x="29.3592%" y="293" width="0.0872%" height="15" fill="rgb(234,58,33)" fg:x="1347" fg:w="4"/><text x="29.6092%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.09%)</title><rect x="29.3592%" y="277" width="0.0872%" height="15" fill="rgb(220,115,36)" fg:x="1347" fg:w="4"/><text x="29.6092%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.02%)</title><rect x="29.4246%" y="261" width="0.0218%" height="15" fill="rgb(243,153,54)" fg:x="1350" fg:w="1"/><text x="29.6746%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="29.4464%" y="309" width="0.0436%" height="15" fill="rgb(251,47,18)" fg:x="1351" fg:w="2"/><text x="29.6964%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="29.4900%" y="309" width="0.0218%" height="15" fill="rgb(242,102,42)" fg:x="1353" fg:w="1"/><text x="29.7400%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="29.5118%" y="277" width="0.0218%" height="15" fill="rgb(234,31,38)" fg:x="1354" fg:w="1"/><text x="29.7618%" y="287.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="29.6425%" y="245" width="0.0218%" height="15" fill="rgb(221,117,51)" fg:x="1360" fg:w="1"/><text x="29.8925%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="29.6643%" y="245" width="0.0218%" height="15" fill="rgb(212,20,18)" fg:x="1361" fg:w="1"/><text x="29.9143%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCacheBase::ShardedCacheBase(unsigned long, int, bool, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="29.7079%" y="229" width="0.0218%" height="15" fill="rgb(245,133,36)" fg:x="1363" fg:w="1"/><text x="29.9579%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="29.7515%" y="133" width="0.0218%" height="15" fill="rgb(212,6,19)" fg:x="1365" fg:w="1"/><text x="30.0015%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::ShardedCache(unsigned long, int, bool, std::__1::shared_ptr (5 samples, 0.11%)</title><rect x="29.6861%" y="245" width="0.1090%" height="15" fill="rgb(218,1,36)" fg:x="1362" fg:w="5"/><text x="29.9361%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::port::cacheline_aligned_alloc (3 samples, 0.07%)</title><rect x="29.7297%" y="229" width="0.0654%" height="15" fill="rgb(246,84,54)" fg:x="1364" fg:w="3"/><text x="29.9797%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (3 samples, 0.07%)</title><rect x="29.7297%" y="213" width="0.0654%" height="15" fill="rgb(242,110,6)" fg:x="1364" fg:w="3"/><text x="29.9797%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (3 samples, 0.07%)</title><rect x="29.7297%" y="197" width="0.0654%" height="15" fill="rgb(214,47,5)" fg:x="1364" fg:w="3"/><text x="29.9797%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="29.7297%" y="181" width="0.0654%" height="15" fill="rgb(218,159,25)" fg:x="1364" fg:w="3"/><text x="29.9797%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.07%)</title><rect x="29.7297%" y="165" width="0.0654%" height="15" fill="rgb(215,211,28)" fg:x="1364" fg:w="3"/><text x="29.9797%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (2 samples, 0.04%)</title><rect x="29.7515%" y="149" width="0.0436%" height="15" fill="rgb(238,59,32)" fg:x="1365" fg:w="2"/><text x="30.0015%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="29.7733%" y="133" width="0.0218%" height="15" fill="rgb(226,82,3)" fg:x="1366" fg:w="1"/><text x="30.0233%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCacheBase::GetPerShardCapacity (1 samples, 0.02%)</title><rect x="29.7951%" y="245" width="0.0218%" height="15" fill="rgb(240,164,32)" fg:x="1367" fg:w="1"/><text x="30.0451%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCacheBase::GetCapacity (1 samples, 0.02%)</title><rect x="29.7951%" y="229" width="0.0218%" height="15" fill="rgb(232,46,7)" fg:x="1367" fg:w="1"/><text x="30.0451%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (1 samples, 0.02%)</title><rect x="29.7951%" y="213" width="0.0218%" height="15" fill="rgb(229,129,53)" fg:x="1367" fg:w="1"/><text x="30.0451%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="29.7951%" y="197" width="0.0218%" height="15" fill="rgb(234,188,29)" fg:x="1367" fg:w="1"/><text x="30.0451%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="29.8387%" y="229" width="0.0654%" height="15" fill="rgb(246,141,4)" fg:x="1369" fg:w="3"/><text x="30.0887%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.07%)</title><rect x="29.8387%" y="213" width="0.0654%" height="15" fill="rgb(229,23,39)" fg:x="1369" fg:w="3"/><text x="30.0887%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.04%)</title><rect x="29.8605%" y="197" width="0.0436%" height="15" fill="rgb(206,12,3)" fg:x="1370" fg:w="2"/><text x="30.1105%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="29.9041%" y="229" width="0.0218%" height="15" fill="rgb(252,226,20)" fg:x="1372" fg:w="1"/><text x="30.1541%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="29.9259%" y="229" width="0.0654%" height="15" fill="rgb(216,123,35)" fg:x="1373" fg:w="3"/><text x="30.1759%" y="239.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (5 samples, 0.11%)</title><rect x="29.9913%" y="229" width="0.1090%" height="15" fill="rgb(212,68,40)" fg:x="1376" fg:w="5"/><text x="30.2413%" y="239.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.02%)</title><rect x="30.1874%" y="213" width="0.0218%" height="15" fill="rgb(254,125,32)" fg:x="1385" fg:w="1"/><text x="30.4374%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::EvictFromLRU(unsigned long, rocksdb::autovector (2 samples, 0.04%)</title><rect x="30.2092%" y="213" width="0.0436%" height="15" fill="rgb(253,97,22)" fg:x="1386" fg:w="2"/><text x="30.4592%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::TryInsertIntoSecondaryCache(rocksdb::autovector (2 samples, 0.04%)</title><rect x="30.2528%" y="213" width="0.0436%" height="15" fill="rgb(241,101,14)" fg:x="1388" fg:w="2"/><text x="30.5028%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (3 samples, 0.07%)</title><rect x="30.2964%" y="213" width="0.0654%" height="15" fill="rgb(238,103,29)" fg:x="1390" fg:w="3"/><text x="30.5464%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.07%)</title><rect x="30.2964%" y="197" width="0.0654%" height="15" fill="rgb(233,195,47)" fg:x="1390" fg:w="3"/><text x="30.5464%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Unlock (3 samples, 0.07%)</title><rect x="30.3618%" y="213" width="0.0654%" height="15" fill="rgb(246,218,30)" fg:x="1393" fg:w="3"/><text x="30.6118%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.07%)</title><rect x="30.3618%" y="197" width="0.0654%" height="15" fill="rgb(219,145,47)" fg:x="1393" fg:w="3"/><text x="30.6118%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (19 samples, 0.41%)</title><rect x="30.1003%" y="229" width="0.4141%" height="15" fill="rgb(243,12,26)" fg:x="1381" fg:w="19"/><text x="30.3503%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;&gt;::value &amp;&amp; is_constructible&lt;rocksdb::lru_cache::LRUHandle*, std::__1::iterator_traits&lt;std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;&gt;::reference&gt;::value, void&gt;::type std::__1::vector&lt;rocksdb::lru_cache::LRUHandle*, std::__1::allocator&lt;rocksdb::lru_cache::LRUHandle*&gt;&gt;::assign&lt;std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;&gt;(std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;, std::__1::__wrap_iter (4 samples, 0.09%)</title><rect x="30.4272%" y="213" width="0.0872%" height="15" fill="rgb(214,87,16)" fg:x="1396" fg:w="4"/><text x="30.6772%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (48 samples, 1.05%)</title><rect x="29.5118%" y="293" width="1.0462%" height="15" fill="rgb(208,99,42)" fg:x="1354" fg:w="48"/><text x="29.7618%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (47 samples, 1.02%)</title><rect x="29.5336%" y="277" width="1.0244%" height="15" fill="rgb(253,99,2)" fg:x="1355" fg:w="47"/><text x="29.7836%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (46 samples, 1.00%)</title><rect x="29.5554%" y="261" width="1.0026%" height="15" fill="rgb(220,168,23)" fg:x="1356" fg:w="46"/><text x="29.8054%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (34 samples, 0.74%)</title><rect x="29.8169%" y="245" width="0.7411%" height="15" fill="rgb(242,38,24)" fg:x="1368" fg:w="34"/><text x="30.0669%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::TryInsertIntoSecondaryCache(rocksdb::autovector (2 samples, 0.04%)</title><rect x="30.5144%" y="229" width="0.0436%" height="15" fill="rgb(225,182,9)" fg:x="1400" fg:w="2"/><text x="30.7644%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (66 samples, 1.44%)</title><rect x="29.1412%" y="325" width="1.4385%" height="15" fill="rgb(243,178,37)" fg:x="1337" fg:w="66"/><text x="29.3912%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (49 samples, 1.07%)</title><rect x="29.5118%" y="309" width="1.0680%" height="15" fill="rgb(232,139,19)" fg:x="1354" fg:w="49"/><text x="29.7618%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="30.5580%" y="293" width="0.0218%" height="15" fill="rgb(225,201,24)" fg:x="1402" fg:w="1"/><text x="30.8080%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::BlockBasedTableOptions (1 samples, 0.02%)</title><rect x="30.5798%" y="325" width="0.0218%" height="15" fill="rgb(221,47,46)" fg:x="1403" fg:w="1"/><text x="30.8298%" y="335.50"></text></g><g><title>rusk-wallet`void std::__1::map&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions, std::__1::less&lt;rocksdb::CacheEntryRole&gt;, std::__1::allocator&lt;std::__1::pair&lt;rocksdb::CacheEntryRole const, rocksdb::CacheEntryRoleOptions&gt;&gt;&gt;::insert[abi:v15006]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, void*&gt;*, long&gt;&gt;&gt;(std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, void*&gt;*, long&gt;&gt;, std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, std::__1::__tree_node&lt;std::__1::__value_type (1 samples, 0.02%)</title><rect x="30.5798%" y="309" width="0.0218%" height="15" fill="rgb(249,23,13)" fg:x="1403" fg:w="1"/><text x="30.8298%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::RegisterOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="30.6016%" y="325" width="0.0218%" height="15" fill="rgb(219,9,5)" fg:x="1404" fg:w="1"/><text x="30.8516%" y="335.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::Configurable::RegisteredOptions, std::__1::allocator&lt;rocksdb::Configurable::RegisteredOptions&gt;&gt;::__emplace_back_slow_path&lt;rocksdb::Configurable::RegisteredOptions&amp;&gt; (1 samples, 0.02%)</title><rect x="30.6016%" y="309" width="0.0218%" height="15" fill="rgb(254,171,16)" fg:x="1404" fg:w="1"/><text x="30.8516%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="30.6016%" y="293" width="0.0218%" height="15" fill="rgb(230,171,20)" fg:x="1404" fg:w="1"/><text x="30.8516%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (81 samples, 1.77%)</title><rect x="28.8797%" y="357" width="1.7655%" height="15" fill="rgb(210,71,41)" fg:x="1325" fg:w="81"/><text x="29.1297%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (69 samples, 1.50%)</title><rect x="29.1412%" y="341" width="1.5039%" height="15" fill="rgb(206,173,20)" fg:x="1337" fg:w="69"/><text x="29.3912%" y="351.50"></text></g><g><title>rusk-wallet`void std::__1::__tree_balance_after_insert&lt;std::__1::__tree_node_base&lt;void*&gt;*&gt;(std::__1::__tree_node_base&lt;void*&gt;*, std::__1::__tree_node_base (1 samples, 0.02%)</title><rect x="30.6234%" y="325" width="0.0218%" height="15" fill="rgb(233,88,34)" fg:x="1405" fg:w="1"/><text x="30.8734%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="30.6452%" y="341" width="0.0436%" height="15" fill="rgb(223,209,46)" fg:x="1406" fg:w="2"/><text x="30.8952%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="30.6452%" y="325" width="0.0436%" height="15" fill="rgb(250,43,18)" fg:x="1406" fg:w="2"/><text x="30.8952%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="30.6670%" y="309" width="0.0218%" height="15" fill="rgb(208,13,10)" fg:x="1407" fg:w="1"/><text x="30.9170%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="30.6888%" y="293" width="0.0218%" height="15" fill="rgb(212,200,36)" fg:x="1408" fg:w="1"/><text x="30.9388%" y="303.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="30.7323%" y="277" width="0.0218%" height="15" fill="rgb(225,90,30)" fg:x="1410" fg:w="1"/><text x="30.9823%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="30.7541%" y="277" width="0.0218%" height="15" fill="rgb(236,182,39)" fg:x="1411" fg:w="1"/><text x="31.0041%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (5 samples, 0.11%)</title><rect x="30.7759%" y="277" width="0.1090%" height="15" fill="rgb(212,144,35)" fg:x="1412" fg:w="5"/><text x="31.0259%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="30.8195%" y="261" width="0.0654%" height="15" fill="rgb(228,63,44)" fg:x="1414" fg:w="3"/><text x="31.0695%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (10 samples, 0.22%)</title><rect x="30.7105%" y="293" width="0.2180%" height="15" fill="rgb(228,109,6)" fg:x="1409" fg:w="10"/><text x="30.9605%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*), std::__1::allocator&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*)&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (2 samples, 0.04%)</title><rect x="30.8849%" y="277" width="0.0436%" height="15" fill="rgb(238,117,24)" fg:x="1417" fg:w="2"/><text x="31.1349%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::~Mutex (2 samples, 0.04%)</title><rect x="30.8849%" y="261" width="0.0436%" height="15" fill="rgb(242,26,26)" fg:x="1417" fg:w="2"/><text x="31.1349%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (2 samples, 0.04%)</title><rect x="30.8849%" y="245" width="0.0436%" height="15" fill="rgb(221,92,48)" fg:x="1417" fg:w="2"/><text x="31.1349%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::TableReader::Prepare (1 samples, 0.02%)</title><rect x="30.9285%" y="293" width="0.0218%" height="15" fill="rgb(209,209,32)" fg:x="1419" fg:w="1"/><text x="31.1785%" y="303.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="30.9503%" y="277" width="0.0218%" height="15" fill="rgb(221,70,22)" fg:x="1420" fg:w="1"/><text x="31.2003%" y="287.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="30.9721%" y="261" width="0.0218%" height="15" fill="rgb(248,145,5)" fg:x="1421" fg:w="1"/><text x="31.2221%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="30.9939%" y="261" width="0.0218%" height="15" fill="rgb(226,116,26)" fg:x="1422" fg:w="1"/><text x="31.2439%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (18 samples, 0.39%)</title><rect x="30.6452%" y="357" width="0.3923%" height="15" fill="rgb(244,5,17)" fg:x="1406" fg:w="18"/><text x="30.8952%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (16 samples, 0.35%)</title><rect x="30.6888%" y="341" width="0.3487%" height="15" fill="rgb(252,159,33)" fg:x="1408" fg:w="16"/><text x="30.9388%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (16 samples, 0.35%)</title><rect x="30.6888%" y="325" width="0.3487%" height="15" fill="rgb(206,71,0)" fg:x="1408" fg:w="16"/><text x="30.9388%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (16 samples, 0.35%)</title><rect x="30.6888%" y="309" width="0.3487%" height="15" fill="rgb(233,118,54)" fg:x="1408" fg:w="16"/><text x="30.9388%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (4 samples, 0.09%)</title><rect x="30.9503%" y="293" width="0.0872%" height="15" fill="rgb(234,83,48)" fg:x="1420" fg:w="4"/><text x="31.2003%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (3 samples, 0.07%)</title><rect x="30.9721%" y="277" width="0.0654%" height="15" fill="rgb(228,3,54)" fg:x="1421" fg:w="3"/><text x="31.2221%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.02%)</title><rect x="31.0157%" y="261" width="0.0218%" height="15" fill="rgb(226,155,13)" fg:x="1423" fg:w="1"/><text x="31.2657%" y="271.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="31.0375%" y="341" width="0.0436%" height="15" fill="rgb(241,28,37)" fg:x="1424" fg:w="2"/><text x="31.2875%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (5 samples, 0.11%)</title><rect x="31.0811%" y="341" width="0.1090%" height="15" fill="rgb(233,93,10)" fg:x="1426" fg:w="5"/><text x="31.3311%" y="351.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (3 samples, 0.07%)</title><rect x="31.1901%" y="341" width="0.0654%" height="15" fill="rgb(225,113,19)" fg:x="1431" fg:w="3"/><text x="31.4401%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="31.2554%" y="341" width="0.0218%" height="15" fill="rgb(241,2,18)" fg:x="1434" fg:w="1"/><text x="31.5054%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="31.2772%" y="341" width="0.0436%" height="15" fill="rgb(228,207,21)" fg:x="1435" fg:w="2"/><text x="31.5272%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.22%)</title><rect x="31.3208%" y="341" width="0.2180%" height="15" fill="rgb(213,211,35)" fg:x="1437" fg:w="10"/><text x="31.5708%" y="351.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (3 samples, 0.07%)</title><rect x="31.5388%" y="341" width="0.0654%" height="15" fill="rgb(209,83,10)" fg:x="1447" fg:w="3"/><text x="31.7888%" y="351.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="31.6042%" y="325" width="0.0218%" height="15" fill="rgb(209,164,1)" fg:x="1450" fg:w="1"/><text x="31.8542%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="31.6260%" y="325" width="0.0654%" height="15" fill="rgb(213,184,43)" fg:x="1451" fg:w="3"/><text x="31.8760%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="31.6914%" y="325" width="0.0436%" height="15" fill="rgb(231,61,34)" fg:x="1454" fg:w="2"/><text x="31.9414%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="31.7350%" y="325" width="0.0218%" height="15" fill="rgb(235,75,3)" fg:x="1456" fg:w="1"/><text x="31.9850%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="31.7568%" y="325" width="0.0218%" height="15" fill="rgb(220,106,47)" fg:x="1457" fg:w="1"/><text x="32.0068%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.15%)</title><rect x="31.9311%" y="309" width="0.1526%" height="15" fill="rgb(210,196,33)" fg:x="1465" fg:w="7"/><text x="32.1811%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="32.0837%" y="309" width="0.0218%" height="15" fill="rgb(229,154,42)" fg:x="1472" fg:w="1"/><text x="32.3337%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="32.1055%" y="309" width="0.0872%" height="15" fill="rgb(228,114,26)" fg:x="1473" fg:w="4"/><text x="32.3555%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="32.1927%" y="309" width="0.0436%" height="15" fill="rgb(208,144,1)" fg:x="1477" fg:w="2"/><text x="32.4427%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::Name (1 samples, 0.02%)</title><rect x="32.2363%" y="309" width="0.0218%" height="15" fill="rgb(239,112,37)" fg:x="1479" fg:w="1"/><text x="32.4863%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="32.3017%" y="293" width="0.0436%" height="15" fill="rgb(210,96,50)" fg:x="1482" fg:w="2"/><text x="32.5517%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (9 samples, 0.20%)</title><rect x="32.3888%" y="277" width="0.1962%" height="15" fill="rgb(222,178,2)" fg:x="1486" fg:w="9"/><text x="32.6388%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::stod(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="32.5850%" y="277" width="0.0218%" height="15" fill="rgb(226,74,18)" fg:x="1495" fg:w="1"/><text x="32.8350%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="32.6068%" y="277" width="0.0218%" height="15" fill="rgb(225,67,54)" fg:x="1496" fg:w="1"/><text x="32.8568%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="32.6286%" y="277" width="0.0218%" height="15" fill="rgb(251,92,32)" fg:x="1497" fg:w="1"/><text x="32.8786%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (4 samples, 0.09%)</title><rect x="32.6504%" y="277" width="0.0872%" height="15" fill="rgb(228,149,22)" fg:x="1498" fg:w="4"/><text x="32.9004%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="32.7376%" y="261" width="0.0218%" height="15" fill="rgb(243,54,13)" fg:x="1502" fg:w="1"/><text x="32.9876%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="32.7594%" y="245" width="0.0218%" height="15" fill="rgb(243,180,28)" fg:x="1503" fg:w="1"/><text x="33.0094%" y="255.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="32.7812%" y="245" width="0.0218%" height="15" fill="rgb(208,167,24)" fg:x="1504" fg:w="1"/><text x="33.0312%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="32.8684%" y="229" width="0.0218%" height="15" fill="rgb(245,73,45)" fg:x="1508" fg:w="1"/><text x="33.1184%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="32.8684%" y="213" width="0.0218%" height="15" fill="rgb(237,203,48)" fg:x="1508" fg:w="1"/><text x="33.1184%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="32.8684%" y="197" width="0.0218%" height="15" fill="rgb(211,197,16)" fg:x="1508" fg:w="1"/><text x="33.1184%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="32.9119%" y="213" width="0.0218%" height="15" fill="rgb(243,99,51)" fg:x="1510" fg:w="1"/><text x="33.1619%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="32.9337%" y="213" width="0.0218%" height="15" fill="rgb(215,123,29)" fg:x="1511" fg:w="1"/><text x="33.1837%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (2 samples, 0.04%)</title><rect x="32.9555%" y="197" width="0.0436%" height="15" fill="rgb(239,186,37)" fg:x="1512" fg:w="2"/><text x="33.2055%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (10 samples, 0.22%)</title><rect x="32.8030%" y="245" width="0.2180%" height="15" fill="rgb(252,136,39)" fg:x="1505" fg:w="10"/><text x="33.0530%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="32.8901%" y="229" width="0.1308%" height="15" fill="rgb(223,213,32)" fg:x="1509" fg:w="6"/><text x="33.1401%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::PinningTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::PinningTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (3 samples, 0.07%)</title><rect x="32.9555%" y="213" width="0.0654%" height="15" fill="rgb(233,115,5)" fg:x="1512" fg:w="3"/><text x="33.2055%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="32.9991%" y="197" width="0.0218%" height="15" fill="rgb(207,226,44)" fg:x="1514" fg:w="1"/><text x="33.2491%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.0209%" y="229" width="0.0218%" height="15" fill="rgb(208,126,0)" fg:x="1515" fg:w="1"/><text x="33.2709%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="33.0209%" y="213" width="0.0218%" height="15" fill="rgb(244,66,21)" fg:x="1515" fg:w="1"/><text x="33.2709%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="33.0427%" y="229" width="0.0218%" height="15" fill="rgb(222,97,12)" fg:x="1516" fg:w="1"/><text x="33.2927%" y="239.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="33.0645%" y="229" width="0.0218%" height="15" fill="rgb(219,213,19)" fg:x="1517" fg:w="1"/><text x="33.3145%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="33.0863%" y="213" width="0.0218%" height="15" fill="rgb(252,169,30)" fg:x="1518" fg:w="1"/><text x="33.3363%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="33.0863%" y="229" width="0.0436%" height="15" fill="rgb(206,32,51)" fg:x="1518" fg:w="2"/><text x="33.3363%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.1081%" y="213" width="0.0218%" height="15" fill="rgb(250,172,42)" fg:x="1519" fg:w="1"/><text x="33.3581%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="33.1299%" y="229" width="0.0218%" height="15" fill="rgb(209,34,43)" fg:x="1520" fg:w="1"/><text x="33.3799%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.44%)</title><rect x="32.7376%" y="277" width="0.4359%" height="15" fill="rgb(223,11,35)" fg:x="1502" fg:w="20"/><text x="32.9876%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (19 samples, 0.41%)</title><rect x="32.7594%" y="261" width="0.4141%" height="15" fill="rgb(251,219,26)" fg:x="1503" fg:w="19"/><text x="33.0094%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="33.0209%" y="245" width="0.1526%" height="15" fill="rgb(231,119,3)" fg:x="1515" fg:w="7"/><text x="33.2709%" y="255.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.1517%" y="229" width="0.0218%" height="15" fill="rgb(216,97,11)" fg:x="1521" fg:w="1"/><text x="33.4017%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.1517%" y="213" width="0.0218%" height="15" fill="rgb(223,59,9)" fg:x="1521" fg:w="1"/><text x="33.4017%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="33.1517%" y="197" width="0.0218%" height="15" fill="rgb(233,93,31)" fg:x="1521" fg:w="1"/><text x="33.4017%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="33.1517%" y="181" width="0.0218%" height="15" fill="rgb(239,81,33)" fg:x="1521" fg:w="1"/><text x="33.4017%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::ParseBoolean(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.1735%" y="277" width="0.0218%" height="15" fill="rgb(213,120,34)" fg:x="1522" fg:w="1"/><text x="33.4235%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="33.2171%" y="261" width="0.0654%" height="15" fill="rgb(243,49,53)" fg:x="1524" fg:w="3"/><text x="33.4671%" y="271.50"></text></g><g><title>libsystem_c.dylib`strtol_l (2 samples, 0.04%)</title><rect x="33.2389%" y="245" width="0.0436%" height="15" fill="rgb(247,216,33)" fg:x="1525" fg:w="2"/><text x="33.4889%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="33.1953%" y="277" width="0.1308%" height="15" fill="rgb(226,26,14)" fg:x="1523" fg:w="6"/><text x="33.4453%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__error (2 samples, 0.04%)</title><rect x="33.2825%" y="261" width="0.0436%" height="15" fill="rgb(215,49,53)" fg:x="1527" fg:w="2"/><text x="33.5325%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:v15006]&lt;std::nullptr_t&gt; (1 samples, 0.02%)</title><rect x="33.3261%" y="245" width="0.0218%" height="15" fill="rgb(245,162,40)" fg:x="1529" fg:w="1"/><text x="33.5761%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="33.3261%" y="277" width="0.0654%" height="15" fill="rgb(229,68,17)" fg:x="1529" fg:w="3"/><text x="33.5761%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::stoull(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="33.3261%" y="261" width="0.0654%" height="15" fill="rgb(213,182,10)" fg:x="1529" fg:w="3"/><text x="33.5761%" y="271.50"></text></g><g><title>libsystem_c.dylib`strtoull_l (2 samples, 0.04%)</title><rect x="33.3479%" y="245" width="0.0436%" height="15" fill="rgb(245,125,30)" fg:x="1530" fg:w="2"/><text x="33.5979%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by (1 samples, 0.02%)</title><rect x="33.6094%" y="245" width="0.0218%" height="15" fill="rgb(232,202,2)" fg:x="1542" fg:w="1"/><text x="33.8594%" y="255.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="33.6094%" y="229" width="0.0218%" height="15" fill="rgb(237,140,51)" fg:x="1542" fg:w="1"/><text x="33.8594%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.26%)</title><rect x="33.3915%" y="277" width="0.2616%" height="15" fill="rgb(236,157,25)" fg:x="1532" fg:w="12"/><text x="33.6415%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (6 samples, 0.13%)</title><rect x="33.5222%" y="261" width="0.1308%" height="15" fill="rgb(219,209,0)" fg:x="1538" fg:w="6"/><text x="33.7722%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="33.6312%" y="245" width="0.0218%" height="15" fill="rgb(240,116,54)" fg:x="1543" fg:w="1"/><text x="33.8812%" y="255.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::PrepopulateBlockCache&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::PrepopulateBlockCache&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::PrepopulateBlockCache&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="33.6530%" y="277" width="0.0218%" height="15" fill="rgb(216,10,36)" fg:x="1544" fg:w="1"/><text x="33.9030%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (62 samples, 1.35%)</title><rect x="32.3452%" y="293" width="1.3514%" height="15" fill="rgb(222,72,44)" fg:x="1484" fg:w="62"/><text x="32.5952%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ChecksumType&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ChecksumType&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ChecksumType&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="33.6748%" y="277" width="0.0218%" height="15" fill="rgb(232,159,9)" fg:x="1545" fg:w="1"/><text x="33.9248%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::IndexType&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexType, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::IndexType&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.6966%" y="293" width="0.0218%" height="15" fill="rgb(210,39,32)" fg:x="1546" fg:w="1"/><text x="33.9466%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.7184%" y="293" width="0.0218%" height="15" fill="rgb(216,194,45)" fg:x="1547" fg:w="1"/><text x="33.9684%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (69 samples, 1.50%)</title><rect x="32.2581%" y="309" width="1.5039%" height="15" fill="rgb(218,18,35)" fg:x="1480" fg:w="69"/><text x="32.5081%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::DataBlockIndexType, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator (1 samples, 0.02%)</title><rect x="33.7402%" y="293" width="0.0218%" height="15" fill="rgb(207,83,51)" fg:x="1548" fg:w="1"/><text x="33.9902%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="33.7620%" y="261" width="0.0218%" height="15" fill="rgb(225,63,43)" fg:x="1549" fg:w="1"/><text x="34.0120%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::FilterPolicy::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="33.7838%" y="261" width="0.0218%" height="15" fill="rgb(207,57,36)" fg:x="1550" fg:w="1"/><text x="34.0338%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="33.8056%" y="245" width="0.0218%" height="15" fill="rgb(216,99,33)" fg:x="1551" fg:w="1"/><text x="34.0556%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="33.8274%" y="245" width="0.0218%" height="15" fill="rgb(225,42,16)" fg:x="1552" fg:w="1"/><text x="34.0774%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="33.8492%" y="229" width="0.0218%" height="15" fill="rgb(220,201,45)" fg:x="1553" fg:w="1"/><text x="34.0992%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionsMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.8710%" y="229" width="0.0218%" height="15" fill="rgb(225,33,4)" fg:x="1554" fg:w="1"/><text x="34.1210%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetId (1 samples, 0.02%)</title><rect x="33.8928%" y="229" width="0.0218%" height="15" fill="rgb(224,33,50)" fg:x="1555" fg:w="1"/><text x="34.1428%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="33.8928%" y="213" width="0.0218%" height="15" fill="rgb(246,198,51)" fg:x="1555" fg:w="1"/><text x="34.1428%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="33.8492%" y="245" width="0.0872%" height="15" fill="rgb(205,22,4)" fg:x="1553" fg:w="4"/><text x="34.0992%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.9146%" y="229" width="0.0218%" height="15" fill="rgb(206,3,8)" fg:x="1556" fg:w="1"/><text x="34.1646%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="33.9364%" y="197" width="0.0436%" height="15" fill="rgb(251,23,15)" fg:x="1557" fg:w="2"/><text x="34.1864%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewSharedObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="33.9364%" y="245" width="0.0654%" height="15" fill="rgb(252,88,28)" fg:x="1557" fg:w="3"/><text x="34.1864%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FlushBlockPolicyFactory**, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete (3 samples, 0.07%)</title><rect x="33.9364%" y="229" width="0.0654%" height="15" fill="rgb(212,127,14)" fg:x="1557" fg:w="3"/><text x="34.1864%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::function&lt;rocksdb::FlushBlockPolicyFactory* (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete&lt;rocksdb::FlushBlockPolicyFactory&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt; rocksdb::ObjectLibrary::FindFactory&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="33.9364%" y="213" width="0.0654%" height="15" fill="rgb(247,145,37)" fg:x="1557" fg:w="3"/><text x="34.1864%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::ObjectLibrary::PatternEntry::Matches(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="33.9799%" y="197" width="0.0218%" height="15" fill="rgb(209,117,53)" fg:x="1559" fg:w="1"/><text x="34.2299%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="33.9799%" y="181" width="0.0218%" height="15" fill="rgb(212,90,42)" fg:x="1559" fg:w="1"/><text x="34.2299%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::FlushBlockPolicyFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (10 samples, 0.22%)</title><rect x="33.8056%" y="261" width="0.2180%" height="15" fill="rgb(218,164,37)" fg:x="1551" fg:w="10"/><text x="34.0556%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_pointer&lt;rocksdb::Statistics*, std::__1::shared_ptr&lt;rocksdb::Statistics&gt;::__shared_ptr_default_delete&lt;rocksdb::Statistics, rocksdb::Statistics&gt;, std::__1::allocator&lt;rocksdb::Statistics&gt;&gt;::__on_zero_shared (1 samples, 0.02%)</title><rect x="34.0017%" y="245" width="0.0218%" height="15" fill="rgb(246,65,34)" fg:x="1560" fg:w="1"/><text x="34.2517%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="33.7620%" y="309" width="0.3269%" height="15" fill="rgb(231,100,33)" fg:x="1549" fg:w="15"/><text x="34.0120%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="33.7620%" y="293" width="0.3269%" height="15" fill="rgb(228,126,14)" fg:x="1549" fg:w="15"/><text x="34.0120%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="33.7620%" y="277" width="0.3269%" height="15" fill="rgb(215,173,21)" fg:x="1549" fg:w="15"/><text x="34.0120%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="34.0235%" y="261" width="0.0654%" height="15" fill="rgb(210,6,40)" fg:x="1561" fg:w="3"/><text x="34.2735%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (2 samples, 0.04%)</title><rect x="34.0453%" y="245" width="0.0436%" height="15" fill="rgb(212,48,18)" fg:x="1562" fg:w="2"/><text x="34.2953%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="34.0889%" y="309" width="0.0218%" height="15" fill="rgb(230,214,11)" fg:x="1564" fg:w="1"/><text x="34.3389%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="34.3505%" y="293" width="0.0218%" height="15" fill="rgb(254,105,39)" fg:x="1576" fg:w="1"/><text x="34.6005%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="34.3941%" y="261" width="0.0218%" height="15" fill="rgb(245,158,5)" fg:x="1578" fg:w="1"/><text x="34.6441%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="34.3723%" y="293" width="0.0872%" height="15" fill="rgb(249,208,11)" fg:x="1577" fg:w="4"/><text x="34.6223%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (3 samples, 0.07%)</title><rect x="34.3941%" y="277" width="0.0654%" height="15" fill="rgb(210,39,28)" fg:x="1578" fg:w="3"/><text x="34.6441%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="34.4159%" y="261" width="0.0436%" height="15" fill="rgb(211,56,53)" fg:x="1579" fg:w="2"/><text x="34.6659%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionName(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.44%)</title><rect x="34.1107%" y="309" width="0.4359%" height="15" fill="rgb(226,201,30)" fg:x="1565" fg:w="20"/><text x="34.3607%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="34.4595%" y="293" width="0.0872%" height="15" fill="rgb(239,101,34)" fg:x="1581" fg:w="4"/><text x="34.7095%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;false&gt; (3 samples, 0.07%)</title><rect x="34.5684%" y="293" width="0.0654%" height="15" fill="rgb(226,209,5)" fg:x="1586" fg:w="3"/><text x="34.8184%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="34.6120%" y="277" width="0.0218%" height="15" fill="rgb(250,105,47)" fg:x="1588" fg:w="1"/><text x="34.8620%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="34.6120%" y="261" width="0.0218%" height="15" fill="rgb(230,72,3)" fg:x="1588" fg:w="1"/><text x="34.8620%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="34.6338%" y="293" width="0.0872%" height="15" fill="rgb(232,218,39)" fg:x="1589" fg:w="4"/><text x="34.8838%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (12 samples, 0.26%)</title><rect x="34.7210%" y="293" width="0.2616%" height="15" fill="rgb(248,166,6)" fg:x="1593" fg:w="12"/><text x="34.9710%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (22 samples, 0.48%)</title><rect x="34.5466%" y="309" width="0.4795%" height="15" fill="rgb(247,89,20)" fg:x="1585" fg:w="22"/><text x="34.7966%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (2 samples, 0.04%)</title><rect x="34.9826%" y="293" width="0.0436%" height="15" fill="rgb(248,130,54)" fg:x="1605" fg:w="2"/><text x="35.2326%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (151 samples, 3.29%)</title><rect x="31.7786%" y="325" width="3.2912%" height="15" fill="rgb(234,196,4)" fg:x="1458" fg:w="151"/><text x="32.0286%" y="335.50">rus..</text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (2 samples, 0.04%)</title><rect x="35.0262%" y="309" width="0.0436%" height="15" fill="rgb(250,143,31)" fg:x="1607" fg:w="2"/><text x="35.2762%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="35.0697%" y="325" width="0.0218%" height="15" fill="rgb(211,110,34)" fg:x="1609" fg:w="1"/><text x="35.3197%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="35.0915%" y="325" width="0.0218%" height="15" fill="rgb(215,124,48)" fg:x="1610" fg:w="1"/><text x="35.3415%" y="335.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="35.1351%" y="309" width="0.0218%" height="15" fill="rgb(216,46,13)" fg:x="1612" fg:w="1"/><text x="35.3851%" y="319.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="35.1569%" y="309" width="0.0218%" height="15" fill="rgb(205,184,25)" fg:x="1613" fg:w="1"/><text x="35.4069%" y="319.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="35.1787%" y="309" width="0.0218%" height="15" fill="rgb(228,1,10)" fg:x="1614" fg:w="1"/><text x="35.4287%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (4 samples, 0.09%)</title><rect x="35.2005%" y="309" width="0.0872%" height="15" fill="rgb(213,116,27)" fg:x="1615" fg:w="4"/><text x="35.4505%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="35.4185%" y="261" width="0.0218%" height="15" fill="rgb(241,95,50)" fg:x="1625" fg:w="1"/><text x="35.6685%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="35.3749%" y="293" width="0.0872%" height="15" fill="rgb(238,48,32)" fg:x="1623" fg:w="4"/><text x="35.6249%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (3 samples, 0.07%)</title><rect x="35.3967%" y="277" width="0.0654%" height="15" fill="rgb(235,113,49)" fg:x="1624" fg:w="3"/><text x="35.6467%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="35.4403%" y="261" width="0.0218%" height="15" fill="rgb(205,127,43)" fg:x="1626" fg:w="1"/><text x="35.6903%" y="271.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="35.4621%" y="293" width="0.0218%" height="15" fill="rgb(250,162,2)" fg:x="1627" fg:w="1"/><text x="35.7121%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="35.4839%" y="293" width="0.0218%" height="15" fill="rgb(220,13,41)" fg:x="1628" fg:w="1"/><text x="35.7339%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="35.4839%" y="277" width="0.0218%" height="15" fill="rgb(249,221,25)" fg:x="1628" fg:w="1"/><text x="35.7339%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="35.4839%" y="261" width="0.0218%" height="15" fill="rgb(215,208,19)" fg:x="1628" fg:w="1"/><text x="35.7339%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="35.5057%" y="293" width="0.0218%" height="15" fill="rgb(236,175,2)" fg:x="1629" fg:w="1"/><text x="35.7557%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.11%)</title><rect x="35.5275%" y="293" width="0.1090%" height="15" fill="rgb(241,52,2)" fg:x="1630" fg:w="5"/><text x="35.7775%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (17 samples, 0.37%)</title><rect x="35.2877%" y="309" width="0.3705%" height="15" fill="rgb(248,140,14)" fg:x="1619" fg:w="17"/><text x="35.5377%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="35.6364%" y="293" width="0.0218%" height="15" fill="rgb(253,22,42)" fg:x="1635" fg:w="1"/><text x="35.8864%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="35.7236%" y="245" width="0.0218%" height="15" fill="rgb(234,61,47)" fg:x="1639" fg:w="1"/><text x="35.9736%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (191 samples, 4.16%)</title><rect x="31.6042%" y="341" width="4.1630%" height="15" fill="rgb(208,226,15)" fg:x="1450" fg:w="191"/><text x="31.8542%" y="351.50">rusk-..</text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (30 samples, 0.65%)</title><rect x="35.1133%" y="325" width="0.6539%" height="15" fill="rgb(217,221,4)" fg:x="1611" fg:w="30"/><text x="35.3633%" y="335.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="35.6582%" y="309" width="0.1090%" height="15" fill="rgb(212,174,34)" fg:x="1636" fg:w="5"/><text x="35.9082%" y="319.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (4 samples, 0.09%)</title><rect x="35.6800%" y="293" width="0.0872%" height="15" fill="rgb(253,83,4)" fg:x="1637" fg:w="4"/><text x="35.9300%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.09%)</title><rect x="35.6800%" y="277" width="0.0872%" height="15" fill="rgb(250,195,49)" fg:x="1637" fg:w="4"/><text x="35.9300%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.09%)</title><rect x="35.6800%" y="261" width="0.0872%" height="15" fill="rgb(241,192,25)" fg:x="1637" fg:w="4"/><text x="35.9300%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="35.7454%" y="245" width="0.0218%" height="15" fill="rgb(208,124,10)" fg:x="1640" fg:w="1"/><text x="35.9954%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="35.8762%" y="325" width="0.0218%" height="15" fill="rgb(222,33,0)" fg:x="1646" fg:w="1"/><text x="36.1262%" y="335.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="36.0288%" y="309" width="0.0218%" height="15" fill="rgb(234,209,28)" fg:x="1653" fg:w="1"/><text x="36.2788%" y="319.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="36.1160%" y="293" width="0.0218%" height="15" fill="rgb(224,11,23)" fg:x="1657" fg:w="1"/><text x="36.3660%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="36.1378%" y="261" width="0.0218%" height="15" fill="rgb(232,99,1)" fg:x="1658" fg:w="1"/><text x="36.3878%" y="271.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="36.1378%" y="293" width="0.0436%" height="15" fill="rgb(237,95,45)" fg:x="1658" fg:w="2"/><text x="36.3878%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="36.1378%" y="277" width="0.0436%" height="15" fill="rgb(208,109,11)" fg:x="1658" fg:w="2"/><text x="36.3878%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="36.1595%" y="261" width="0.0218%" height="15" fill="rgb(216,190,48)" fg:x="1659" fg:w="1"/><text x="36.4095%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="36.1595%" y="245" width="0.0218%" height="15" fill="rgb(251,171,36)" fg:x="1659" fg:w="1"/><text x="36.4095%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="36.1813%" y="293" width="0.0218%" height="15" fill="rgb(230,62,22)" fg:x="1660" fg:w="1"/><text x="36.4313%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="36.2031%" y="293" width="0.0436%" height="15" fill="rgb(225,114,35)" fg:x="1661" fg:w="2"/><text x="36.4531%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.11%)</title><rect x="36.2467%" y="293" width="0.1090%" height="15" fill="rgb(215,118,42)" fg:x="1663" fg:w="5"/><text x="36.4967%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (15 samples, 0.33%)</title><rect x="36.0506%" y="309" width="0.3269%" height="15" fill="rgb(243,119,21)" fg:x="1654" fg:w="15"/><text x="36.3006%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="36.3557%" y="293" width="0.0218%" height="15" fill="rgb(252,177,53)" fg:x="1668" fg:w="1"/><text x="36.6057%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="36.3775%" y="309" width="0.0218%" height="15" fill="rgb(237,209,29)" fg:x="1669" fg:w="1"/><text x="36.6275%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="36.3993%" y="309" width="0.0436%" height="15" fill="rgb(212,65,23)" fg:x="1670" fg:w="2"/><text x="36.6493%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (32 samples, 0.70%)</title><rect x="35.8980%" y="325" width="0.6975%" height="15" fill="rgb(230,222,46)" fg:x="1647" fg:w="32"/><text x="36.1480%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.15%)</title><rect x="36.4429%" y="309" width="0.1526%" height="15" fill="rgb(215,135,32)" fg:x="1672" fg:w="7"/><text x="36.6929%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="36.5955%" y="325" width="0.0436%" height="15" fill="rgb(246,101,22)" fg:x="1679" fg:w="2"/><text x="36.8455%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="36.6391%" y="325" width="0.0654%" height="15" fill="rgb(206,107,13)" fg:x="1681" fg:w="3"/><text x="36.8891%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="36.7044%" y="325" width="0.0218%" height="15" fill="rgb(250,100,44)" fg:x="1684" fg:w="1"/><text x="36.9544%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="36.7262%" y="325" width="0.0436%" height="15" fill="rgb(231,147,38)" fg:x="1685" fg:w="2"/><text x="36.9762%" y="335.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.07%)</title><rect x="36.7698%" y="325" width="0.0654%" height="15" fill="rgb(229,8,40)" fg:x="1687" fg:w="3"/><text x="37.0198%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="36.8352%" y="325" width="0.0436%" height="15" fill="rgb(221,135,30)" fg:x="1690" fg:w="2"/><text x="37.0852%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="36.8788%" y="325" width="0.0436%" height="15" fill="rgb(249,193,18)" fg:x="1692" fg:w="2"/><text x="37.1288%" y="335.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="36.9224%" y="325" width="0.0436%" height="15" fill="rgb(209,133,39)" fg:x="1694" fg:w="2"/><text x="37.1724%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="36.9878%" y="309" width="0.0218%" height="15" fill="rgb(232,100,14)" fg:x="1697" fg:w="1"/><text x="37.2378%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="36.9878%" y="293" width="0.0218%" height="15" fill="rgb(224,185,1)" fg:x="1697" fg:w="1"/><text x="37.2378%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="36.9878%" y="277" width="0.0218%" height="15" fill="rgb(223,139,8)" fg:x="1697" fg:w="1"/><text x="37.2378%" y="287.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memchr (1 samples, 0.02%)</title><rect x="37.0096%" y="277" width="0.0218%" height="15" fill="rgb(232,213,38)" fg:x="1698" fg:w="1"/><text x="37.2596%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="37.0314%" y="261" width="0.0218%" height="15" fill="rgb(207,94,22)" fg:x="1699" fg:w="1"/><text x="37.2814%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (4 samples, 0.09%)</title><rect x="37.0096%" y="309" width="0.0872%" height="15" fill="rgb(219,183,54)" fg:x="1698" fg:w="4"/><text x="37.2596%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="37.0096%" y="293" width="0.0872%" height="15" fill="rgb(216,185,54)" fg:x="1698" fg:w="4"/><text x="37.2596%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="37.0314%" y="277" width="0.0654%" height="15" fill="rgb(254,217,39)" fg:x="1699" fg:w="3"/><text x="37.2814%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetId (2 samples, 0.04%)</title><rect x="37.0532%" y="261" width="0.0436%" height="15" fill="rgb(240,178,23)" fg:x="1700" fg:w="2"/><text x="37.3032%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="37.0750%" y="245" width="0.0218%" height="15" fill="rgb(218,11,47)" fg:x="1701" fg:w="1"/><text x="37.3250%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="37.1186%" y="293" width="0.0218%" height="15" fill="rgb(218,51,51)" fg:x="1703" fg:w="1"/><text x="37.3686%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (3 samples, 0.07%)</title><rect x="37.1404%" y="261" width="0.0654%" height="15" fill="rgb(238,126,27)" fg:x="1704" fg:w="3"/><text x="37.3904%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="37.1840%" y="245" width="0.0218%" height="15" fill="rgb(249,202,22)" fg:x="1706" fg:w="1"/><text x="37.4340%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="37.0968%" y="309" width="0.1308%" height="15" fill="rgb(254,195,49)" fg:x="1702" fg:w="6"/><text x="37.3468%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="37.1404%" y="293" width="0.0872%" height="15" fill="rgb(208,123,14)" fg:x="1704" fg:w="4"/><text x="37.3904%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="37.1404%" y="277" width="0.0872%" height="15" fill="rgb(224,200,8)" fg:x="1704" fg:w="4"/><text x="37.3904%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="37.2058%" y="261" width="0.0218%" height="15" fill="rgb(217,61,36)" fg:x="1707" fg:w="1"/><text x="37.4558%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.02%)</title><rect x="37.2276%" y="293" width="0.0218%" height="15" fill="rgb(206,35,45)" fg:x="1708" fg:w="1"/><text x="37.4776%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::(anonymous namespace)::initial_string&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator() (1 samples, 0.02%)</title><rect x="37.2929%" y="277" width="0.0218%" height="15" fill="rgb(217,65,33)" fg:x="1711" fg:w="1"/><text x="37.5429%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="37.2929%" y="261" width="0.0218%" height="15" fill="rgb(222,158,48)" fg:x="1711" fg:w="1"/><text x="37.5429%" y="271.50"></text></g><g><title>libsystem_c.dylib`DYLD-STUB$$os_unfair_lock_lock (1 samples, 0.02%)</title><rect x="37.3365%" y="229" width="0.0218%" height="15" fill="rgb(254,2,54)" fg:x="1713" fg:w="1"/><text x="37.5865%" y="239.50"></text></g><g><title>libsystem_c.dylib`__dtoa (2 samples, 0.04%)</title><rect x="37.3583%" y="229" width="0.0436%" height="15" fill="rgb(250,143,38)" fg:x="1714" fg:w="2"/><text x="37.6083%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (8 samples, 0.17%)</title><rect x="37.2493%" y="293" width="0.1744%" height="15" fill="rgb(248,25,0)" fg:x="1709" fg:w="8"/><text x="37.4993%" y="303.50"></text></g><g><title>libsystem_c.dylib`snprintf (5 samples, 0.11%)</title><rect x="37.3147%" y="277" width="0.1090%" height="15" fill="rgb(206,152,27)" fg:x="1712" fg:w="5"/><text x="37.5647%" y="287.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (5 samples, 0.11%)</title><rect x="37.3147%" y="261" width="0.1090%" height="15" fill="rgb(240,77,30)" fg:x="1712" fg:w="5"/><text x="37.5647%" y="271.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (5 samples, 0.11%)</title><rect x="37.3147%" y="245" width="0.1090%" height="15" fill="rgb(231,5,3)" fg:x="1712" fg:w="5"/><text x="37.5647%" y="255.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (1 samples, 0.02%)</title><rect x="37.4019%" y="229" width="0.0218%" height="15" fill="rgb(207,226,32)" fg:x="1716" fg:w="1"/><text x="37.6519%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="37.2276%" y="309" width="0.2398%" height="15" fill="rgb(222,207,47)" fg:x="1708" fg:w="11"/><text x="37.4776%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="37.4237%" y="293" width="0.0436%" height="15" fill="rgb(229,115,45)" fg:x="1717" fg:w="2"/><text x="37.6737%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (80 samples, 1.74%)</title><rect x="35.7672%" y="341" width="1.7437%" height="15" fill="rgb(224,191,6)" fg:x="1641" fg:w="80"/><text x="36.0172%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (25 samples, 0.54%)</title><rect x="36.9660%" y="325" width="0.5449%" height="15" fill="rgb(230,227,24)" fg:x="1696" fg:w="25"/><text x="37.2160%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::CacheTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CacheTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::CacheTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.04%)</title><rect x="37.4673%" y="309" width="0.0436%" height="15" fill="rgb(228,80,19)" fg:x="1719" fg:w="2"/><text x="37.7173%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (298 samples, 6.50%)</title><rect x="31.0375%" y="357" width="6.4952%" height="15" fill="rgb(247,229,0)" fg:x="1424" fg:w="298"/><text x="31.2875%" y="367.50">rusk-wall..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="37.5109%" y="341" width="0.0218%" height="15" fill="rgb(237,194,15)" fg:x="1721" fg:w="1"/><text x="37.7609%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="37.5327%" y="341" width="0.0218%" height="15" fill="rgb(219,203,20)" fg:x="1722" fg:w="1"/><text x="37.7827%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="37.5545%" y="325" width="0.0218%" height="15" fill="rgb(234,128,8)" fg:x="1723" fg:w="1"/><text x="37.8045%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="37.5545%" y="309" width="0.0218%" height="15" fill="rgb(248,202,8)" fg:x="1723" fg:w="1"/><text x="37.8045%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="37.5763%" y="309" width="0.0218%" height="15" fill="rgb(206,104,37)" fg:x="1724" fg:w="1"/><text x="37.8263%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="37.5981%" y="309" width="0.0218%" height="15" fill="rgb(223,8,27)" fg:x="1725" fg:w="1"/><text x="37.8481%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="37.6199%" y="309" width="0.0218%" height="15" fill="rgb(216,217,28)" fg:x="1726" fg:w="1"/><text x="37.8699%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::RegisterOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="37.6417%" y="309" width="0.0218%" height="15" fill="rgb(249,199,1)" fg:x="1727" fg:w="1"/><text x="37.8917%" y="319.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::Configurable::RegisteredOptions, std::__1::allocator&lt;rocksdb::Configurable::RegisteredOptions&gt;&gt;::__emplace_back_slow_path&lt;rocksdb::Configurable::RegisteredOptions&amp;&gt; (1 samples, 0.02%)</title><rect x="37.6417%" y="293" width="0.0218%" height="15" fill="rgb(240,85,17)" fg:x="1727" fg:w="1"/><text x="37.8917%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::CFOptionsAsConfigurable(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="37.5545%" y="341" width="0.1744%" height="15" fill="rgb(206,108,45)" fg:x="1723" fg:w="8"/><text x="37.8045%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigurableCFOptions(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="37.5763%" y="325" width="0.1526%" height="15" fill="rgb(245,210,41)" fg:x="1724" fg:w="7"/><text x="37.8263%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::MutableCFOptions (3 samples, 0.07%)</title><rect x="37.6635%" y="309" width="0.0654%" height="15" fill="rgb(206,13,37)" fg:x="1728" fg:w="3"/><text x="37.9135%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::RefreshDerivedOptions (1 samples, 0.02%)</title><rect x="37.7071%" y="293" width="0.0218%" height="15" fill="rgb(250,61,18)" fg:x="1730" fg:w="1"/><text x="37.9571%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="37.7071%" y="277" width="0.0218%" height="15" fill="rgb(235,172,48)" fg:x="1730" fg:w="1"/><text x="37.9571%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="37.7289%" y="293" width="0.0218%" height="15" fill="rgb(249,201,17)" fg:x="1731" fg:w="1"/><text x="37.9789%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="37.7507%" y="261" width="0.0218%" height="15" fill="rgb(219,208,6)" fg:x="1732" fg:w="1"/><text x="38.0007%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (1 samples, 0.02%)</title><rect x="37.7724%" y="261" width="0.0218%" height="15" fill="rgb(248,31,23)" fg:x="1733" fg:w="1"/><text x="38.0224%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="37.7724%" y="245" width="0.0218%" height="15" fill="rgb(245,15,42)" fg:x="1733" fg:w="1"/><text x="38.0224%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (3 samples, 0.07%)</title><rect x="37.7507%" y="277" width="0.0654%" height="15" fill="rgb(222,217,39)" fg:x="1732" fg:w="3"/><text x="38.0007%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*), std::__1::allocator&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*)&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="37.7942%" y="261" width="0.0218%" height="15" fill="rgb(210,219,27)" fg:x="1734" fg:w="1"/><text x="38.0442%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::~Mutex (1 samples, 0.02%)</title><rect x="37.7942%" y="245" width="0.0218%" height="15" fill="rgb(252,166,36)" fg:x="1734" fg:w="1"/><text x="38.0442%" y="255.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.02%)</title><rect x="37.7942%" y="229" width="0.0218%" height="15" fill="rgb(245,132,34)" fg:x="1734" fg:w="1"/><text x="38.0442%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="37.8160%" y="229" width="0.0218%" height="15" fill="rgb(236,54,3)" fg:x="1735" fg:w="1"/><text x="38.0660%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="37.8378%" y="229" width="0.0218%" height="15" fill="rgb(241,173,43)" fg:x="1736" fg:w="1"/><text x="38.0878%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="37.8596%" y="229" width="0.0218%" height="15" fill="rgb(215,190,9)" fg:x="1737" fg:w="1"/><text x="38.1096%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="37.8814%" y="213" width="0.0218%" height="15" fill="rgb(242,101,16)" fg:x="1738" fg:w="1"/><text x="38.1314%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="37.9032%" y="213" width="0.0218%" height="15" fill="rgb(223,190,21)" fg:x="1739" fg:w="1"/><text x="38.1532%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::operator= (10 samples, 0.22%)</title><rect x="37.7289%" y="341" width="0.2180%" height="15" fill="rgb(215,228,25)" fg:x="1731" fg:w="10"/><text x="37.9789%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (10 samples, 0.22%)</title><rect x="37.7289%" y="325" width="0.2180%" height="15" fill="rgb(225,36,22)" fg:x="1731" fg:w="10"/><text x="37.9789%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (10 samples, 0.22%)</title><rect x="37.7289%" y="309" width="0.2180%" height="15" fill="rgb(251,106,46)" fg:x="1731" fg:w="10"/><text x="37.9789%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (9 samples, 0.20%)</title><rect x="37.7507%" y="293" width="0.1962%" height="15" fill="rgb(208,90,1)" fg:x="1732" fg:w="9"/><text x="38.0007%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (6 samples, 0.13%)</title><rect x="37.8160%" y="277" width="0.1308%" height="15" fill="rgb(243,10,4)" fg:x="1735" fg:w="6"/><text x="38.0660%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (6 samples, 0.13%)</title><rect x="37.8160%" y="261" width="0.1308%" height="15" fill="rgb(212,137,27)" fg:x="1735" fg:w="6"/><text x="38.0660%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (6 samples, 0.13%)</title><rect x="37.8160%" y="245" width="0.1308%" height="15" fill="rgb(231,220,49)" fg:x="1735" fg:w="6"/><text x="38.0660%" y="255.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (3 samples, 0.07%)</title><rect x="37.8814%" y="229" width="0.0654%" height="15" fill="rgb(237,96,20)" fg:x="1738" fg:w="3"/><text x="38.1314%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.02%)</title><rect x="37.9250%" y="213" width="0.0218%" height="15" fill="rgb(239,229,30)" fg:x="1740" fg:w="1"/><text x="38.1750%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="37.9468%" y="325" width="0.0436%" height="15" fill="rgb(219,65,33)" fg:x="1741" fg:w="2"/><text x="38.1968%" y="335.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="37.9904%" y="325" width="0.0218%" height="15" fill="rgb(243,134,7)" fg:x="1743" fg:w="1"/><text x="38.2404%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.15%)</title><rect x="38.0122%" y="325" width="0.1526%" height="15" fill="rgb(216,177,54)" fg:x="1744" fg:w="7"/><text x="38.2622%" y="335.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (4 samples, 0.09%)</title><rect x="38.1648%" y="325" width="0.0872%" height="15" fill="rgb(211,160,20)" fg:x="1751" fg:w="4"/><text x="38.4148%" y="335.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="38.2520%" y="325" width="0.1090%" height="15" fill="rgb(239,85,39)" fg:x="1755" fg:w="5"/><text x="38.5020%" y="335.50"></text></g><g><title>libc+ (4 samples, 0.09%)</title><rect x="38.3609%" y="309" width="0.0872%" height="15" fill="rgb(232,125,22)" fg:x="1760" fg:w="4"/><text x="38.6109%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="38.4481%" y="309" width="0.0872%" height="15" fill="rgb(244,57,34)" fg:x="1764" fg:w="4"/><text x="38.6981%" y="319.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="38.5353%" y="309" width="0.0218%" height="15" fill="rgb(214,203,32)" fg:x="1768" fg:w="1"/><text x="38.7853%" y="319.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="38.5571%" y="309" width="0.0218%" height="15" fill="rgb(207,58,43)" fg:x="1769" fg:w="1"/><text x="38.8071%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.09%)</title><rect x="38.5789%" y="309" width="0.0872%" height="15" fill="rgb(215,193,15)" fg:x="1770" fg:w="4"/><text x="38.8289%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.26%)</title><rect x="38.6661%" y="309" width="0.2616%" height="15" fill="rgb(232,15,44)" fg:x="1774" fg:w="12"/><text x="38.9161%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="38.9276%" y="309" width="0.0218%" height="15" fill="rgb(212,3,48)" fg:x="1786" fg:w="1"/><text x="39.1776%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.41%)</title><rect x="38.9494%" y="309" width="0.4141%" height="15" fill="rgb(218,128,7)" fg:x="1787" fg:w="19"/><text x="39.1994%" y="319.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="39.3636%" y="309" width="0.0436%" height="15" fill="rgb(226,216,39)" fg:x="1806" fg:w="2"/><text x="39.6136%" y="319.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="39.4071%" y="309" width="0.0218%" height="15" fill="rgb(243,47,51)" fg:x="1808" fg:w="1"/><text x="39.6571%" y="319.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="39.4289%" y="309" width="0.0218%" height="15" fill="rgb(241,183,40)" fg:x="1809" fg:w="1"/><text x="39.6789%" y="319.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="39.4507%" y="309" width="0.0872%" height="15" fill="rgb(231,217,32)" fg:x="1810" fg:w="4"/><text x="39.7007%" y="319.50"></text></g><g><title>libc+ (3 samples, 0.07%)</title><rect x="39.5379%" y="293" width="0.0654%" height="15" fill="rgb(229,61,38)" fg:x="1814" fg:w="3"/><text x="39.7879%" y="303.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="39.6033%" y="293" width="0.0218%" height="15" fill="rgb(225,210,5)" fg:x="1817" fg:w="1"/><text x="39.8533%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.09%)</title><rect x="39.6251%" y="293" width="0.0872%" height="15" fill="rgb(231,79,45)" fg:x="1818" fg:w="4"/><text x="39.8751%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.46%)</title><rect x="39.7123%" y="293" width="0.4577%" height="15" fill="rgb(224,100,7)" fg:x="1822" fg:w="21"/><text x="39.9623%" y="303.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="40.1700%" y="293" width="0.0218%" height="15" fill="rgb(241,198,18)" fg:x="1843" fg:w="1"/><text x="40.4200%" y="303.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="40.1918%" y="293" width="0.0218%" height="15" fill="rgb(252,97,53)" fg:x="1844" fg:w="1"/><text x="40.4418%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionName(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="40.2136%" y="293" width="0.0218%" height="15" fill="rgb(220,88,7)" fg:x="1845" fg:w="1"/><text x="40.4636%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="40.2354%" y="293" width="0.0218%" height="15" fill="rgb(213,176,14)" fg:x="1846" fg:w="1"/><text x="40.4854%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="40.8675%" y="245" width="0.0218%" height="15" fill="rgb(246,73,7)" fg:x="1875" fg:w="1"/><text x="41.1175%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="40.8675%" y="229" width="0.0218%" height="15" fill="rgb(245,64,36)" fg:x="1875" fg:w="1"/><text x="41.1175%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.13%)</title><rect x="40.8893%" y="245" width="0.1308%" height="15" fill="rgb(245,80,10)" fg:x="1876" fg:w="6"/><text x="41.1393%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (26 samples, 0.57%)</title><rect x="40.5841%" y="277" width="0.5667%" height="15" fill="rgb(232,107,50)" fg:x="1862" fg:w="26"/><text x="40.8341%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (13 samples, 0.28%)</title><rect x="40.8675%" y="261" width="0.2833%" height="15" fill="rgb(253,3,0)" fg:x="1875" fg:w="13"/><text x="41.1175%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.13%)</title><rect x="41.0201%" y="245" width="0.1308%" height="15" fill="rgb(212,99,53)" fg:x="1882" fg:w="6"/><text x="41.2701%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="41.1508%" y="277" width="0.0218%" height="15" fill="rgb(249,111,54)" fg:x="1888" fg:w="1"/><text x="41.4008%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.04%)</title><rect x="41.1726%" y="277" width="0.0436%" height="15" fill="rgb(249,55,30)" fg:x="1889" fg:w="2"/><text x="41.4226%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (31 samples, 0.68%)</title><rect x="41.2162%" y="277" width="0.6757%" height="15" fill="rgb(237,47,42)" fg:x="1891" fg:w="31"/><text x="41.4662%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="41.8919%" y="277" width="0.0436%" height="15" fill="rgb(211,20,18)" fg:x="1922" fg:w="2"/><text x="42.1419%" y="287.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="41.9355%" y="277" width="0.0436%" height="15" fill="rgb(231,203,46)" fg:x="1924" fg:w="2"/><text x="42.1855%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (1 samples, 0.02%)</title><rect x="41.9791%" y="277" width="0.0218%" height="15" fill="rgb(237,142,3)" fg:x="1926" fg:w="1"/><text x="42.2291%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (5 samples, 0.11%)</title><rect x="42.0009%" y="277" width="0.1090%" height="15" fill="rgb(241,107,1)" fg:x="1927" fg:w="5"/><text x="42.2509%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.20%)</title><rect x="42.1099%" y="277" width="0.1962%" height="15" fill="rgb(229,83,13)" fg:x="1932" fg:w="9"/><text x="42.3599%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.17%)</title><rect x="42.3060%" y="277" width="0.1744%" height="15" fill="rgb(241,91,40)" fg:x="1941" fg:w="8"/><text x="42.5560%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="42.4804%" y="277" width="0.0654%" height="15" fill="rgb(225,3,45)" fg:x="1949" fg:w="3"/><text x="42.7304%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="42.5458%" y="277" width="0.0436%" height="15" fill="rgb(244,223,14)" fg:x="1952" fg:w="2"/><text x="42.7958%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="42.6983%" y="261" width="0.0218%" height="15" fill="rgb(224,124,37)" fg:x="1959" fg:w="1"/><text x="42.9483%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="42.7419%" y="245" width="0.0218%" height="15" fill="rgb(251,171,30)" fg:x="1961" fg:w="1"/><text x="42.9919%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.11%)</title><rect x="42.7637%" y="245" width="0.1090%" height="15" fill="rgb(236,46,54)" fg:x="1962" fg:w="5"/><text x="43.0137%" y="255.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="42.8727%" y="245" width="0.0218%" height="15" fill="rgb(245,213,5)" fg:x="1967" fg:w="1"/><text x="43.1227%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::CompactionFilterFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="42.8945%" y="245" width="0.0218%" height="15" fill="rgb(230,144,27)" fg:x="1968" fg:w="1"/><text x="43.1445%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="42.8945%" y="229" width="0.0218%" height="15" fill="rgb(220,86,6)" fg:x="1968" fg:w="1"/><text x="43.1445%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="42.9381%" y="229" width="0.0218%" height="15" fill="rgb(240,20,13)" fg:x="1970" fg:w="1"/><text x="43.1881%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.02%)</title><rect x="42.9599%" y="213" width="0.0218%" height="15" fill="rgb(217,89,34)" fg:x="1971" fg:w="1"/><text x="43.2099%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::Comparator::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="42.9163%" y="245" width="0.1090%" height="15" fill="rgb(229,13,5)" fg:x="1969" fg:w="5"/><text x="43.1663%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="42.9599%" y="229" width="0.0654%" height="15" fill="rgb(244,67,35)" fg:x="1971" fg:w="3"/><text x="43.2099%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionsMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="42.9817%" y="213" width="0.0436%" height="15" fill="rgb(221,40,2)" fg:x="1972" fg:w="2"/><text x="43.2317%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (2 samples, 0.04%)</title><rect x="42.9817%" y="197" width="0.0436%" height="15" fill="rgb(237,157,21)" fg:x="1972" fg:w="2"/><text x="43.2317%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (2 samples, 0.04%)</title><rect x="42.9817%" y="181" width="0.0436%" height="15" fill="rgb(222,94,11)" fg:x="1972" fg:w="2"/><text x="43.2317%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="43.0035%" y="165" width="0.0218%" height="15" fill="rgb(249,113,6)" fg:x="1973" fg:w="1"/><text x="43.2535%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="43.0253%" y="229" width="0.0218%" height="15" fill="rgb(238,137,36)" fg:x="1974" fg:w="1"/><text x="43.2753%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="43.0471%" y="213" width="0.0218%" height="15" fill="rgb(210,102,26)" fg:x="1975" fg:w="1"/><text x="43.2971%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="43.0471%" y="197" width="0.0218%" height="15" fill="rgb(218,30,30)" fg:x="1975" fg:w="1"/><text x="43.2971%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::ObjectLibrary::PatternEntry::MatchesTarget(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="43.0689%" y="165" width="0.0218%" height="15" fill="rgb(214,67,26)" fg:x="1976" fg:w="1"/><text x="43.3189%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::MemTableRepFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (4 samples, 0.09%)</title><rect x="43.0253%" y="245" width="0.0872%" height="15" fill="rgb(251,9,53)" fg:x="1974" fg:w="4"/><text x="43.2753%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::MemTableRepFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::MemTableRepFactory, std::__1::default_delete (3 samples, 0.07%)</title><rect x="43.0471%" y="229" width="0.0654%" height="15" fill="rgb(228,204,25)" fg:x="1975" fg:w="3"/><text x="43.2971%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewUniqueObject&lt;rocksdb::MemTableRepFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::MemTableRepFactory, std::__1::default_delete (2 samples, 0.04%)</title><rect x="43.0689%" y="213" width="0.0436%" height="15" fill="rgb(207,153,8)" fg:x="1976" fg:w="2"/><text x="43.3189%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewObject&lt;rocksdb::MemTableRepFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::MemTableRepFactory**, std::__1::unique_ptr&lt;rocksdb::MemTableRepFactory, std::__1::default_delete (2 samples, 0.04%)</title><rect x="43.0689%" y="197" width="0.0436%" height="15" fill="rgb(242,9,16)" fg:x="1976" fg:w="2"/><text x="43.3189%" y="207.50"></text></g><g><title>rusk-wallet`std::__1::function&lt;rocksdb::MemTableRepFactory* (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::MemTableRepFactory, std::__1::default_delete&lt;rocksdb::MemTableRepFactory&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt; rocksdb::ObjectLibrary::FindFactory&lt;rocksdb::MemTableRepFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="43.0689%" y="181" width="0.0436%" height="15" fill="rgb(217,211,10)" fg:x="1976" fg:w="2"/><text x="43.3189%" y="191.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;&gt;&gt;&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="43.0907%" y="165" width="0.0218%" height="15" fill="rgb(219,228,52)" fg:x="1977" fg:w="1"/><text x="43.3407%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="43.1343%" y="229" width="0.0436%" height="15" fill="rgb(231,92,29)" fg:x="1979" fg:w="2"/><text x="43.3843%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::MergeOperator::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (4 samples, 0.09%)</title><rect x="43.1125%" y="245" width="0.0872%" height="15" fill="rgb(232,8,23)" fg:x="1978" fg:w="4"/><text x="43.3625%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::LoadMergeOperator(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="43.1779%" y="229" width="0.0218%" height="15" fill="rgb(216,211,34)" fg:x="1981" fg:w="1"/><text x="43.4279%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="43.1779%" y="213" width="0.0218%" height="15" fill="rgb(236,151,0)" fg:x="1981" fg:w="1"/><text x="43.4279%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.13%)</title><rect x="43.2214%" y="229" width="0.1308%" height="15" fill="rgb(209,168,3)" fg:x="1983" fg:w="6"/><text x="43.4714%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="43.3522%" y="229" width="0.0218%" height="15" fill="rgb(208,129,28)" fg:x="1989" fg:w="1"/><text x="43.6022%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="43.3522%" y="213" width="0.0218%" height="15" fill="rgb(229,78,22)" fg:x="1989" fg:w="1"/><text x="43.6022%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="43.3522%" y="197" width="0.0218%" height="15" fill="rgb(228,187,13)" fg:x="1989" fg:w="1"/><text x="43.6022%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.15%)</title><rect x="43.3740%" y="229" width="0.1526%" height="15" fill="rgb(240,119,24)" fg:x="1990" fg:w="7"/><text x="43.6240%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="43.5266%" y="213" width="0.0218%" height="15" fill="rgb(209,194,42)" fg:x="1997" fg:w="1"/><text x="43.7766%" y="223.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="43.5484%" y="197" width="0.0436%" height="15" fill="rgb(247,200,46)" fg:x="1998" fg:w="2"/><text x="43.7984%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (9 samples, 0.20%)</title><rect x="43.5920%" y="197" width="0.1962%" height="15" fill="rgb(218,76,16)" fg:x="2000" fg:w="9"/><text x="43.8420%" y="207.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (3 samples, 0.07%)</title><rect x="43.7881%" y="197" width="0.0654%" height="15" fill="rgb(225,21,48)" fg:x="2009" fg:w="3"/><text x="44.0381%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="43.8535%" y="197" width="0.0218%" height="15" fill="rgb(239,223,50)" fg:x="2012" fg:w="1"/><text x="44.1035%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.11%)</title><rect x="43.8753%" y="197" width="0.1090%" height="15" fill="rgb(244,45,21)" fg:x="2013" fg:w="5"/><text x="44.1253%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.15%)</title><rect x="43.9843%" y="197" width="0.1526%" height="15" fill="rgb(232,33,43)" fg:x="2018" fg:w="7"/><text x="44.2343%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="44.1369%" y="197" width="0.0218%" height="15" fill="rgb(209,8,3)" fg:x="2025" fg:w="1"/><text x="44.3869%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (2 samples, 0.04%)</title><rect x="44.1587%" y="197" width="0.0436%" height="15" fill="rgb(214,25,53)" fg:x="2026" fg:w="2"/><text x="44.4087%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="44.2023%" y="197" width="0.0218%" height="15" fill="rgb(254,186,54)" fg:x="2028" fg:w="1"/><text x="44.4523%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="44.2241%" y="197" width="0.0436%" height="15" fill="rgb(208,174,49)" fg:x="2029" fg:w="2"/><text x="44.4741%" y="207.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="44.2895%" y="181" width="0.0218%" height="15" fill="rgb(233,191,51)" fg:x="2032" fg:w="1"/><text x="44.5395%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="44.3112%" y="181" width="0.0436%" height="15" fill="rgb(222,134,10)" fg:x="2033" fg:w="2"/><text x="44.5612%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="44.3548%" y="181" width="0.0436%" height="15" fill="rgb(230,226,20)" fg:x="2035" fg:w="2"/><text x="44.6048%" y="191.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="44.3984%" y="181" width="0.0218%" height="15" fill="rgb(251,111,25)" fg:x="2037" fg:w="1"/><text x="44.6484%" y="191.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="44.5946%" y="165" width="0.0436%" height="15" fill="rgb(224,40,46)" fg:x="2046" fg:w="2"/><text x="44.8446%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.24%)</title><rect x="44.6382%" y="165" width="0.2398%" height="15" fill="rgb(236,108,47)" fg:x="2048" fg:w="11"/><text x="44.8882%" y="175.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="44.8779%" y="165" width="0.0218%" height="15" fill="rgb(234,93,0)" fg:x="2059" fg:w="1"/><text x="45.1279%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.11%)</title><rect x="44.8997%" y="165" width="0.1090%" height="15" fill="rgb(224,213,32)" fg:x="2060" fg:w="5"/><text x="45.1497%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="45.0087%" y="165" width="0.0218%" height="15" fill="rgb(251,11,48)" fg:x="2065" fg:w="1"/><text x="45.2587%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (3 samples, 0.07%)</title><rect x="45.0305%" y="165" width="0.0654%" height="15" fill="rgb(236,173,5)" fg:x="2066" fg:w="3"/><text x="45.2805%" y="175.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="45.0959%" y="165" width="0.0218%" height="15" fill="rgb(230,95,12)" fg:x="2069" fg:w="1"/><text x="45.3459%" y="175.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="45.1177%" y="165" width="0.0218%" height="15" fill="rgb(232,209,1)" fg:x="2070" fg:w="1"/><text x="45.3677%" y="175.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="45.1395%" y="165" width="0.0436%" height="15" fill="rgb(232,6,1)" fg:x="2071" fg:w="2"/><text x="45.3895%" y="175.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="45.1831%" y="165" width="0.0218%" height="15" fill="rgb(210,224,50)" fg:x="2073" fg:w="1"/><text x="45.4331%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="45.2049%" y="149" width="0.0218%" height="15" fill="rgb(228,127,35)" fg:x="2074" fg:w="1"/><text x="45.4549%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (5 samples, 0.11%)</title><rect x="45.3139%" y="133" width="0.1090%" height="15" fill="rgb(245,102,45)" fg:x="2079" fg:w="5"/><text x="45.5639%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::stod(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="45.4228%" y="133" width="0.0218%" height="15" fill="rgb(214,1,49)" fg:x="2084" fg:w="1"/><text x="45.6728%" y="143.50"></text></g><g><title>libsystem_c.dylib`strtod (1 samples, 0.02%)</title><rect x="45.4228%" y="117" width="0.0218%" height="15" fill="rgb(226,163,40)" fg:x="2084" fg:w="1"/><text x="45.6728%" y="127.50"></text></g><g><title>libsystem_c.dylib`_ffpp_strtoencf64_l (1 samples, 0.02%)</title><rect x="45.4228%" y="101" width="0.0218%" height="15" fill="rgb(239,212,28)" fg:x="2084" fg:w="1"/><text x="45.6728%" y="111.50"></text></g><g><title>libsystem_c.dylib`fastParse64 (1 samples, 0.02%)</title><rect x="45.4228%" y="85" width="0.0218%" height="15" fill="rgb(220,20,13)" fg:x="2084" fg:w="1"/><text x="45.6728%" y="95.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock (1 samples, 0.02%)</title><rect x="45.4228%" y="69" width="0.0218%" height="15" fill="rgb(210,164,35)" fg:x="2084" fg:w="1"/><text x="45.6728%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="45.4446%" y="133" width="0.0218%" height="15" fill="rgb(248,109,41)" fg:x="2085" fg:w="1"/><text x="45.6946%" y="143.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (3 samples, 0.07%)</title><rect x="45.4664%" y="133" width="0.0654%" height="15" fill="rgb(238,23,50)" fg:x="2086" fg:w="3"/><text x="45.7164%" y="143.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::stoull(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="45.5318%" y="133" width="0.0218%" height="15" fill="rgb(211,48,49)" fg:x="2089" fg:w="1"/><text x="45.7818%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="45.5536%" y="117" width="0.0436%" height="15" fill="rgb(223,36,21)" fg:x="2090" fg:w="2"/><text x="45.8036%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="45.5972%" y="101" width="0.0218%" height="15" fill="rgb(207,123,46)" fg:x="2092" fg:w="1"/><text x="45.8472%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::PinningTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::PinningTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.04%)</title><rect x="45.6190%" y="69" width="0.0436%" height="15" fill="rgb(240,218,32)" fg:x="2093" fg:w="2"/><text x="45.8690%" y="79.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PinningTier&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (2 samples, 0.04%)</title><rect x="45.6190%" y="53" width="0.0436%" height="15" fill="rgb(252,5,43)" fg:x="2093" fg:w="2"/><text x="45.8690%" y="63.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (3 samples, 0.07%)</title><rect x="45.6190%" y="101" width="0.0654%" height="15" fill="rgb(252,84,19)" fg:x="2093" fg:w="3"/><text x="45.8690%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="45.6190%" y="85" width="0.0654%" height="15" fill="rgb(243,152,39)" fg:x="2093" fg:w="3"/><text x="45.8690%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="45.6626%" y="69" width="0.0218%" height="15" fill="rgb(234,160,15)" fg:x="2095" fg:w="1"/><text x="45.9126%" y="79.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="45.6626%" y="53" width="0.0218%" height="15" fill="rgb(237,34,20)" fg:x="2095" fg:w="1"/><text x="45.9126%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="45.6844%" y="85" width="0.0218%" height="15" fill="rgb(229,97,13)" fg:x="2096" fg:w="1"/><text x="45.9344%" y="95.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="45.7062%" y="85" width="0.0218%" height="15" fill="rgb(234,71,50)" fg:x="2097" fg:w="1"/><text x="45.9562%" y="95.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="45.7280%" y="69" width="0.0218%" height="15" fill="rgb(253,155,4)" fg:x="2098" fg:w="1"/><text x="45.9780%" y="79.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="45.7280%" y="85" width="0.0872%" height="15" fill="rgb(222,185,37)" fg:x="2098" fg:w="4"/><text x="45.9780%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (3 samples, 0.07%)</title><rect x="45.7498%" y="69" width="0.0654%" height="15" fill="rgb(251,177,13)" fg:x="2099" fg:w="3"/><text x="45.9998%" y="79.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="45.8152%" y="85" width="0.0654%" height="15" fill="rgb(250,179,40)" fg:x="2102" fg:w="3"/><text x="46.0652%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="45.6844%" y="101" width="0.2398%" height="15" fill="rgb(242,44,2)" fg:x="2096" fg:w="11"/><text x="45.9344%" y="111.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="45.8806%" y="85" width="0.0436%" height="15" fill="rgb(216,177,13)" fg:x="2105" fg:w="2"/><text x="46.1306%" y="95.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="45.9024%" y="69" width="0.0218%" height="15" fill="rgb(216,106,43)" fg:x="2106" fg:w="1"/><text x="46.1524%" y="79.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="45.9024%" y="53" width="0.0218%" height="15" fill="rgb(216,183,2)" fg:x="2106" fg:w="1"/><text x="46.1524%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="45.9024%" y="37" width="0.0218%" height="15" fill="rgb(249,75,3)" fg:x="2106" fg:w="1"/><text x="46.1524%" y="47.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (18 samples, 0.39%)</title><rect x="45.5536%" y="133" width="0.3923%" height="15" fill="rgb(219,67,39)" fg:x="2090" fg:w="18"/><text x="45.8036%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (16 samples, 0.35%)</title><rect x="45.5972%" y="117" width="0.3487%" height="15" fill="rgb(253,228,2)" fg:x="2092" fg:w="16"/><text x="45.8472%" y="127.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="45.9241%" y="101" width="0.0218%" height="15" fill="rgb(235,138,27)" fg:x="2107" fg:w="1"/><text x="46.1741%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="45.9459%" y="133" width="0.0436%" height="15" fill="rgb(236,97,51)" fg:x="2108" fg:w="2"/><text x="46.1959%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="45.9459%" y="117" width="0.0436%" height="15" fill="rgb(240,80,30)" fg:x="2108" fg:w="2"/><text x="46.1959%" y="127.50"></text></g><g><title>libsystem_c.dylib`strtol_l (2 samples, 0.04%)</title><rect x="45.9459%" y="101" width="0.0436%" height="15" fill="rgb(230,178,19)" fg:x="2108" fg:w="2"/><text x="46.1959%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="45.9895%" y="133" width="0.0436%" height="15" fill="rgb(210,190,27)" fg:x="2110" fg:w="2"/><text x="46.2395%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::stoull(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="46.0113%" y="117" width="0.0218%" height="15" fill="rgb(222,107,31)" fg:x="2111" fg:w="1"/><text x="46.2613%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="46.0113%" y="101" width="0.0218%" height="15" fill="rgb(216,127,34)" fg:x="2111" fg:w="1"/><text x="46.2613%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::IndexShorteningMode&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexShorteningMode, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::IndexShorteningMode&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="46.0331%" y="133" width="0.0218%" height="15" fill="rgb(234,116,52)" fg:x="2112" fg:w="1"/><text x="46.2831%" y="143.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexShorteningMode&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexShorteningMode&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexShorteningMode&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="46.0331%" y="117" width="0.0218%" height="15" fill="rgb(222,124,15)" fg:x="2112" fg:w="1"/><text x="46.2831%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::PrepopulateBlockCache&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::PrepopulateBlockCache, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::PrepopulateBlockCache&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="46.0549%" y="133" width="0.0436%" height="15" fill="rgb(231,179,28)" fg:x="2113" fg:w="2"/><text x="46.3049%" y="143.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="46.0767%" y="117" width="0.0218%" height="15" fill="rgb(226,93,45)" fg:x="2114" fg:w="1"/><text x="46.3267%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="46.0985%" y="133" width="0.2398%" height="15" fill="rgb(215,8,51)" fg:x="2115" fg:w="11"/><text x="46.3485%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (5 samples, 0.11%)</title><rect x="46.2293%" y="117" width="0.1090%" height="15" fill="rgb(223,106,5)" fg:x="2121" fg:w="5"/><text x="46.4793%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by (1 samples, 0.02%)</title><rect x="46.3165%" y="101" width="0.0218%" height="15" fill="rgb(250,191,5)" fg:x="2125" fg:w="1"/><text x="46.5665%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="46.3165%" y="85" width="0.0218%" height="15" fill="rgb(242,132,44)" fg:x="2125" fg:w="1"/><text x="46.5665%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (52 samples, 1.13%)</title><rect x="45.2267%" y="149" width="1.1334%" height="15" fill="rgb(251,152,29)" fg:x="2075" fg:w="52"/><text x="45.4767%" y="159.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_0, std::__1::allocator&lt;rocksdb::$_0&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="46.3383%" y="133" width="0.0218%" height="15" fill="rgb(218,179,5)" fg:x="2126" fg:w="1"/><text x="46.5883%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="46.3383%" y="117" width="0.0218%" height="15" fill="rgb(227,67,19)" fg:x="2126" fg:w="1"/><text x="46.5883%" y="127.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::DataBlockIndexType, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator (1 samples, 0.02%)</title><rect x="46.3601%" y="149" width="0.0218%" height="15" fill="rgb(233,119,31)" fg:x="2127" fg:w="1"/><text x="46.6101%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (55 samples, 1.20%)</title><rect x="45.2049%" y="165" width="1.1988%" height="15" fill="rgb(241,120,22)" fg:x="2074" fg:w="55"/><text x="45.4549%" y="175.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::IndexShorteningMode&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexShorteningMode, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::IndexShorteningMode&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator (1 samples, 0.02%)</title><rect x="46.3819%" y="149" width="0.0218%" height="15" fill="rgb(224,102,30)" fg:x="2128" fg:w="1"/><text x="46.6319%" y="159.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="46.4037%" y="133" width="0.0218%" height="15" fill="rgb(210,164,37)" fg:x="2129" fg:w="1"/><text x="46.6537%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::FilterPolicy::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="46.4690%" y="117" width="0.0218%" height="15" fill="rgb(226,191,16)" fg:x="2132" fg:w="1"/><text x="46.7190%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="46.4908%" y="101" width="0.0218%" height="15" fill="rgb(214,40,45)" fg:x="2133" fg:w="1"/><text x="46.7408%" y="111.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::__shared_weak_count::__release_weak (1 samples, 0.02%)</title><rect x="46.5126%" y="101" width="0.0218%" height="15" fill="rgb(244,29,26)" fg:x="2134" fg:w="1"/><text x="46.7626%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="46.5344%" y="85" width="0.0218%" height="15" fill="rgb(216,16,5)" fg:x="2135" fg:w="1"/><text x="46.7844%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="46.5562%" y="69" width="0.0218%" height="15" fill="rgb(249,76,35)" fg:x="2136" fg:w="1"/><text x="46.8062%" y="79.50"></text></g><g><title>libc++.1.dylib`std::__1::mutex::lock (1 samples, 0.02%)</title><rect x="46.5780%" y="53" width="0.0218%" height="15" fill="rgb(207,11,44)" fg:x="2137" fg:w="1"/><text x="46.8280%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="46.5780%" y="37" width="0.0218%" height="15" fill="rgb(228,190,49)" fg:x="2137" fg:w="1"/><text x="46.8280%" y="47.50"></text></g><g><title>rusk-wallet`rocksdb::ObjectLibrary::PatternEntry::Matches(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="46.5998%" y="53" width="0.0218%" height="15" fill="rgb(214,173,12)" fg:x="2138" fg:w="1"/><text x="46.8498%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="46.5998%" y="37" width="0.0218%" height="15" fill="rgb(218,26,35)" fg:x="2138" fg:w="1"/><text x="46.8498%" y="47.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FlushBlockPolicyFactory**, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete (4 samples, 0.09%)</title><rect x="46.5562%" y="85" width="0.0872%" height="15" fill="rgb(220,200,19)" fg:x="2136" fg:w="4"/><text x="46.8062%" y="95.50"></text></g><g><title>rusk-wallet`std::__1::function&lt;rocksdb::FlushBlockPolicyFactory* (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete&lt;rocksdb::FlushBlockPolicyFactory&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt; rocksdb::ObjectLibrary::FindFactory&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="46.5780%" y="69" width="0.0654%" height="15" fill="rgb(239,95,49)" fg:x="2137" fg:w="3"/><text x="46.8280%" y="79.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;&gt;&gt;&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::vector&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;rocksdb::ObjectLibrary::Entry, std::__1::default_delete&lt;rocksdb::ObjectLibrary::Entry&gt;&gt;&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="46.6216%" y="53" width="0.0218%" height="15" fill="rgb(235,85,53)" fg:x="2139" fg:w="1"/><text x="46.8716%" y="63.50"></text></g><g><title>rusk-wallet`rocksdb::FlushBlockPolicyFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (8 samples, 0.17%)</title><rect x="46.4908%" y="117" width="0.1744%" height="15" fill="rgb(233,133,31)" fg:x="2133" fg:w="8"/><text x="46.7408%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewSharedObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (6 samples, 0.13%)</title><rect x="46.5344%" y="101" width="0.1308%" height="15" fill="rgb(218,25,20)" fg:x="2135" fg:w="6"/><text x="46.7844%" y="111.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::RegisterFlushBlockPolicyFactories(rocksdb::ObjectLibrary&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;)::$_1, std::__1::allocator&lt;rocksdb::RegisterFlushBlockPolicyFactories(rocksdb::ObjectLibrary&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;)::$_1&gt;, rocksdb::FlushBlockPolicyFactory* (std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete&lt;rocksdb::FlushBlockPolicyFactory&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt;::destroy (1 samples, 0.02%)</title><rect x="46.6434%" y="85" width="0.0218%" height="15" fill="rgb(252,210,38)" fg:x="2140" fg:w="1"/><text x="46.8934%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (16 samples, 0.35%)</title><rect x="46.4037%" y="165" width="0.3487%" height="15" fill="rgb(242,134,21)" fg:x="2129" fg:w="16"/><text x="46.6537%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (16 samples, 0.35%)</title><rect x="46.4037%" y="149" width="0.3487%" height="15" fill="rgb(213,28,48)" fg:x="2129" fg:w="16"/><text x="46.6537%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="46.4255%" y="133" width="0.3269%" height="15" fill="rgb(250,196,2)" fg:x="2130" fg:w="15"/><text x="46.6755%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="46.6652%" y="117" width="0.0872%" height="15" fill="rgb(227,5,17)" fg:x="2141" fg:w="4"/><text x="46.9152%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (2 samples, 0.04%)</title><rect x="46.7088%" y="101" width="0.0436%" height="15" fill="rgb(221,226,24)" fg:x="2143" fg:w="2"/><text x="46.9588%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="46.7524%" y="165" width="0.0872%" height="15" fill="rgb(211,5,48)" fg:x="2145" fg:w="4"/><text x="47.0024%" y="175.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="46.9268%" y="117" width="0.0218%" height="15" fill="rgb(219,150,6)" fg:x="2153" fg:w="1"/><text x="47.1768%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="46.9486%" y="117" width="0.0654%" height="15" fill="rgb(251,46,16)" fg:x="2154" fg:w="3"/><text x="47.1986%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="46.9268%" y="149" width="0.1308%" height="15" fill="rgb(220,204,40)" fg:x="2153" fg:w="6"/><text x="47.1768%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (6 samples, 0.13%)</title><rect x="46.9268%" y="133" width="0.1308%" height="15" fill="rgb(211,85,2)" fg:x="2153" fg:w="6"/><text x="47.1768%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="47.0139%" y="117" width="0.0436%" height="15" fill="rgb(229,17,7)" fg:x="2157" fg:w="2"/><text x="47.2639%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionName(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="46.8396%" y="165" width="0.3269%" height="15" fill="rgb(239,72,28)" fg:x="2149" fg:w="15"/><text x="47.0896%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.11%)</title><rect x="47.0575%" y="149" width="0.1090%" height="15" fill="rgb(230,47,54)" fg:x="2159" fg:w="5"/><text x="47.3075%" y="159.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="47.1665%" y="149" width="0.0218%" height="15" fill="rgb(214,50,8)" fg:x="2164" fg:w="1"/><text x="47.4165%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;false&gt; (2 samples, 0.04%)</title><rect x="47.1883%" y="149" width="0.0436%" height="15" fill="rgb(216,198,43)" fg:x="2165" fg:w="2"/><text x="47.4383%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="47.2101%" y="133" width="0.0218%" height="15" fill="rgb(234,20,35)" fg:x="2166" fg:w="1"/><text x="47.4601%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="47.2101%" y="117" width="0.0218%" height="15" fill="rgb(254,45,19)" fg:x="2166" fg:w="1"/><text x="47.4601%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="47.2319%" y="149" width="0.0218%" height="15" fill="rgb(219,14,44)" fg:x="2167" fg:w="1"/><text x="47.4819%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="47.2537%" y="149" width="0.0654%" height="15" fill="rgb(217,220,26)" fg:x="2168" fg:w="3"/><text x="47.5037%" y="159.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (12 samples, 0.26%)</title><rect x="47.3191%" y="149" width="0.2616%" height="15" fill="rgb(213,158,28)" fg:x="2171" fg:w="12"/><text x="47.5691%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.44%)</title><rect x="47.1665%" y="165" width="0.4359%" height="15" fill="rgb(252,51,52)" fg:x="2164" fg:w="20"/><text x="47.4165%" y="175.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="47.5806%" y="149" width="0.0218%" height="15" fill="rgb(246,89,16)" fg:x="2183" fg:w="1"/><text x="47.8306%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="47.6024%" y="165" width="0.0218%" height="15" fill="rgb(216,158,49)" fg:x="2184" fg:w="1"/><text x="47.8524%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (148 samples, 3.23%)</title><rect x="44.4202%" y="181" width="3.2258%" height="15" fill="rgb(236,107,19)" fg:x="2038" fg:w="148"/><text x="44.6702%" y="191.50">rus..</text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="47.6242%" y="165" width="0.0218%" height="15" fill="rgb(228,185,30)" fg:x="2185" fg:w="1"/><text x="47.8742%" y="175.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="47.6460%" y="181" width="0.0654%" height="15" fill="rgb(246,134,8)" fg:x="2186" fg:w="3"/><text x="47.8960%" y="191.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="47.7550%" y="165" width="0.0218%" height="15" fill="rgb(214,143,50)" fg:x="2191" fg:w="1"/><text x="48.0050%" y="175.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="47.7768%" y="165" width="0.0218%" height="15" fill="rgb(228,75,8)" fg:x="2192" fg:w="1"/><text x="48.0268%" y="175.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (5 samples, 0.11%)</title><rect x="47.7986%" y="165" width="0.1090%" height="15" fill="rgb(207,175,4)" fg:x="2193" fg:w="5"/><text x="48.0486%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="48.0820%" y="117" width="0.0218%" height="15" fill="rgb(205,108,24)" fg:x="2206" fg:w="1"/><text x="48.3320%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="48.0820%" y="101" width="0.0218%" height="15" fill="rgb(244,120,49)" fg:x="2206" fg:w="1"/><text x="48.3320%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="48.0820%" y="85" width="0.0218%" height="15" fill="rgb(223,47,38)" fg:x="2206" fg:w="1"/><text x="48.3320%" y="95.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="48.0820%" y="149" width="0.0654%" height="15" fill="rgb(229,179,11)" fg:x="2206" fg:w="3"/><text x="48.3320%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (3 samples, 0.07%)</title><rect x="48.0820%" y="133" width="0.0654%" height="15" fill="rgb(231,122,1)" fg:x="2206" fg:w="3"/><text x="48.3320%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="48.1037%" y="117" width="0.0436%" height="15" fill="rgb(245,119,9)" fg:x="2207" fg:w="2"/><text x="48.3537%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="48.1473%" y="149" width="0.0218%" height="15" fill="rgb(241,163,25)" fg:x="2209" fg:w="1"/><text x="48.3973%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="48.1473%" y="133" width="0.0218%" height="15" fill="rgb(217,214,3)" fg:x="2209" fg:w="1"/><text x="48.3973%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="48.1473%" y="117" width="0.0218%" height="15" fill="rgb(240,86,28)" fg:x="2209" fg:w="1"/><text x="48.3973%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="48.1691%" y="149" width="0.0436%" height="15" fill="rgb(215,47,9)" fg:x="2210" fg:w="2"/><text x="48.4191%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="48.2127%" y="149" width="0.0654%" height="15" fill="rgb(252,25,45)" fg:x="2212" fg:w="3"/><text x="48.4627%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (186 samples, 4.05%)</title><rect x="44.2677%" y="197" width="4.0541%" height="15" fill="rgb(251,164,9)" fg:x="2031" fg:w="186"/><text x="44.5177%" y="207.50">rusk..</text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (28 samples, 0.61%)</title><rect x="47.7114%" y="181" width="0.6103%" height="15" fill="rgb(233,194,0)" fg:x="2189" fg:w="28"/><text x="47.9614%" y="191.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (19 samples, 0.41%)</title><rect x="47.9076%" y="165" width="0.4141%" height="15" fill="rgb(249,111,24)" fg:x="2198" fg:w="19"/><text x="48.1576%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="48.2781%" y="149" width="0.0436%" height="15" fill="rgb(250,223,3)" fg:x="2215" fg:w="2"/><text x="48.5281%" y="159.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="48.6922%" y="181" width="0.0218%" height="15" fill="rgb(236,178,37)" fg:x="2234" fg:w="1"/><text x="48.9422%" y="191.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="48.7140%" y="181" width="0.0218%" height="15" fill="rgb(241,158,50)" fg:x="2235" fg:w="1"/><text x="48.9640%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="48.7358%" y="181" width="0.0218%" height="15" fill="rgb(213,121,41)" fg:x="2236" fg:w="1"/><text x="48.9858%" y="191.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="48.9320%" y="165" width="0.0218%" height="15" fill="rgb(240,92,3)" fg:x="2245" fg:w="1"/><text x="49.1820%" y="175.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="48.9538%" y="165" width="0.0218%" height="15" fill="rgb(205,123,3)" fg:x="2246" fg:w="1"/><text x="49.2038%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="49.0192%" y="149" width="0.0654%" height="15" fill="rgb(205,97,47)" fg:x="2249" fg:w="3"/><text x="49.2692%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.04%)</title><rect x="49.0410%" y="133" width="0.0436%" height="15" fill="rgb(247,152,14)" fg:x="2250" fg:w="2"/><text x="49.2910%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="49.0628%" y="117" width="0.0218%" height="15" fill="rgb(248,195,53)" fg:x="2251" fg:w="1"/><text x="49.3128%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="49.0846%" y="149" width="0.0218%" height="15" fill="rgb(226,201,16)" fg:x="2252" fg:w="1"/><text x="49.3346%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="49.1064%" y="149" width="0.0436%" height="15" fill="rgb(205,98,0)" fg:x="2253" fg:w="2"/><text x="49.3564%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="49.1500%" y="133" width="0.0218%" height="15" fill="rgb(214,191,48)" fg:x="2255" fg:w="1"/><text x="49.4000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="49.1500%" y="149" width="0.0436%" height="15" fill="rgb(237,112,39)" fg:x="2255" fg:w="2"/><text x="49.4000%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="49.1718%" y="133" width="0.0218%" height="15" fill="rgb(247,203,27)" fg:x="2256" fg:w="1"/><text x="49.4218%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="49.1718%" y="117" width="0.0218%" height="15" fill="rgb(235,124,28)" fg:x="2256" fg:w="1"/><text x="49.4218%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (14 samples, 0.31%)</title><rect x="48.9756%" y="165" width="0.3051%" height="15" fill="rgb(208,207,46)" fg:x="2247" fg:w="14"/><text x="49.2256%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.09%)</title><rect x="49.1935%" y="149" width="0.0872%" height="15" fill="rgb(234,176,4)" fg:x="2257" fg:w="4"/><text x="49.4435%" y="159.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="49.2807%" y="165" width="0.0218%" height="15" fill="rgb(230,133,28)" fg:x="2261" fg:w="1"/><text x="49.5307%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (35 samples, 0.76%)</title><rect x="48.7576%" y="181" width="0.7629%" height="15" fill="rgb(211,137,40)" fg:x="2237" fg:w="35"/><text x="49.0076%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.22%)</title><rect x="49.3025%" y="165" width="0.2180%" height="15" fill="rgb(254,35,13)" fg:x="2262" fg:w="10"/><text x="49.5525%" y="175.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="49.5205%" y="181" width="0.0218%" height="15" fill="rgb(225,49,51)" fg:x="2272" fg:w="1"/><text x="49.7705%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="49.5423%" y="181" width="0.0436%" height="15" fill="rgb(251,10,15)" fg:x="2273" fg:w="2"/><text x="49.7923%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.11%)</title><rect x="49.5859%" y="181" width="0.1090%" height="15" fill="rgb(228,207,15)" fg:x="2275" fg:w="5"/><text x="49.8359%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="49.6949%" y="181" width="0.0654%" height="15" fill="rgb(241,99,19)" fg:x="2280" fg:w="3"/><text x="49.9449%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="49.7602%" y="181" width="0.0218%" height="15" fill="rgb(207,104,49)" fg:x="2283" fg:w="1"/><text x="50.0102%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (9 samples, 0.20%)</title><rect x="49.7820%" y="181" width="0.1962%" height="15" fill="rgb(234,99,18)" fg:x="2284" fg:w="9"/><text x="50.0320%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="49.9782%" y="181" width="0.0218%" height="15" fill="rgb(213,191,49)" fg:x="2293" fg:w="1"/><text x="50.2282%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (2 samples, 0.04%)</title><rect x="50.0000%" y="181" width="0.0436%" height="15" fill="rgb(210,226,19)" fg:x="2294" fg:w="2"/><text x="50.2500%" y="191.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="50.1090%" y="165" width="0.0218%" height="15" fill="rgb(229,97,18)" fg:x="2299" fg:w="1"/><text x="50.3590%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.02%)</title><rect x="50.1308%" y="165" width="0.0218%" height="15" fill="rgb(211,167,15)" fg:x="2300" fg:w="1"/><text x="50.3808%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="50.1526%" y="165" width="0.0218%" height="15" fill="rgb(210,169,34)" fg:x="2301" fg:w="1"/><text x="50.4026%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="50.1744%" y="165" width="0.0436%" height="15" fill="rgb(241,121,31)" fg:x="2302" fg:w="2"/><text x="50.4244%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (1 samples, 0.02%)</title><rect x="50.2180%" y="165" width="0.0218%" height="15" fill="rgb(232,40,11)" fg:x="2304" fg:w="1"/><text x="50.4680%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="50.2180%" y="149" width="0.0218%" height="15" fill="rgb(205,86,26)" fg:x="2304" fg:w="1"/><text x="50.4680%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="50.2180%" y="133" width="0.0218%" height="15" fill="rgb(231,126,28)" fg:x="2304" fg:w="1"/><text x="50.4680%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="50.2180%" y="117" width="0.0218%" height="15" fill="rgb(219,221,18)" fg:x="2304" fg:w="1"/><text x="50.4680%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="50.2398%" y="133" width="0.0218%" height="15" fill="rgb(211,40,0)" fg:x="2305" fg:w="1"/><text x="50.4898%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="50.2398%" y="117" width="0.0218%" height="15" fill="rgb(239,85,43)" fg:x="2305" fg:w="1"/><text x="50.4898%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="50.2398%" y="149" width="0.0436%" height="15" fill="rgb(231,55,21)" fg:x="2305" fg:w="2"/><text x="50.4898%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="50.2616%" y="133" width="0.0218%" height="15" fill="rgb(225,184,43)" fg:x="2306" fg:w="1"/><text x="50.5116%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="50.2833%" y="149" width="0.0218%" height="15" fill="rgb(251,158,41)" fg:x="2307" fg:w="1"/><text x="50.5333%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="50.3051%" y="133" width="0.0218%" height="15" fill="rgb(234,159,37)" fg:x="2308" fg:w="1"/><text x="50.5551%" y="143.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="50.3269%" y="117" width="0.0218%" height="15" fill="rgb(216,204,22)" fg:x="2309" fg:w="1"/><text x="50.5769%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="50.3705%" y="101" width="0.0218%" height="15" fill="rgb(214,17,3)" fg:x="2311" fg:w="1"/><text x="50.6205%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="50.3923%" y="101" width="0.0218%" height="15" fill="rgb(212,111,17)" fg:x="2312" fg:w="1"/><text x="50.6423%" y="111.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (5 samples, 0.11%)</title><rect x="50.3269%" y="133" width="0.1090%" height="15" fill="rgb(221,157,24)" fg:x="2309" fg:w="5"/><text x="50.5769%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (4 samples, 0.09%)</title><rect x="50.3487%" y="117" width="0.0872%" height="15" fill="rgb(252,16,13)" fg:x="2310" fg:w="4"/><text x="50.5987%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="50.4141%" y="101" width="0.0218%" height="15" fill="rgb(221,62,2)" fg:x="2313" fg:w="1"/><text x="50.6641%" y="111.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="50.4359%" y="117" width="0.0218%" height="15" fill="rgb(247,87,22)" fg:x="2314" fg:w="1"/><text x="50.6859%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="50.2398%" y="165" width="0.2398%" height="15" fill="rgb(215,73,9)" fg:x="2305" fg:w="11"/><text x="50.4898%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="50.3051%" y="149" width="0.1744%" height="15" fill="rgb(207,175,33)" fg:x="2308" fg:w="8"/><text x="50.5551%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="50.4359%" y="133" width="0.0436%" height="15" fill="rgb(243,129,54)" fg:x="2314" fg:w="2"/><text x="50.6859%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::DBOptions::AccessHint&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::DBOptions::AccessHint, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::DBOptions::AccessHint&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="50.4577%" y="117" width="0.0218%" height="15" fill="rgb(227,119,45)" fg:x="2315" fg:w="1"/><text x="50.7077%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::__itoa::__base_10_u32[abi:v15006] (1 samples, 0.02%)</title><rect x="50.5449%" y="149" width="0.0218%" height="15" fill="rgb(205,109,36)" fg:x="2319" fg:w="1"/><text x="50.7949%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.02%)</title><rect x="50.5667%" y="149" width="0.0218%" height="15" fill="rgb(205,6,39)" fg:x="2320" fg:w="1"/><text x="50.8167%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (5 samples, 0.11%)</title><rect x="50.5885%" y="149" width="0.1090%" height="15" fill="rgb(221,32,16)" fg:x="2321" fg:w="5"/><text x="50.8385%" y="159.50"></text></g><g><title>libsystem_c.dylib`snprintf (3 samples, 0.07%)</title><rect x="50.6321%" y="133" width="0.0654%" height="15" fill="rgb(228,144,50)" fg:x="2323" fg:w="3"/><text x="50.8821%" y="143.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (3 samples, 0.07%)</title><rect x="50.6321%" y="117" width="0.0654%" height="15" fill="rgb(229,201,53)" fg:x="2323" fg:w="3"/><text x="50.8821%" y="127.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (2 samples, 0.04%)</title><rect x="50.6539%" y="101" width="0.0436%" height="15" fill="rgb(249,153,27)" fg:x="2324" fg:w="2"/><text x="50.9039%" y="111.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.02%)</title><rect x="50.6757%" y="85" width="0.0218%" height="15" fill="rgb(227,106,25)" fg:x="2325" fg:w="1"/><text x="50.9257%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="50.6975%" y="149" width="0.0218%" height="15" fill="rgb(230,65,29)" fg:x="2326" fg:w="1"/><text x="50.9475%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (32 samples, 0.70%)</title><rect x="50.0436%" y="181" width="0.6975%" height="15" fill="rgb(221,57,46)" fg:x="2296" fg:w="32"/><text x="50.2936%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.26%)</title><rect x="50.4795%" y="165" width="0.2616%" height="15" fill="rgb(229,161,17)" fg:x="2316" fg:w="12"/><text x="50.7295%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="50.7193%" y="149" width="0.0218%" height="15" fill="rgb(222,213,11)" fg:x="2327" fg:w="1"/><text x="50.9693%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (332 samples, 7.24%)</title><rect x="43.5266%" y="229" width="7.2363%" height="15" fill="rgb(235,35,13)" fg:x="1997" fg:w="332"/><text x="43.7766%" y="239.50">rusk-walle..</text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (331 samples, 7.21%)</title><rect x="43.5484%" y="213" width="7.2145%" height="15" fill="rgb(233,158,34)" fg:x="1998" fg:w="331"/><text x="43.7984%" y="223.50">rusk-walle..</text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (112 samples, 2.44%)</title><rect x="48.3217%" y="197" width="2.4412%" height="15" fill="rgb(215,151,48)" fg:x="2217" fg:w="112"/><text x="48.5717%" y="207.50">ru..</text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="50.7411%" y="181" width="0.0218%" height="15" fill="rgb(229,84,14)" fg:x="2328" fg:w="1"/><text x="50.9911%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="50.7847%" y="213" width="0.0218%" height="15" fill="rgb(229,68,14)" fg:x="2330" fg:w="1"/><text x="51.0347%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (3 samples, 0.07%)</title><rect x="50.8065%" y="213" width="0.0654%" height="15" fill="rgb(243,106,26)" fg:x="2331" fg:w="3"/><text x="51.0565%" y="223.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (2 samples, 0.04%)</title><rect x="50.8718%" y="213" width="0.0436%" height="15" fill="rgb(206,45,38)" fg:x="2334" fg:w="2"/><text x="51.1218%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="50.9154%" y="213" width="0.0218%" height="15" fill="rgb(226,6,15)" fg:x="2336" fg:w="1"/><text x="51.1654%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.11%)</title><rect x="50.9372%" y="213" width="0.1090%" height="15" fill="rgb(232,22,54)" fg:x="2337" fg:w="5"/><text x="51.1872%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="51.0462%" y="213" width="0.0218%" height="15" fill="rgb(229,222,32)" fg:x="2342" fg:w="1"/><text x="51.2962%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="51.0680%" y="213" width="0.0218%" height="15" fill="rgb(228,62,29)" fg:x="2343" fg:w="1"/><text x="51.3180%" y="223.50"></text></g><g><title>libc+ (3 samples, 0.07%)</title><rect x="51.0898%" y="197" width="0.0654%" height="15" fill="rgb(251,103,34)" fg:x="2344" fg:w="3"/><text x="51.3398%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="51.1552%" y="197" width="0.0436%" height="15" fill="rgb(233,12,30)" fg:x="2347" fg:w="2"/><text x="51.4052%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="51.1988%" y="197" width="0.0218%" height="15" fill="rgb(238,52,0)" fg:x="2349" fg:w="1"/><text x="51.4488%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="51.2206%" y="197" width="0.0654%" height="15" fill="rgb(223,98,5)" fg:x="2350" fg:w="3"/><text x="51.4706%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="51.2860%" y="197" width="0.0436%" height="15" fill="rgb(228,75,37)" fg:x="2353" fg:w="2"/><text x="51.5360%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="51.3296%" y="197" width="0.0654%" height="15" fill="rgb(205,115,49)" fg:x="2355" fg:w="3"/><text x="51.5796%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="51.3949%" y="197" width="0.0218%" height="15" fill="rgb(250,154,43)" fg:x="2358" fg:w="1"/><text x="51.6449%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="51.4167%" y="197" width="0.0218%" height="15" fill="rgb(226,43,29)" fg:x="2359" fg:w="1"/><text x="51.6667%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="51.4385%" y="197" width="0.0436%" height="15" fill="rgb(249,228,39)" fg:x="2360" fg:w="2"/><text x="51.6885%" y="207.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="51.6129%" y="181" width="0.0218%" height="15" fill="rgb(216,79,43)" fg:x="2368" fg:w="1"/><text x="51.8629%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="51.6347%" y="181" width="0.0218%" height="15" fill="rgb(228,95,12)" fg:x="2369" fg:w="1"/><text x="51.8847%" y="191.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="51.7655%" y="165" width="0.0218%" height="15" fill="rgb(249,221,15)" fg:x="2375" fg:w="1"/><text x="52.0155%" y="175.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="51.7873%" y="165" width="0.0218%" height="15" fill="rgb(233,34,13)" fg:x="2376" fg:w="1"/><text x="52.0373%" y="175.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="51.8091%" y="165" width="0.0218%" height="15" fill="rgb(214,103,39)" fg:x="2377" fg:w="1"/><text x="52.0591%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="51.9180%" y="149" width="0.0218%" height="15" fill="rgb(251,126,39)" fg:x="2382" fg:w="1"/><text x="52.1680%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="51.9180%" y="133" width="0.0218%" height="15" fill="rgb(214,216,36)" fg:x="2382" fg:w="1"/><text x="52.1680%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="51.9180%" y="117" width="0.0218%" height="15" fill="rgb(220,221,8)" fg:x="2382" fg:w="1"/><text x="52.1680%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="51.9180%" y="101" width="0.0218%" height="15" fill="rgb(240,216,3)" fg:x="2382" fg:w="1"/><text x="52.1680%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="51.9180%" y="85" width="0.0218%" height="15" fill="rgb(232,218,17)" fg:x="2382" fg:w="1"/><text x="52.1680%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="51.9398%" y="149" width="0.0654%" height="15" fill="rgb(229,163,45)" fg:x="2383" fg:w="3"/><text x="52.1898%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="52.0052%" y="149" width="0.0436%" height="15" fill="rgb(231,110,42)" fg:x="2386" fg:w="2"/><text x="52.2552%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="52.0270%" y="133" width="0.0218%" height="15" fill="rgb(208,170,48)" fg:x="2387" fg:w="1"/><text x="52.2770%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (11 samples, 0.24%)</title><rect x="51.8309%" y="165" width="0.2398%" height="15" fill="rgb(239,116,25)" fg:x="2378" fg:w="11"/><text x="52.0809%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="52.0488%" y="149" width="0.0218%" height="15" fill="rgb(219,200,50)" fg:x="2388" fg:w="1"/><text x="52.2988%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (24 samples, 0.52%)</title><rect x="51.6565%" y="181" width="0.5231%" height="15" fill="rgb(245,200,0)" fg:x="2370" fg:w="24"/><text x="51.9065%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.11%)</title><rect x="52.0706%" y="165" width="0.1090%" height="15" fill="rgb(245,119,33)" fg:x="2389" fg:w="5"/><text x="52.3206%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="52.1796%" y="181" width="0.0218%" height="15" fill="rgb(231,125,12)" fg:x="2394" fg:w="1"/><text x="52.4296%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="52.2014%" y="181" width="0.0654%" height="15" fill="rgb(216,96,41)" fg:x="2395" fg:w="3"/><text x="52.4514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="52.2668%" y="181" width="0.0436%" height="15" fill="rgb(248,43,45)" fg:x="2398" fg:w="2"/><text x="52.5168%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="52.3104%" y="181" width="0.0436%" height="15" fill="rgb(217,222,7)" fg:x="2400" fg:w="2"/><text x="52.5604%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.37%)</title><rect x="52.3540%" y="181" width="0.3705%" height="15" fill="rgb(233,28,6)" fg:x="2402" fg:w="17"/><text x="52.6040%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="52.7245%" y="181" width="0.0218%" height="15" fill="rgb(231,218,15)" fg:x="2419" fg:w="1"/><text x="52.9745%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="52.7463%" y="117" width="0.0218%" height="15" fill="rgb(226,171,48)" fg:x="2420" fg:w="1"/><text x="52.9963%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (2 samples, 0.04%)</title><rect x="52.7463%" y="165" width="0.0436%" height="15" fill="rgb(235,201,9)" fg:x="2420" fg:w="2"/><text x="52.9963%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="52.7463%" y="149" width="0.0436%" height="15" fill="rgb(217,80,15)" fg:x="2420" fg:w="2"/><text x="52.9963%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="52.7463%" y="133" width="0.0436%" height="15" fill="rgb(219,152,8)" fg:x="2420" fg:w="2"/><text x="52.9963%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetId (1 samples, 0.02%)</title><rect x="52.7681%" y="117" width="0.0218%" height="15" fill="rgb(243,107,38)" fg:x="2421" fg:w="1"/><text x="53.0181%" y="127.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="52.8117%" y="149" width="0.0218%" height="15" fill="rgb(231,17,5)" fg:x="2423" fg:w="1"/><text x="53.0617%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="52.8335%" y="149" width="0.0218%" height="15" fill="rgb(209,25,54)" fg:x="2424" fg:w="1"/><text x="53.0835%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="52.8335%" y="133" width="0.0218%" height="15" fill="rgb(219,0,2)" fg:x="2424" fg:w="1"/><text x="53.0835%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="52.8335%" y="117" width="0.0218%" height="15" fill="rgb(246,9,5)" fg:x="2424" fg:w="1"/><text x="53.0835%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="52.8553%" y="149" width="0.0218%" height="15" fill="rgb(226,159,4)" fg:x="2425" fg:w="1"/><text x="53.1053%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::EndsWith(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="52.8771%" y="149" width="0.0218%" height="15" fill="rgb(219,175,34)" fg:x="2426" fg:w="1"/><text x="53.1271%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="52.8989%" y="133" width="0.0436%" height="15" fill="rgb(236,10,46)" fg:x="2427" fg:w="2"/><text x="53.1489%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="52.8989%" y="117" width="0.0436%" height="15" fill="rgb(240,211,16)" fg:x="2427" fg:w="2"/><text x="53.1489%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="52.9425%" y="133" width="0.0218%" height="15" fill="rgb(205,3,43)" fg:x="2429" fg:w="1"/><text x="53.1925%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="52.9643%" y="133" width="0.0218%" height="15" fill="rgb(245,7,22)" fg:x="2430" fg:w="1"/><text x="53.2143%" y="143.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="52.9861%" y="117" width="0.0218%" height="15" fill="rgb(239,132,32)" fg:x="2431" fg:w="1"/><text x="53.2361%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="52.7899%" y="165" width="0.2398%" height="15" fill="rgb(228,202,34)" fg:x="2422" fg:w="11"/><text x="53.0399%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="52.8989%" y="149" width="0.1308%" height="15" fill="rgb(254,200,22)" fg:x="2427" fg:w="6"/><text x="53.1489%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="52.9861%" y="133" width="0.0436%" height="15" fill="rgb(219,10,39)" fg:x="2431" fg:w="2"/><text x="53.2361%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::DBOptions::AccessHint&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::DBOptions::AccessHint, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::DBOptions::AccessHint&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="53.0078%" y="117" width="0.0218%" height="15" fill="rgb(226,210,39)" fg:x="2432" fg:w="1"/><text x="53.2578%" y="127.50"></text></g><g><title>libc++.1.dylib`std::__1::__itoa::__base_10_u32[abi:v15006] (1 samples, 0.02%)</title><rect x="53.0950%" y="149" width="0.0218%" height="15" fill="rgb(208,219,16)" fg:x="2436" fg:w="1"/><text x="53.3450%" y="159.50"></text></g><g><title>libsystem_c.dylib`__dtoa (3 samples, 0.07%)</title><rect x="53.1386%" y="85" width="0.0654%" height="15" fill="rgb(216,158,51)" fg:x="2438" fg:w="3"/><text x="53.3886%" y="95.50"></text></g><g><title>libsystem_c.dylib`__rv_alloc_D2A (1 samples, 0.02%)</title><rect x="53.1822%" y="69" width="0.0218%" height="15" fill="rgb(233,14,44)" fg:x="2440" fg:w="1"/><text x="53.4322%" y="79.50"></text></g><g><title>libsystem_c.dylib`__Balloc_D2A (1 samples, 0.02%)</title><rect x="53.1822%" y="53" width="0.0218%" height="15" fill="rgb(237,97,39)" fg:x="2440" fg:w="1"/><text x="53.4322%" y="63.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (5 samples, 0.11%)</title><rect x="53.1168%" y="149" width="0.1090%" height="15" fill="rgb(218,198,43)" fg:x="2437" fg:w="5"/><text x="53.3668%" y="159.50"></text></g><g><title>libsystem_c.dylib`snprintf (5 samples, 0.11%)</title><rect x="53.1168%" y="133" width="0.1090%" height="15" fill="rgb(231,104,20)" fg:x="2437" fg:w="5"/><text x="53.3668%" y="143.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (5 samples, 0.11%)</title><rect x="53.1168%" y="117" width="0.1090%" height="15" fill="rgb(254,36,13)" fg:x="2437" fg:w="5"/><text x="53.3668%" y="127.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (5 samples, 0.11%)</title><rect x="53.1168%" y="101" width="0.1090%" height="15" fill="rgb(248,14,50)" fg:x="2437" fg:w="5"/><text x="53.3668%" y="111.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (1 samples, 0.02%)</title><rect x="53.2040%" y="85" width="0.0218%" height="15" fill="rgb(217,107,29)" fg:x="2441" fg:w="1"/><text x="53.4540%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="53.0296%" y="165" width="0.2180%" height="15" fill="rgb(251,169,33)" fg:x="2433" fg:w="10"/><text x="53.2796%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="53.2258%" y="149" width="0.0218%" height="15" fill="rgb(217,108,32)" fg:x="2442" fg:w="1"/><text x="53.4758%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (25 samples, 0.54%)</title><rect x="52.7463%" y="181" width="0.5449%" height="15" fill="rgb(219,66,42)" fg:x="2420" fg:w="25"/><text x="52.9963%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::CacheTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CacheTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::CacheTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.04%)</title><rect x="53.2476%" y="165" width="0.0436%" height="15" fill="rgb(206,180,7)" fg:x="2443" fg:w="2"/><text x="53.4976%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::CacheTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CacheTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::CacheTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="53.2912%" y="181" width="0.0218%" height="15" fill="rgb(208,226,31)" fg:x="2445" fg:w="1"/><text x="53.5412%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (85 samples, 1.85%)</title><rect x="51.4821%" y="197" width="1.8527%" height="15" fill="rgb(218,26,49)" fg:x="2362" fg:w="85"/><text x="51.7321%" y="207.50">r..</text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::CacheTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CacheTier, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::CacheTier&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::CacheTier&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="53.3130%" y="181" width="0.0218%" height="15" fill="rgb(233,197,48)" fg:x="2446" fg:w="1"/><text x="53.5630%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (104 samples, 2.27%)</title><rect x="51.0898%" y="213" width="2.2668%" height="15" fill="rgb(252,181,51)" fg:x="2344" fg:w="104"/><text x="51.3398%" y="223.50">r..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="53.3348%" y="197" width="0.0218%" height="15" fill="rgb(253,90,19)" fg:x="2447" fg:w="1"/><text x="53.5848%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::IsInstanceOf(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="53.3566%" y="213" width="0.0218%" height="15" fill="rgb(215,171,30)" fg:x="2448" fg:w="1"/><text x="53.6066%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="53.3784%" y="213" width="0.0218%" height="15" fill="rgb(214,222,9)" fg:x="2449" fg:w="1"/><text x="53.6284%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="53.9233%" y="197" width="0.0218%" height="15" fill="rgb(223,3,22)" fg:x="2474" fg:w="1"/><text x="54.1733%" y="207.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="54.0759%" y="181" width="0.0218%" height="15" fill="rgb(225,196,46)" fg:x="2481" fg:w="1"/><text x="54.3259%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="54.0976%" y="165" width="0.0218%" height="15" fill="rgb(209,110,37)" fg:x="2482" fg:w="1"/><text x="54.3476%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="54.0976%" y="149" width="0.0218%" height="15" fill="rgb(249,89,12)" fg:x="2482" fg:w="1"/><text x="54.3476%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="54.0976%" y="181" width="0.0436%" height="15" fill="rgb(226,27,33)" fg:x="2482" fg:w="2"/><text x="54.3476%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="54.1194%" y="165" width="0.0218%" height="15" fill="rgb(213,82,22)" fg:x="2483" fg:w="1"/><text x="54.3694%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="54.1194%" y="149" width="0.0218%" height="15" fill="rgb(248,140,0)" fg:x="2483" fg:w="1"/><text x="54.3694%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="54.1194%" y="133" width="0.0218%" height="15" fill="rgb(228,106,3)" fg:x="2483" fg:w="1"/><text x="54.3694%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="54.1412%" y="181" width="0.0218%" height="15" fill="rgb(209,23,37)" fg:x="2484" fg:w="1"/><text x="54.3912%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (19 samples, 0.41%)</title><rect x="53.9451%" y="197" width="0.4141%" height="15" fill="rgb(241,93,50)" fg:x="2475" fg:w="19"/><text x="54.1951%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.20%)</title><rect x="54.1630%" y="181" width="0.1962%" height="15" fill="rgb(253,46,43)" fg:x="2485" fg:w="9"/><text x="54.4130%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (2 samples, 0.04%)</title><rect x="54.3592%" y="197" width="0.0436%" height="15" fill="rgb(226,206,43)" fg:x="2494" fg:w="2"/><text x="54.6092%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="54.4028%" y="197" width="0.0436%" height="15" fill="rgb(217,54,7)" fg:x="2496" fg:w="2"/><text x="54.6528%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="54.4464%" y="197" width="0.0654%" height="15" fill="rgb(223,5,52)" fg:x="2498" fg:w="3"/><text x="54.6964%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.15%)</title><rect x="54.5118%" y="197" width="0.1526%" height="15" fill="rgb(206,52,46)" fg:x="2501" fg:w="7"/><text x="54.7618%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="54.6643%" y="197" width="0.0218%" height="15" fill="rgb(253,136,11)" fg:x="2508" fg:w="1"/><text x="54.9143%" y="207.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memchr (1 samples, 0.02%)</title><rect x="54.7515%" y="181" width="0.0218%" height="15" fill="rgb(208,106,33)" fg:x="2512" fg:w="1"/><text x="55.0015%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (6 samples, 0.13%)</title><rect x="54.7733%" y="181" width="0.1308%" height="15" fill="rgb(206,54,4)" fg:x="2513" fg:w="6"/><text x="55.0233%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (2 samples, 0.04%)</title><rect x="54.9041%" y="181" width="0.0436%" height="15" fill="rgb(213,3,15)" fg:x="2519" fg:w="2"/><text x="55.1541%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="54.9477%" y="181" width="0.0436%" height="15" fill="rgb(252,211,39)" fg:x="2521" fg:w="2"/><text x="55.1977%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (4 samples, 0.09%)</title><rect x="54.9913%" y="181" width="0.0872%" height="15" fill="rgb(223,6,36)" fg:x="2523" fg:w="4"/><text x="55.2413%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.13%)</title><rect x="55.0785%" y="181" width="0.1308%" height="15" fill="rgb(252,169,45)" fg:x="2527" fg:w="6"/><text x="55.3285%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (26 samples, 0.57%)</title><rect x="54.6861%" y="197" width="0.5667%" height="15" fill="rgb(212,48,26)" fg:x="2509" fg:w="26"/><text x="54.9361%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="55.2092%" y="181" width="0.0436%" height="15" fill="rgb(251,102,48)" fg:x="2533" fg:w="2"/><text x="55.4592%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="55.2528%" y="197" width="0.0654%" height="15" fill="rgb(243,208,16)" fg:x="2535" fg:w="3"/><text x="55.5028%" y="207.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (6 samples, 0.13%)</title><rect x="55.3182%" y="197" width="0.1308%" height="15" fill="rgb(219,96,24)" fg:x="2538" fg:w="6"/><text x="55.5682%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::__next_prime (2 samples, 0.04%)</title><rect x="55.7541%" y="181" width="0.0436%" height="15" fill="rgb(219,33,29)" fg:x="2558" fg:w="2"/><text x="56.0041%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="55.7977%" y="181" width="0.0218%" height="15" fill="rgb(223,176,5)" fg:x="2560" fg:w="1"/><text x="56.0477%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="55.8413%" y="149" width="0.0436%" height="15" fill="rgb(228,140,14)" fg:x="2562" fg:w="2"/><text x="56.0913%" y="159.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="55.8195%" y="181" width="0.1308%" height="15" fill="rgb(217,179,31)" fg:x="2561" fg:w="6"/><text x="56.0695%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (5 samples, 0.11%)</title><rect x="55.8413%" y="165" width="0.1090%" height="15" fill="rgb(230,9,30)" fg:x="2562" fg:w="5"/><text x="56.0913%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="55.8849%" y="149" width="0.0654%" height="15" fill="rgb(230,136,20)" fg:x="2564" fg:w="3"/><text x="56.1349%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="55.9503%" y="181" width="0.0218%" height="15" fill="rgb(215,210,22)" fg:x="2567" fg:w="1"/><text x="56.2003%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="55.9503%" y="165" width="0.0218%" height="15" fill="rgb(218,43,5)" fg:x="2567" fg:w="1"/><text x="56.2003%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="55.9503%" y="149" width="0.0218%" height="15" fill="rgb(216,11,5)" fg:x="2567" fg:w="1"/><text x="56.2003%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="55.9721%" y="181" width="0.0218%" height="15" fill="rgb(209,82,29)" fg:x="2568" fg:w="1"/><text x="56.2221%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.09%)</title><rect x="55.9939%" y="181" width="0.0872%" height="15" fill="rgb(244,115,12)" fg:x="2569" fg:w="4"/><text x="56.2439%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="56.0811%" y="181" width="0.0654%" height="15" fill="rgb(222,82,18)" fg:x="2573" fg:w="3"/><text x="56.3311%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="56.1901%" y="165" width="0.0218%" height="15" fill="rgb(249,227,8)" fg:x="2578" fg:w="1"/><text x="56.4401%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (131 samples, 2.86%)</title><rect x="53.4002%" y="213" width="2.8553%" height="15" fill="rgb(253,141,45)" fg:x="2450" fg:w="131"/><text x="53.6502%" y="223.50">ru..</text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (37 samples, 0.81%)</title><rect x="55.4490%" y="197" width="0.8065%" height="15" fill="rgb(234,184,4)" fg:x="2544" fg:w="37"/><text x="55.6990%" y="207.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="56.1465%" y="181" width="0.1090%" height="15" fill="rgb(218,194,23)" fg:x="2576" fg:w="5"/><text x="56.3965%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="56.2119%" y="165" width="0.0436%" height="15" fill="rgb(235,66,41)" fg:x="2579" fg:w="2"/><text x="56.4619%" y="175.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="56.2554%" y="213" width="0.0218%" height="15" fill="rgb(245,217,1)" fg:x="2581" fg:w="1"/><text x="56.5054%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="56.4080%" y="165" width="0.0218%" height="15" fill="rgb(229,91,1)" fg:x="2588" fg:w="1"/><text x="56.6580%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (4 samples, 0.09%)</title><rect x="56.3862%" y="181" width="0.0872%" height="15" fill="rgb(207,101,30)" fg:x="2587" fg:w="4"/><text x="56.6362%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="56.4298%" y="165" width="0.0436%" height="15" fill="rgb(223,82,49)" fg:x="2589" fg:w="2"/><text x="56.6798%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="56.3644%" y="197" width="0.1308%" height="15" fill="rgb(218,167,17)" fg:x="2586" fg:w="6"/><text x="56.6144%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="56.4734%" y="181" width="0.0218%" height="15" fill="rgb(208,103,14)" fg:x="2591" fg:w="1"/><text x="56.7234%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="56.4952%" y="197" width="0.0218%" height="15" fill="rgb(238,20,8)" fg:x="2592" fg:w="1"/><text x="56.7452%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="56.4952%" y="181" width="0.0218%" height="15" fill="rgb(218,80,54)" fg:x="2592" fg:w="1"/><text x="56.7452%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="56.4952%" y="165" width="0.0218%" height="15" fill="rgb(240,144,17)" fg:x="2592" fg:w="1"/><text x="56.7452%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="56.5170%" y="197" width="0.0218%" height="15" fill="rgb(245,27,50)" fg:x="2593" fg:w="1"/><text x="56.7670%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.13%)</title><rect x="56.5388%" y="197" width="0.1308%" height="15" fill="rgb(251,51,7)" fg:x="2594" fg:w="6"/><text x="56.7888%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="56.6696%" y="197" width="0.0218%" height="15" fill="rgb(245,217,29)" fg:x="2600" fg:w="1"/><text x="56.9196%" y="207.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (22 samples, 0.48%)</title><rect x="56.2772%" y="213" width="0.4795%" height="15" fill="rgb(221,176,29)" fg:x="2582" fg:w="22"/><text x="56.5272%" y="223.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="56.6914%" y="197" width="0.0654%" height="15" fill="rgb(212,180,24)" fg:x="2601" fg:w="3"/><text x="56.9414%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="56.7350%" y="181" width="0.0218%" height="15" fill="rgb(254,24,2)" fg:x="2603" fg:w="1"/><text x="56.9850%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.26%)</title><rect x="56.8003%" y="197" width="0.2616%" height="15" fill="rgb(230,100,2)" fg:x="2606" fg:w="12"/><text x="57.0503%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="57.0619%" y="197" width="0.0218%" height="15" fill="rgb(219,142,25)" fg:x="2618" fg:w="1"/><text x="57.3119%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="57.0619%" y="181" width="0.0218%" height="15" fill="rgb(240,73,43)" fg:x="2618" fg:w="1"/><text x="57.3119%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (294 samples, 6.41%)</title><rect x="50.7629%" y="229" width="6.4080%" height="15" fill="rgb(214,114,15)" fg:x="2329" fg:w="294"/><text x="51.0129%" y="239.50">rusk-wal..</text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::~unordered_map[abi:v15006] (19 samples, 0.41%)</title><rect x="56.7568%" y="213" width="0.4141%" height="15" fill="rgb(207,130,4)" fg:x="2604" fg:w="19"/><text x="57.0068%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.09%)</title><rect x="57.0837%" y="197" width="0.0872%" height="15" fill="rgb(221,25,40)" fg:x="2619" fg:w="4"/><text x="57.3337%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="57.3017%" y="181" width="0.0218%" height="15" fill="rgb(241,184,7)" fg:x="2629" fg:w="1"/><text x="57.5517%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="57.3017%" y="165" width="0.0218%" height="15" fill="rgb(235,159,4)" fg:x="2629" fg:w="1"/><text x="57.5517%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="57.3017%" y="149" width="0.0218%" height="15" fill="rgb(214,87,48)" fg:x="2629" fg:w="1"/><text x="57.5517%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="57.3235%" y="181" width="0.0218%" height="15" fill="rgb(246,198,24)" fg:x="2630" fg:w="1"/><text x="57.5735%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="57.3452%" y="181" width="0.0218%" height="15" fill="rgb(209,66,40)" fg:x="2631" fg:w="1"/><text x="57.5952%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="57.3888%" y="133" width="0.0436%" height="15" fill="rgb(233,147,39)" fg:x="2633" fg:w="2"/><text x="57.6388%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.02%)</title><rect x="57.5414%" y="117" width="0.0218%" height="15" fill="rgb(231,145,52)" fg:x="2640" fg:w="1"/><text x="57.7914%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Mutex (1 samples, 0.02%)</title><rect x="57.5632%" y="117" width="0.0218%" height="15" fill="rgb(206,20,26)" fg:x="2641" fg:w="1"/><text x="57.8132%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="57.6504%" y="101" width="0.0654%" height="15" fill="rgb(238,220,4)" fg:x="2645" fg:w="3"/><text x="57.9004%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.07%)</title><rect x="57.6504%" y="85" width="0.0654%" height="15" fill="rgb(252,195,42)" fg:x="2645" fg:w="3"/><text x="57.9004%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.07%)</title><rect x="57.6504%" y="69" width="0.0654%" height="15" fill="rgb(209,10,6)" fg:x="2645" fg:w="3"/><text x="57.9004%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="57.7158%" y="101" width="0.0218%" height="15" fill="rgb(229,3,52)" fg:x="2648" fg:w="1"/><text x="57.9658%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="57.7376%" y="101" width="0.0218%" height="15" fill="rgb(253,49,37)" fg:x="2649" fg:w="1"/><text x="57.9876%" y="111.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$pthread_mutex_lock (1 samples, 0.02%)</title><rect x="57.7812%" y="85" width="0.0218%" height="15" fill="rgb(240,103,49)" fg:x="2651" fg:w="1"/><text x="58.0312%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::EvictFromLRU(unsigned long, rocksdb::autovector (1 samples, 0.02%)</title><rect x="57.8030%" y="85" width="0.0218%" height="15" fill="rgb(250,182,30)" fg:x="2652" fg:w="1"/><text x="58.0530%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::TryInsertIntoSecondaryCache(rocksdb::autovector (6 samples, 0.13%)</title><rect x="57.8248%" y="85" width="0.1308%" height="15" fill="rgb(248,8,30)" fg:x="2653" fg:w="6"/><text x="58.0748%" y="95.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (11 samples, 0.24%)</title><rect x="57.7594%" y="101" width="0.2398%" height="15" fill="rgb(237,120,30)" fg:x="2650" fg:w="11"/><text x="58.0094%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Unlock (2 samples, 0.04%)</title><rect x="57.9555%" y="85" width="0.0436%" height="15" fill="rgb(221,146,34)" fg:x="2659" fg:w="2"/><text x="58.2055%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="57.9773%" y="69" width="0.0218%" height="15" fill="rgb(242,55,13)" fg:x="2660" fg:w="1"/><text x="58.2273%" y="79.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (38 samples, 0.83%)</title><rect x="57.1927%" y="197" width="0.8282%" height="15" fill="rgb(242,112,31)" fg:x="2624" fg:w="38"/><text x="57.4427%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (30 samples, 0.65%)</title><rect x="57.3670%" y="181" width="0.6539%" height="15" fill="rgb(249,192,27)" fg:x="2632" fg:w="30"/><text x="57.6170%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (29 samples, 0.63%)</title><rect x="57.3888%" y="165" width="0.6321%" height="15" fill="rgb(208,204,44)" fg:x="2633" fg:w="29"/><text x="57.6388%" y="175.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (29 samples, 0.63%)</title><rect x="57.3888%" y="149" width="0.6321%" height="15" fill="rgb(208,93,54)" fg:x="2633" fg:w="29"/><text x="57.6388%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (27 samples, 0.59%)</title><rect x="57.4324%" y="133" width="0.5885%" height="15" fill="rgb(242,1,31)" fg:x="2635" fg:w="27"/><text x="57.6824%" y="143.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (20 samples, 0.44%)</title><rect x="57.5850%" y="117" width="0.4359%" height="15" fill="rgb(241,83,25)" fg:x="2642" fg:w="20"/><text x="57.8350%" y="127.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Mutex (1 samples, 0.02%)</title><rect x="57.9991%" y="101" width="0.0218%" height="15" fill="rgb(205,169,50)" fg:x="2661" fg:w="1"/><text x="58.2491%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::LoadFactory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (40 samples, 0.87%)</title><rect x="57.1709%" y="229" width="0.8718%" height="15" fill="rgb(239,186,37)" fg:x="2623" fg:w="40"/><text x="57.4209%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (39 samples, 0.85%)</title><rect x="57.1927%" y="213" width="0.8500%" height="15" fill="rgb(205,221,10)" fg:x="2624" fg:w="39"/><text x="57.4427%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::RegisterOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="58.0209%" y="197" width="0.0218%" height="15" fill="rgb(218,196,15)" fg:x="2662" fg:w="1"/><text x="58.2709%" y="207.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::Configurable::RegisteredOptions, std::__1::allocator&lt;rocksdb::Configurable::RegisteredOptions&gt;&gt;::__emplace_back_slow_path&lt;rocksdb::Configurable::RegisteredOptions&amp;&gt; (1 samples, 0.02%)</title><rect x="58.0209%" y="181" width="0.0218%" height="15" fill="rgb(218,196,35)" fg:x="2662" fg:w="1"/><text x="58.2709%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="58.0209%" y="165" width="0.0218%" height="15" fill="rgb(233,63,24)" fg:x="2662" fg:w="1"/><text x="58.2709%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (683 samples, 14.89%)</title><rect x="43.1997%" y="245" width="14.8867%" height="15" fill="rgb(225,8,4)" fg:x="1982" fg:w="683"/><text x="43.4497%" y="255.50">rusk-wallet`rocksdb::Ta..</text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="58.0427%" y="229" width="0.0436%" height="15" fill="rgb(234,105,35)" fg:x="2663" fg:w="2"/><text x="58.2927%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="58.0863%" y="245" width="0.1308%" height="15" fill="rgb(236,21,32)" fg:x="2665" fg:w="6"/><text x="58.3363%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (3 samples, 0.07%)</title><rect x="58.1517%" y="229" width="0.0654%" height="15" fill="rgb(228,109,6)" fg:x="2668" fg:w="3"/><text x="58.4017%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="58.1953%" y="213" width="0.0218%" height="15" fill="rgb(229,215,31)" fg:x="2670" fg:w="1"/><text x="58.4453%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (712 samples, 15.52%)</title><rect x="42.7201%" y="261" width="15.5187%" height="15" fill="rgb(221,52,54)" fg:x="1960" fg:w="712"/><text x="42.9701%" y="271.50">rusk-wallet`rocksdb::Opt..</text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::SliceTransform const&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::SliceTransform const&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="58.2171%" y="245" width="0.0218%" height="15" fill="rgb(252,129,43)" fg:x="2671" fg:w="1"/><text x="58.4671%" y="255.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::CompactionFilterFactory&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::CompactionFilterFactory&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="58.2389%" y="261" width="0.0218%" height="15" fill="rgb(248,183,27)" fg:x="2672" fg:w="1"/><text x="58.4889%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::MergeOperator&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::MergeOperator&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="58.2607%" y="261" width="0.0218%" height="15" fill="rgb(250,0,22)" fg:x="2673" fg:w="1"/><text x="58.5107%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (721 samples, 15.71%)</title><rect x="42.5894%" y="277" width="15.7149%" height="15" fill="rgb(213,166,10)" fg:x="1954" fg:w="721"/><text x="42.8394%" y="287.50">rusk-wallet`rocksdb::Con..</text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::SliceTransform const&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::AsCustomSharedPtr&lt;rocksdb::SliceTransform const&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="58.2825%" y="261" width="0.0218%" height="15" fill="rgb(207,163,36)" fg:x="2674" fg:w="1"/><text x="58.5325%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="58.3043%" y="277" width="0.1744%" height="15" fill="rgb(208,122,22)" fg:x="2675" fg:w="8"/><text x="58.5543%" y="287.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="58.5222%" y="261" width="0.0436%" height="15" fill="rgb(207,104,49)" fg:x="2685" fg:w="2"/><text x="58.7722%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;false&gt; (2 samples, 0.04%)</title><rect x="58.5658%" y="261" width="0.0436%" height="15" fill="rgb(248,211,50)" fg:x="2687" fg:w="2"/><text x="58.8158%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="58.6094%" y="261" width="0.0218%" height="15" fill="rgb(217,13,45)" fg:x="2689" fg:w="1"/><text x="58.8594%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="58.6094%" y="245" width="0.0218%" height="15" fill="rgb(211,216,49)" fg:x="2689" fg:w="1"/><text x="58.8594%" y="255.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="58.6094%" y="229" width="0.0218%" height="15" fill="rgb(221,58,53)" fg:x="2689" fg:w="1"/><text x="58.8594%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="58.6094%" y="213" width="0.0218%" height="15" fill="rgb(220,112,41)" fg:x="2689" fg:w="1"/><text x="58.8594%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="58.6094%" y="197" width="0.0218%" height="15" fill="rgb(236,38,28)" fg:x="2689" fg:w="1"/><text x="58.8594%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (8 samples, 0.17%)</title><rect x="58.6312%" y="261" width="0.1744%" height="15" fill="rgb(227,195,22)" fg:x="2690" fg:w="8"/><text x="58.8812%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.26%)</title><rect x="58.8056%" y="261" width="0.2616%" height="15" fill="rgb(214,55,33)" fg:x="2698" fg:w="12"/><text x="59.0556%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (45 samples, 0.98%)</title><rect x="59.0671%" y="261" width="0.9808%" height="15" fill="rgb(248,80,13)" fg:x="2710" fg:w="45"/><text x="59.3171%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (84 samples, 1.83%)</title><rect x="58.4786%" y="277" width="1.8309%" height="15" fill="rgb(238,52,6)" fg:x="2683" fg:w="84"/><text x="58.7286%" y="287.50">r..</text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (12 samples, 0.26%)</title><rect x="60.0480%" y="261" width="0.2616%" height="15" fill="rgb(224,198,47)" fg:x="2755" fg:w="12"/><text x="60.2980%" y="271.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="60.5711%" y="261" width="0.0436%" height="15" fill="rgb(233,171,20)" fg:x="2779" fg:w="2"/><text x="60.8211%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="60.6146%" y="261" width="0.0218%" height="15" fill="rgb(241,30,25)" fg:x="2781" fg:w="1"/><text x="60.8646%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (22 samples, 0.48%)</title><rect x="60.6364%" y="261" width="0.4795%" height="15" fill="rgb(207,171,38)" fg:x="2782" fg:w="22"/><text x="60.8864%" y="271.50"></text></g><g><title>libsystem_c.dylib`fastParse64 (3 samples, 0.07%)</title><rect x="61.1378%" y="213" width="0.0654%" height="15" fill="rgb(234,70,1)" fg:x="2805" fg:w="3"/><text x="61.3878%" y="223.50"></text></g><g><title>libsystem_c.dylib`localeconv_l (1 samples, 0.02%)</title><rect x="61.1813%" y="197" width="0.0218%" height="15" fill="rgb(232,178,18)" fg:x="2807" fg:w="1"/><text x="61.4313%" y="207.50"></text></g><g><title>libsystem_c.dylib`strtod (5 samples, 0.11%)</title><rect x="61.1160%" y="245" width="0.1090%" height="15" fill="rgb(241,78,40)" fg:x="2804" fg:w="5"/><text x="61.3660%" y="255.50"></text></g><g><title>libsystem_c.dylib`_ffpp_strtoencf64_l (5 samples, 0.11%)</title><rect x="61.1160%" y="229" width="0.1090%" height="15" fill="rgb(222,35,25)" fg:x="2804" fg:w="5"/><text x="61.3660%" y="239.50"></text></g><g><title>libsystem_c.dylib`localeconv_l (1 samples, 0.02%)</title><rect x="61.2031%" y="213" width="0.0218%" height="15" fill="rgb(207,92,16)" fg:x="2808" fg:w="1"/><text x="61.4531%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::stod(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="61.1160%" y="261" width="0.1308%" height="15" fill="rgb(216,59,51)" fg:x="2804" fg:w="6"/><text x="61.3660%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="61.2249%" y="245" width="0.0218%" height="15" fill="rgb(213,80,28)" fg:x="2809" fg:w="1"/><text x="61.4749%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::stoull(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="61.2467%" y="261" width="0.0218%" height="15" fill="rgb(220,93,7)" fg:x="2810" fg:w="1"/><text x="61.4967%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="61.2685%" y="261" width="0.0218%" height="15" fill="rgb(225,24,44)" fg:x="2811" fg:w="1"/><text x="61.5185%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="61.2903%" y="261" width="0.0218%" height="15" fill="rgb(243,74,40)" fg:x="2812" fg:w="1"/><text x="61.5403%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="61.3121%" y="261" width="0.0218%" height="15" fill="rgb(228,39,7)" fg:x="2813" fg:w="1"/><text x="61.5621%" y="271.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (13 samples, 0.28%)</title><rect x="61.3339%" y="261" width="0.2833%" height="15" fill="rgb(227,79,8)" fg:x="2814" fg:w="13"/><text x="61.5839%" y="271.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="61.6173%" y="261" width="0.0218%" height="15" fill="rgb(236,58,11)" fg:x="2827" fg:w="1"/><text x="61.8673%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="61.6609%" y="245" width="0.0436%" height="15" fill="rgb(249,63,35)" fg:x="2829" fg:w="2"/><text x="61.9109%" y="255.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="61.7044%" y="245" width="0.0218%" height="15" fill="rgb(252,114,16)" fg:x="2831" fg:w="1"/><text x="61.9544%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="61.8352%" y="229" width="0.0218%" height="15" fill="rgb(254,151,24)" fg:x="2837" fg:w="1"/><text x="62.0852%" y="239.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="61.8570%" y="229" width="0.0218%" height="15" fill="rgb(253,54,39)" fg:x="2838" fg:w="1"/><text x="62.1070%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.17%)</title><rect x="61.8788%" y="229" width="0.1744%" height="15" fill="rgb(243,25,45)" fg:x="2839" fg:w="8"/><text x="62.1288%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="62.0532%" y="229" width="0.0654%" height="15" fill="rgb(234,134,9)" fg:x="2847" fg:w="3"/><text x="62.3032%" y="239.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="62.1186%" y="229" width="0.0218%" height="15" fill="rgb(227,166,31)" fg:x="2850" fg:w="1"/><text x="62.3686%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="62.1404%" y="229" width="0.0218%" height="15" fill="rgb(245,143,41)" fg:x="2851" fg:w="1"/><text x="62.3904%" y="239.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="62.1840%" y="213" width="0.0436%" height="15" fill="rgb(238,181,32)" fg:x="2853" fg:w="2"/><text x="62.4340%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="62.2276%" y="197" width="0.0218%" height="15" fill="rgb(224,113,18)" fg:x="2855" fg:w="1"/><text x="62.4776%" y="207.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (9 samples, 0.20%)</title><rect x="62.2493%" y="197" width="0.1962%" height="15" fill="rgb(240,229,28)" fg:x="2856" fg:w="9"/><text x="62.4993%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 0.28%)</title><rect x="62.2276%" y="213" width="0.2833%" height="15" fill="rgb(250,185,3)" fg:x="2855" fg:w="13"/><text x="62.4776%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (3 samples, 0.07%)</title><rect x="62.4455%" y="197" width="0.0654%" height="15" fill="rgb(212,59,25)" fg:x="2865" fg:w="3"/><text x="62.6955%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (3 samples, 0.07%)</title><rect x="62.5545%" y="197" width="0.0654%" height="15" fill="rgb(221,87,20)" fg:x="2870" fg:w="3"/><text x="62.8045%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="62.6199%" y="197" width="0.0218%" height="15" fill="rgb(213,74,28)" fg:x="2873" fg:w="1"/><text x="62.8699%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="62.6417%" y="197" width="0.0218%" height="15" fill="rgb(224,132,34)" fg:x="2874" fg:w="1"/><text x="62.8917%" y="207.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (3 samples, 0.07%)</title><rect x="62.6635%" y="197" width="0.0654%" height="15" fill="rgb(222,101,24)" fg:x="2875" fg:w="3"/><text x="62.9135%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:v15006]&lt;std::nullptr_t&gt; (1 samples, 0.02%)</title><rect x="62.7289%" y="181" width="0.0218%" height="15" fill="rgb(254,142,4)" fg:x="2878" fg:w="1"/><text x="62.9789%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:v15006]&lt;std::nullptr_t&gt; (1 samples, 0.02%)</title><rect x="62.7507%" y="165" width="0.0218%" height="15" fill="rgb(230,229,49)" fg:x="2879" fg:w="1"/><text x="63.0007%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="62.7507%" y="181" width="0.0436%" height="15" fill="rgb(238,70,47)" fg:x="2879" fg:w="2"/><text x="63.0007%" y="191.50"></text></g><g><title>libsystem_c.dylib`strtol_l (1 samples, 0.02%)</title><rect x="62.7724%" y="165" width="0.0218%" height="15" fill="rgb(231,160,17)" fg:x="2880" fg:w="1"/><text x="63.0224%" y="175.50"></text></g><g><title>libsystem_c.dylib`strtol (3 samples, 0.07%)</title><rect x="62.7942%" y="181" width="0.0654%" height="15" fill="rgb(218,68,53)" fg:x="2881" fg:w="3"/><text x="63.0442%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="62.7289%" y="197" width="0.1526%" height="15" fill="rgb(236,111,10)" fg:x="2878" fg:w="7"/><text x="62.9789%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__error (1 samples, 0.02%)</title><rect x="62.8596%" y="181" width="0.0218%" height="15" fill="rgb(224,34,41)" fg:x="2884" fg:w="1"/><text x="63.1096%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::stoull(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="62.8814%" y="165" width="0.0436%" height="15" fill="rgb(241,118,19)" fg:x="2885" fg:w="2"/><text x="63.1314%" y="175.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (2 samples, 0.04%)</title><rect x="62.8814%" y="149" width="0.0436%" height="15" fill="rgb(238,129,25)" fg:x="2885" fg:w="2"/><text x="63.1314%" y="159.50"></text></g><g><title>libsystem_c.dylib`strtoull_l (1 samples, 0.02%)</title><rect x="62.9250%" y="165" width="0.0218%" height="15" fill="rgb(238,22,31)" fg:x="2887" fg:w="1"/><text x="63.1750%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint32(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="62.8814%" y="197" width="0.1090%" height="15" fill="rgb(222,174,48)" fg:x="2885" fg:w="5"/><text x="63.1314%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="62.8814%" y="181" width="0.1090%" height="15" fill="rgb(206,152,40)" fg:x="2885" fg:w="5"/><text x="63.1314%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__error (2 samples, 0.04%)</title><rect x="62.9468%" y="165" width="0.0436%" height="15" fill="rgb(218,99,54)" fg:x="2888" fg:w="2"/><text x="63.1968%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (29 samples, 0.63%)</title><rect x="62.5109%" y="213" width="0.6321%" height="15" fill="rgb(220,174,26)" fg:x="2868" fg:w="29"/><text x="62.7609%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="62.9904%" y="197" width="0.1526%" height="15" fill="rgb(245,116,9)" fg:x="2890" fg:w="7"/><text x="63.2404%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (4 samples, 0.09%)</title><rect x="63.0558%" y="181" width="0.0872%" height="15" fill="rgb(209,72,35)" fg:x="2893" fg:w="4"/><text x="63.3058%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="63.1212%" y="165" width="0.0218%" height="15" fill="rgb(226,126,21)" fg:x="2896" fg:w="1"/><text x="63.3712%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (46 samples, 1.00%)</title><rect x="62.1622%" y="229" width="1.0026%" height="15" fill="rgb(227,192,1)" fg:x="2852" fg:w="46"/><text x="62.4122%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="63.1430%" y="213" width="0.0218%" height="15" fill="rgb(237,180,29)" fg:x="2897" fg:w="1"/><text x="63.3930%" y="223.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="63.4263%" y="213" width="0.0436%" height="15" fill="rgb(230,197,35)" fg:x="2910" fg:w="2"/><text x="63.6763%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="63.4699%" y="213" width="0.0218%" height="15" fill="rgb(246,193,31)" fg:x="2912" fg:w="1"/><text x="63.7199%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="63.4699%" y="197" width="0.0218%" height="15" fill="rgb(241,36,4)" fg:x="2912" fg:w="1"/><text x="63.7199%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="63.4917%" y="213" width="0.0218%" height="15" fill="rgb(241,130,17)" fg:x="2913" fg:w="1"/><text x="63.7417%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="63.4917%" y="197" width="0.0218%" height="15" fill="rgb(206,137,32)" fg:x="2913" fg:w="1"/><text x="63.7417%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="63.5135%" y="213" width="0.0218%" height="15" fill="rgb(237,228,51)" fg:x="2914" fg:w="1"/><text x="63.7635%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="63.5353%" y="213" width="0.0654%" height="15" fill="rgb(243,6,42)" fg:x="2915" fg:w="3"/><text x="63.7853%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="63.6007%" y="213" width="0.0218%" height="15" fill="rgb(251,74,28)" fg:x="2918" fg:w="1"/><text x="63.8507%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.22%)</title><rect x="63.6225%" y="213" width="0.2180%" height="15" fill="rgb(218,20,49)" fg:x="2919" fg:w="10"/><text x="63.8725%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="63.8405%" y="213" width="0.0218%" height="15" fill="rgb(238,28,14)" fg:x="2929" fg:w="1"/><text x="64.0905%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="63.8622%" y="213" width="0.0218%" height="15" fill="rgb(229,40,46)" fg:x="2930" fg:w="1"/><text x="64.1122%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="63.8840%" y="213" width="0.0218%" height="15" fill="rgb(244,195,20)" fg:x="2931" fg:w="1"/><text x="64.1340%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="63.9494%" y="197" width="0.0218%" height="15" fill="rgb(253,56,35)" fg:x="2934" fg:w="1"/><text x="64.1994%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="63.9712%" y="197" width="0.0218%" height="15" fill="rgb(210,149,44)" fg:x="2935" fg:w="1"/><text x="64.2212%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (1 samples, 0.02%)</title><rect x="63.9930%" y="197" width="0.0218%" height="15" fill="rgb(240,135,12)" fg:x="2936" fg:w="1"/><text x="64.2430%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="64.0148%" y="197" width="0.0654%" height="15" fill="rgb(251,24,50)" fg:x="2937" fg:w="3"/><text x="64.2648%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 0.28%)</title><rect x="63.9058%" y="213" width="0.2833%" height="15" fill="rgb(243,200,47)" fg:x="2932" fg:w="13"/><text x="64.1558%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="64.0802%" y="197" width="0.1090%" height="15" fill="rgb(224,166,26)" fg:x="2940" fg:w="5"/><text x="64.3302%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="64.1892%" y="213" width="0.0218%" height="15" fill="rgb(233,0,47)" fg:x="2945" fg:w="1"/><text x="64.4392%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (2 samples, 0.04%)</title><rect x="64.2110%" y="213" width="0.0436%" height="15" fill="rgb(253,80,5)" fg:x="2946" fg:w="2"/><text x="64.4610%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::__next_prime (1 samples, 0.02%)</title><rect x="64.2764%" y="197" width="0.0218%" height="15" fill="rgb(214,133,25)" fg:x="2949" fg:w="1"/><text x="64.5264%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="64.2982%" y="197" width="0.0218%" height="15" fill="rgb(209,27,14)" fg:x="2950" fg:w="1"/><text x="64.5482%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="64.3200%" y="197" width="0.0218%" height="15" fill="rgb(219,102,51)" fg:x="2951" fg:w="1"/><text x="64.5700%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="64.3418%" y="197" width="0.0436%" height="15" fill="rgb(237,18,16)" fg:x="2952" fg:w="2"/><text x="64.5918%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="64.3854%" y="197" width="0.0218%" height="15" fill="rgb(241,85,17)" fg:x="2954" fg:w="1"/><text x="64.6354%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="64.4289%" y="181" width="0.0436%" height="15" fill="rgb(236,90,42)" fg:x="2956" fg:w="2"/><text x="64.6789%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="64.4725%" y="181" width="0.0436%" height="15" fill="rgb(249,57,21)" fg:x="2958" fg:w="2"/><text x="64.7225%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (133 samples, 2.90%)</title><rect x="61.6391%" y="261" width="2.8989%" height="15" fill="rgb(243,12,36)" fg:x="2828" fg:w="133"/><text x="61.8891%" y="271.50">ru..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (129 samples, 2.81%)</title><rect x="61.7262%" y="245" width="2.8117%" height="15" fill="rgb(253,128,47)" fg:x="2832" fg:w="129"/><text x="61.9762%" y="255.50">ru..</text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (63 samples, 1.37%)</title><rect x="63.1648%" y="229" width="1.3731%" height="15" fill="rgb(207,33,20)" fg:x="2898" fg:w="63"/><text x="63.4148%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 0.28%)</title><rect x="64.2546%" y="213" width="0.2833%" height="15" fill="rgb(233,215,35)" fg:x="2948" fg:w="13"/><text x="64.5046%" y="223.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="64.4071%" y="197" width="0.1308%" height="15" fill="rgb(249,188,52)" fg:x="2955" fg:w="6"/><text x="64.6571%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="64.5161%" y="181" width="0.0218%" height="15" fill="rgb(225,12,32)" fg:x="2960" fg:w="1"/><text x="64.7661%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="64.5379%" y="245" width="0.0436%" height="15" fill="rgb(247,98,14)" fg:x="2961" fg:w="2"/><text x="64.7879%" y="255.50"></text></g><g><title>libsystem_c.dylib`strtol_l (1 samples, 0.02%)</title><rect x="64.5597%" y="229" width="0.0218%" height="15" fill="rgb(247,219,48)" fg:x="2962" fg:w="1"/><text x="64.8097%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="64.5379%" y="261" width="0.0654%" height="15" fill="rgb(253,60,48)" fg:x="2961" fg:w="3"/><text x="64.7879%" y="271.50"></text></g><g><title>libsystem_c.dylib`strtol (1 samples, 0.02%)</title><rect x="64.5815%" y="245" width="0.0218%" height="15" fill="rgb(245,15,52)" fg:x="2963" fg:w="1"/><text x="64.8315%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint32(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="64.6033%" y="261" width="0.0218%" height="15" fill="rgb(220,133,28)" fg:x="2964" fg:w="1"/><text x="64.8533%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="64.6033%" y="245" width="0.0218%" height="15" fill="rgb(217,180,4)" fg:x="2964" fg:w="1"/><text x="64.8533%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__error (1 samples, 0.02%)</title><rect x="64.6033%" y="229" width="0.0218%" height="15" fill="rgb(251,24,1)" fg:x="2964" fg:w="1"/><text x="64.8533%" y="239.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$__error (2 samples, 0.04%)</title><rect x="64.6687%" y="245" width="0.0436%" height="15" fill="rgb(212,185,49)" fg:x="2967" fg:w="2"/><text x="64.9187%" y="255.50"></text></g><g><title>libsystem_c.dylib`strtoull_l (7 samples, 0.15%)</title><rect x="64.7341%" y="229" width="0.1526%" height="15" fill="rgb(215,175,22)" fg:x="2970" fg:w="7"/><text x="64.9841%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::stoull(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.26%)</title><rect x="64.7123%" y="245" width="0.2616%" height="15" fill="rgb(250,205,14)" fg:x="2969" fg:w="12"/><text x="64.9623%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="64.8867%" y="229" width="0.0872%" height="15" fill="rgb(225,211,22)" fg:x="2977" fg:w="4"/><text x="65.1367%" y="239.50"></text></g><g><title>libsystem_c.dylib`strtoull_l (1 samples, 0.02%)</title><rect x="64.9738%" y="245" width="0.0218%" height="15" fill="rgb(251,179,42)" fg:x="2981" fg:w="1"/><text x="65.2238%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (21 samples, 0.46%)</title><rect x="64.6251%" y="261" width="0.4577%" height="15" fill="rgb(208,216,51)" fg:x="2965" fg:w="21"/><text x="64.8751%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__error (4 samples, 0.09%)</title><rect x="64.9956%" y="245" width="0.0872%" height="15" fill="rgb(235,36,11)" fg:x="2982" fg:w="4"/><text x="65.2456%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="65.1046%" y="245" width="0.0218%" height="15" fill="rgb(213,189,28)" fg:x="2987" fg:w="1"/><text x="65.3546%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="65.1046%" y="229" width="0.0218%" height="15" fill="rgb(227,203,42)" fg:x="2987" fg:w="1"/><text x="65.3546%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="65.1264%" y="229" width="0.0436%" height="15" fill="rgb(244,72,36)" fg:x="2988" fg:w="2"/><text x="65.3764%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="65.1700%" y="229" width="0.0218%" height="15" fill="rgb(213,53,17)" fg:x="2990" fg:w="1"/><text x="65.4200%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ParseVector&lt;int&gt;(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (7 samples, 0.15%)</title><rect x="65.0828%" y="261" width="0.1526%" height="15" fill="rgb(207,167,3)" fg:x="2986" fg:w="7"/><text x="65.3328%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="65.1264%" y="245" width="0.1090%" height="15" fill="rgb(216,98,30)" fg:x="2988" fg:w="5"/><text x="65.3764%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.1918%" y="229" width="0.0436%" height="15" fill="rgb(236,123,15)" fg:x="2991" fg:w="2"/><text x="65.4418%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="65.1918%" y="213" width="0.0436%" height="15" fill="rgb(248,81,50)" fg:x="2991" fg:w="2"/><text x="65.4418%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="65.2136%" y="197" width="0.0218%" height="15" fill="rgb(214,120,4)" fg:x="2992" fg:w="1"/><text x="65.4636%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::PrepopulateBlobCache&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::PrepopulateBlobCache, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::PrepopulateBlobCache&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&amp;, rocksdb::ConfigOptions const&amp;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="65.2354%" y="261" width="0.0218%" height="15" fill="rgb(208,179,34)" fg:x="2993" fg:w="1"/><text x="65.4854%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="65.2354%" y="245" width="0.0218%" height="15" fill="rgb(227,140,7)" fg:x="2993" fg:w="1"/><text x="65.4854%" y="255.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="66.6739%" y="213" width="0.0436%" height="15" fill="rgb(214,22,6)" fg:x="3059" fg:w="2"/><text x="66.9239%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="66.6957%" y="197" width="0.0218%" height="15" fill="rgb(207,137,27)" fg:x="3060" fg:w="1"/><text x="66.9457%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="66.6957%" y="181" width="0.0218%" height="15" fill="rgb(210,8,46)" fg:x="3060" fg:w="1"/><text x="66.9457%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="66.6957%" y="165" width="0.0218%" height="15" fill="rgb(240,16,54)" fg:x="3060" fg:w="1"/><text x="66.9457%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="66.7175%" y="213" width="0.0436%" height="15" fill="rgb(211,209,29)" fg:x="3061" fg:w="2"/><text x="66.9675%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="66.7611%" y="213" width="0.0218%" height="15" fill="rgb(226,228,24)" fg:x="3063" fg:w="1"/><text x="67.0111%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by (9 samples, 0.20%)</title><rect x="66.6303%" y="229" width="0.1962%" height="15" fill="rgb(222,84,9)" fg:x="3057" fg:w="9"/><text x="66.8803%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="66.7829%" y="213" width="0.0436%" height="15" fill="rgb(234,203,30)" fg:x="3064" fg:w="2"/><text x="67.0329%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="66.8265%" y="229" width="0.0218%" height="15" fill="rgb(238,109,14)" fg:x="3066" fg:w="1"/><text x="67.0765%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (75 samples, 1.63%)</title><rect x="65.2572%" y="261" width="1.6347%" height="15" fill="rgb(233,206,34)" fg:x="2994" fg:w="75"/><text x="65.5072%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (43 samples, 0.94%)</title><rect x="65.9547%" y="245" width="0.9372%" height="15" fill="rgb(220,167,47)" fg:x="3026" fg:w="43"/><text x="66.2047%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="66.8483%" y="229" width="0.0436%" height="15" fill="rgb(238,105,10)" fg:x="3067" fg:w="2"/><text x="67.0983%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="66.8919%" y="229" width="0.0218%" height="15" fill="rgb(213,227,17)" fg:x="3069" fg:w="1"/><text x="67.1419%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="66.9137%" y="229" width="0.0436%" height="15" fill="rgb(217,132,38)" fg:x="3070" fg:w="2"/><text x="67.1637%" y="239.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="66.9573%" y="213" width="0.0218%" height="15" fill="rgb(242,146,4)" fg:x="3072" fg:w="1"/><text x="67.2073%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="66.9791%" y="213" width="0.0436%" height="15" fill="rgb(212,61,9)" fg:x="3073" fg:w="2"/><text x="67.2291%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="67.0227%" y="213" width="0.0218%" height="15" fill="rgb(247,126,22)" fg:x="3075" fg:w="1"/><text x="67.2727%" y="223.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="67.0445%" y="197" width="0.0436%" height="15" fill="rgb(220,196,2)" fg:x="3076" fg:w="2"/><text x="67.2945%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="67.0881%" y="181" width="0.0218%" height="15" fill="rgb(208,46,4)" fg:x="3078" fg:w="1"/><text x="67.3381%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__error (1 samples, 0.02%)</title><rect x="67.0881%" y="165" width="0.0218%" height="15" fill="rgb(252,104,46)" fg:x="3078" fg:w="1"/><text x="67.3381%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="67.0881%" y="197" width="0.0654%" height="15" fill="rgb(237,152,48)" fg:x="3078" fg:w="3"/><text x="67.3381%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="67.1099%" y="181" width="0.0436%" height="15" fill="rgb(221,59,37)" fg:x="3079" fg:w="2"/><text x="67.3599%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (6 samples, 0.13%)</title><rect x="67.0445%" y="213" width="0.1308%" height="15" fill="rgb(209,202,51)" fg:x="3076" fg:w="6"/><text x="67.2945%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="67.1534%" y="197" width="0.0218%" height="15" fill="rgb(228,81,30)" fg:x="3081" fg:w="1"/><text x="67.4034%" y="207.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="67.1970%" y="197" width="0.0218%" height="15" fill="rgb(227,42,39)" fg:x="3083" fg:w="1"/><text x="67.4470%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (3 samples, 0.07%)</title><rect x="67.2188%" y="197" width="0.0654%" height="15" fill="rgb(221,26,2)" fg:x="3084" fg:w="3"/><text x="67.4688%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="67.2624%" y="181" width="0.0218%" height="15" fill="rgb(254,61,31)" fg:x="3086" fg:w="1"/><text x="67.5124%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="67.2842%" y="197" width="0.0218%" height="15" fill="rgb(222,173,38)" fg:x="3087" fg:w="1"/><text x="67.5342%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="67.3060%" y="197" width="0.0218%" height="15" fill="rgb(218,50,12)" fg:x="3088" fg:w="1"/><text x="67.5560%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="67.3278%" y="181" width="0.0218%" height="15" fill="rgb(223,88,40)" fg:x="3089" fg:w="1"/><text x="67.5778%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="67.3496%" y="181" width="0.0218%" height="15" fill="rgb(237,54,19)" fg:x="3090" fg:w="1"/><text x="67.5996%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="67.3278%" y="197" width="0.0654%" height="15" fill="rgb(251,129,25)" fg:x="3089" fg:w="3"/><text x="67.5778%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="67.3714%" y="181" width="0.0218%" height="15" fill="rgb(238,97,19)" fg:x="3091" fg:w="1"/><text x="67.6214%" y="191.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="67.3932%" y="197" width="0.0218%" height="15" fill="rgb(240,169,18)" fg:x="3092" fg:w="1"/><text x="67.6432%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (23 samples, 0.50%)</title><rect x="66.9573%" y="229" width="0.5013%" height="15" fill="rgb(230,187,49)" fg:x="3072" fg:w="23"/><text x="67.2073%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 0.28%)</title><rect x="67.1752%" y="213" width="0.2833%" height="15" fill="rgb(209,44,26)" fg:x="3082" fg:w="13"/><text x="67.4252%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="67.4150%" y="197" width="0.0436%" height="15" fill="rgb(244,0,6)" fg:x="3093" fg:w="2"/><text x="67.6650%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="67.4150%" y="181" width="0.0436%" height="15" fill="rgb(248,18,21)" fg:x="3093" fg:w="2"/><text x="67.6650%" y="191.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_0, std::__1::allocator&lt;rocksdb::$_0&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.59%)</title><rect x="66.8919%" y="261" width="0.5885%" height="15" fill="rgb(245,180,19)" fg:x="3069" fg:w="27"/><text x="67.1419%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.59%)</title><rect x="66.8919%" y="245" width="0.5885%" height="15" fill="rgb(252,118,36)" fg:x="3069" fg:w="27"/><text x="67.1419%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="67.4586%" y="229" width="0.0218%" height="15" fill="rgb(210,224,19)" fg:x="3095" fg:w="1"/><text x="67.7086%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_1, std::__1::allocator&lt;rocksdb::$_1&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="67.4804%" y="261" width="0.0218%" height="15" fill="rgb(218,30,24)" fg:x="3096" fg:w="1"/><text x="67.7304%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompactionPri&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompactionPri&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompactionPri&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="67.5022%" y="261" width="0.0218%" height="15" fill="rgb(219,75,50)" fg:x="3097" fg:w="1"/><text x="67.7522%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (333 samples, 7.26%)</title><rect x="60.3095%" y="277" width="7.2581%" height="15" fill="rgb(234,72,50)" fg:x="2767" fg:w="333"/><text x="60.5595%" y="287.50">rusk-walle..</text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompressionType&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompressionType&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompressionType&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (2 samples, 0.04%)</title><rect x="67.5240%" y="261" width="0.0436%" height="15" fill="rgb(219,100,48)" fg:x="3098" fg:w="2"/><text x="67.7740%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ParseVector&lt;int&gt;(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.02%)</title><rect x="67.5676%" y="277" width="0.0218%" height="15" fill="rgb(253,5,41)" fg:x="3100" fg:w="1"/><text x="67.8176%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_0, std::__1::allocator&lt;rocksdb::$_0&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="67.5894%" y="277" width="0.0436%" height="15" fill="rgb(247,181,11)" fg:x="3101" fg:w="2"/><text x="67.8394%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;int&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;int&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string (2 samples, 0.04%)</title><rect x="67.6330%" y="277" width="0.0436%" height="15" fill="rgb(222,223,25)" fg:x="3103" fg:w="2"/><text x="67.8830%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1,262 samples, 27.51%)</title><rect x="40.2572%" y="293" width="27.5065%" height="15" fill="rgb(214,198,28)" fg:x="1847" fg:w="1262"/><text x="40.5072%" y="303.50">rusk-wallet`rocksdb::ConfigurableHelper::Con..</text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (4 samples, 0.09%)</title><rect x="67.6765%" y="277" width="0.0872%" height="15" fill="rgb(230,46,43)" fg:x="3105" fg:w="4"/><text x="67.9265%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="67.7637%" y="293" width="0.0654%" height="15" fill="rgb(233,65,53)" fg:x="3109" fg:w="3"/><text x="68.0137%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="67.8291%" y="293" width="0.0654%" height="15" fill="rgb(221,121,27)" fg:x="3112" fg:w="3"/><text x="68.0791%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="67.9163%" y="277" width="0.0218%" height="15" fill="rgb(247,70,47)" fg:x="3116" fg:w="1"/><text x="68.1663%" y="287.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="67.9381%" y="277" width="0.0436%" height="15" fill="rgb(228,85,35)" fg:x="3117" fg:w="2"/><text x="68.1881%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.02%)</title><rect x="67.9817%" y="277" width="0.0218%" height="15" fill="rgb(209,50,18)" fg:x="3119" fg:w="1"/><text x="68.2317%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="68.0035%" y="277" width="0.0218%" height="15" fill="rgb(250,19,35)" fg:x="3120" fg:w="1"/><text x="68.2535%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="68.0253%" y="277" width="0.0436%" height="15" fill="rgb(253,107,29)" fg:x="3121" fg:w="2"/><text x="68.2753%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (5 samples, 0.11%)</title><rect x="68.0689%" y="277" width="0.1090%" height="15" fill="rgb(252,179,29)" fg:x="3123" fg:w="5"/><text x="68.3189%" y="287.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="68.4612%" y="261" width="0.0218%" height="15" fill="rgb(238,194,6)" fg:x="3141" fg:w="1"/><text x="68.7112%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="68.4830%" y="261" width="0.0218%" height="15" fill="rgb(238,164,29)" fg:x="3142" fg:w="1"/><text x="68.7330%" y="271.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="68.6356%" y="229" width="0.0436%" height="15" fill="rgb(224,25,9)" fg:x="3149" fg:w="2"/><text x="68.8856%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.04%)</title><rect x="68.6356%" y="213" width="0.0436%" height="15" fill="rgb(244,153,23)" fg:x="3149" fg:w="2"/><text x="68.8856%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.04%)</title><rect x="68.6356%" y="197" width="0.0436%" height="15" fill="rgb(212,203,14)" fg:x="3149" fg:w="2"/><text x="68.8856%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.13%)</title><rect x="68.6792%" y="229" width="0.1308%" height="15" fill="rgb(220,164,20)" fg:x="3151" fg:w="6"/><text x="68.9292%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.44%)</title><rect x="68.5048%" y="261" width="0.4359%" height="15" fill="rgb(222,203,48)" fg:x="3143" fg:w="20"/><text x="68.7548%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (14 samples, 0.31%)</title><rect x="68.6356%" y="245" width="0.3051%" height="15" fill="rgb(215,159,22)" fg:x="3149" fg:w="14"/><text x="68.8856%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.13%)</title><rect x="68.8099%" y="229" width="0.1308%" height="15" fill="rgb(216,183,47)" fg:x="3157" fg:w="6"/><text x="69.0599%" y="239.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="68.9407%" y="261" width="0.0654%" height="15" fill="rgb(229,195,25)" fg:x="3163" fg:w="3"/><text x="69.1907%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.07%)</title><rect x="68.9407%" y="245" width="0.0654%" height="15" fill="rgb(224,132,51)" fg:x="3163" fg:w="3"/><text x="69.1907%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.07%)</title><rect x="68.9407%" y="229" width="0.0654%" height="15" fill="rgb(240,63,7)" fg:x="3163" fg:w="3"/><text x="69.1907%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (5 samples, 0.11%)</title><rect x="69.0061%" y="261" width="0.1090%" height="15" fill="rgb(249,182,41)" fg:x="3166" fg:w="5"/><text x="69.2561%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.24%)</title><rect x="69.1151%" y="261" width="0.2398%" height="15" fill="rgb(243,47,26)" fg:x="3171" fg:w="11"/><text x="69.3651%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (59 samples, 1.29%)</title><rect x="68.1779%" y="277" width="1.2860%" height="15" fill="rgb(233,48,2)" fg:x="3128" fg:w="59"/><text x="68.4279%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.11%)</title><rect x="69.3548%" y="261" width="0.1090%" height="15" fill="rgb(244,165,34)" fg:x="3182" fg:w="5"/><text x="69.6048%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1,375 samples, 29.97%)</title><rect x="39.5379%" y="309" width="29.9695%" height="15" fill="rgb(207,89,7)" fg:x="1814" fg:w="1375"/><text x="39.7879%" y="319.50">rusk-wallet`rocksdb::ConfigurableHelper::Configu..</text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (74 samples, 1.61%)</title><rect x="67.8945%" y="293" width="1.6129%" height="15" fill="rgb(244,117,36)" fg:x="3115" fg:w="74"/><text x="68.1445%" y="303.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="69.4638%" y="277" width="0.0436%" height="15" fill="rgb(226,144,34)" fg:x="3187" fg:w="2"/><text x="69.7138%" y="287.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="69.9651%" y="293" width="0.0436%" height="15" fill="rgb(213,23,19)" fg:x="3210" fg:w="2"/><text x="70.2151%" y="303.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (2 samples, 0.04%)</title><rect x="70.0087%" y="293" width="0.0436%" height="15" fill="rgb(217,75,12)" fg:x="3212" fg:w="2"/><text x="70.2587%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="70.0523%" y="293" width="0.0218%" height="15" fill="rgb(224,159,17)" fg:x="3214" fg:w="1"/><text x="70.3023%" y="303.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="70.4010%" y="277" width="0.0218%" height="15" fill="rgb(217,118,1)" fg:x="3230" fg:w="1"/><text x="70.6510%" y="287.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="70.4228%" y="277" width="0.0218%" height="15" fill="rgb(232,180,48)" fg:x="3231" fg:w="1"/><text x="70.6728%" y="287.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="70.5318%" y="261" width="0.0436%" height="15" fill="rgb(230,27,33)" fg:x="3236" fg:w="2"/><text x="70.7818%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="70.5754%" y="229" width="0.0218%" height="15" fill="rgb(205,31,21)" fg:x="3238" fg:w="1"/><text x="70.8254%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="70.5754%" y="213" width="0.0218%" height="15" fill="rgb(253,59,4)" fg:x="3238" fg:w="1"/><text x="70.8254%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="70.5972%" y="213" width="0.0218%" height="15" fill="rgb(224,201,9)" fg:x="3239" fg:w="1"/><text x="70.8472%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="70.5754%" y="261" width="0.0654%" height="15" fill="rgb(229,206,30)" fg:x="3238" fg:w="3"/><text x="70.8254%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.07%)</title><rect x="70.5754%" y="245" width="0.0654%" height="15" fill="rgb(212,67,47)" fg:x="3238" fg:w="3"/><text x="70.8254%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.04%)</title><rect x="70.5972%" y="229" width="0.0436%" height="15" fill="rgb(211,96,50)" fg:x="3239" fg:w="2"/><text x="70.8472%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="70.6190%" y="213" width="0.0218%" height="15" fill="rgb(252,114,18)" fg:x="3240" fg:w="1"/><text x="70.8690%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.02%)</title><rect x="70.6190%" y="197" width="0.0218%" height="15" fill="rgb(223,58,37)" fg:x="3240" fg:w="1"/><text x="70.8690%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="70.6408%" y="261" width="0.0436%" height="15" fill="rgb(237,70,4)" fg:x="3241" fg:w="2"/><text x="70.8908%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.11%)</title><rect x="70.6844%" y="261" width="0.1090%" height="15" fill="rgb(244,85,46)" fg:x="3243" fg:w="5"/><text x="70.9344%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="70.7934%" y="261" width="0.0436%" height="15" fill="rgb(223,39,52)" fg:x="3248" fg:w="2"/><text x="71.0434%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="70.7934%" y="245" width="0.0436%" height="15" fill="rgb(218,200,14)" fg:x="3248" fg:w="2"/><text x="71.0434%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.15%)</title><rect x="70.8370%" y="261" width="0.1526%" height="15" fill="rgb(208,171,16)" fg:x="3250" fg:w="7"/><text x="71.0870%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (26 samples, 0.57%)</title><rect x="70.4446%" y="277" width="0.5667%" height="15" fill="rgb(234,200,18)" fg:x="3232" fg:w="26"/><text x="70.6946%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="70.9895%" y="261" width="0.0218%" height="15" fill="rgb(228,45,11)" fg:x="3257" fg:w="1"/><text x="71.2395%" y="271.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="71.0113%" y="277" width="0.0218%" height="15" fill="rgb(237,182,11)" fg:x="3258" fg:w="1"/><text x="71.2613%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="71.0331%" y="277" width="0.0218%" height="15" fill="rgb(241,175,49)" fg:x="3259" fg:w="1"/><text x="71.2831%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="71.0549%" y="277" width="0.0654%" height="15" fill="rgb(247,38,35)" fg:x="3260" fg:w="3"/><text x="71.3049%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (63 samples, 1.37%)</title><rect x="70.0741%" y="293" width="1.3731%" height="15" fill="rgb(228,39,49)" fg:x="3215" fg:w="63"/><text x="70.3241%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (15 samples, 0.33%)</title><rect x="71.1203%" y="277" width="0.3269%" height="15" fill="rgb(226,101,26)" fg:x="3263" fg:w="15"/><text x="71.3703%" y="287.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="71.4473%" y="293" width="0.0436%" height="15" fill="rgb(206,141,19)" fg:x="3278" fg:w="2"/><text x="71.6973%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.09%)</title><rect x="71.4908%" y="293" width="0.0872%" height="15" fill="rgb(211,200,13)" fg:x="3280" fg:w="4"/><text x="71.7408%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (16 samples, 0.35%)</title><rect x="71.5780%" y="293" width="0.3487%" height="15" fill="rgb(241,121,6)" fg:x="3284" fg:w="16"/><text x="71.8280%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.09%)</title><rect x="71.9268%" y="293" width="0.0872%" height="15" fill="rgb(234,221,29)" fg:x="3300" fg:w="4"/><text x="72.1768%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (14 samples, 0.31%)</title><rect x="72.0139%" y="293" width="0.3051%" height="15" fill="rgb(229,136,5)" fg:x="3304" fg:w="14"/><text x="72.2639%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (9 samples, 0.20%)</title><rect x="72.3191%" y="293" width="0.1962%" height="15" fill="rgb(238,36,11)" fg:x="3318" fg:w="9"/><text x="72.5691%" y="303.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="72.5153%" y="293" width="0.0218%" height="15" fill="rgb(251,55,41)" fg:x="3327" fg:w="1"/><text x="72.7653%" y="303.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="72.6896%" y="277" width="0.0218%" height="15" fill="rgb(242,34,40)" fg:x="3335" fg:w="1"/><text x="72.9396%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="72.7114%" y="277" width="0.0218%" height="15" fill="rgb(215,42,17)" fg:x="3336" fg:w="1"/><text x="72.9614%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="72.7114%" y="261" width="0.0218%" height="15" fill="rgb(207,44,46)" fg:x="3336" fg:w="1"/><text x="72.9614%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="72.7332%" y="277" width="0.0218%" height="15" fill="rgb(211,206,28)" fg:x="3337" fg:w="1"/><text x="72.9832%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::assign (2 samples, 0.04%)</title><rect x="72.7550%" y="277" width="0.0436%" height="15" fill="rgb(237,167,16)" fg:x="3338" fg:w="2"/><text x="73.0050%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="72.7986%" y="277" width="0.0218%" height="15" fill="rgb(233,66,6)" fg:x="3340" fg:w="1"/><text x="73.0486%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (2 samples, 0.04%)</title><rect x="72.8204%" y="277" width="0.0436%" height="15" fill="rgb(246,123,29)" fg:x="3341" fg:w="2"/><text x="73.0704%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="72.8640%" y="277" width="0.0218%" height="15" fill="rgb(209,62,40)" fg:x="3343" fg:w="1"/><text x="73.1140%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="72.8858%" y="277" width="0.0218%" height="15" fill="rgb(218,4,25)" fg:x="3344" fg:w="1"/><text x="73.1358%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="72.9076%" y="277" width="0.0218%" height="15" fill="rgb(253,91,49)" fg:x="3345" fg:w="1"/><text x="73.1576%" y="287.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="72.9294%" y="261" width="0.0218%" height="15" fill="rgb(228,155,29)" fg:x="3346" fg:w="1"/><text x="73.1794%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; std::__1::operator+&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;(char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="72.9512%" y="245" width="0.0218%" height="15" fill="rgb(243,57,37)" fg:x="3347" fg:w="1"/><text x="73.2012%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:v15006](std::__1::__uninitialized_size_tag, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="72.9512%" y="229" width="0.0218%" height="15" fill="rgb(244,167,17)" fg:x="3347" fg:w="1"/><text x="73.2012%" y="239.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="72.9512%" y="213" width="0.0218%" height="15" fill="rgb(207,181,38)" fg:x="3347" fg:w="1"/><text x="73.2012%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="72.9512%" y="197" width="0.0218%" height="15" fill="rgb(211,8,23)" fg:x="3347" fg:w="1"/><text x="73.2012%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="72.9512%" y="181" width="0.0218%" height="15" fill="rgb(235,11,44)" fg:x="3347" fg:w="1"/><text x="73.2012%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="72.9730%" y="245" width="0.0218%" height="15" fill="rgb(248,18,52)" fg:x="3348" fg:w="1"/><text x="73.2230%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="72.9948%" y="245" width="0.0436%" height="15" fill="rgb(208,4,7)" fg:x="3349" fg:w="2"/><text x="73.2448%" y="255.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="73.0384%" y="213" width="0.0218%" height="15" fill="rgb(240,17,39)" fg:x="3351" fg:w="1"/><text x="73.2884%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="73.0602%" y="213" width="0.0218%" height="15" fill="rgb(207,170,3)" fg:x="3352" fg:w="1"/><text x="73.3102%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="73.0602%" y="197" width="0.0218%" height="15" fill="rgb(236,100,52)" fg:x="3352" fg:w="1"/><text x="73.3102%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="73.0602%" y="181" width="0.0218%" height="15" fill="rgb(246,78,51)" fg:x="3352" fg:w="1"/><text x="73.3102%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="73.0602%" y="165" width="0.0218%" height="15" fill="rgb(211,17,15)" fg:x="3352" fg:w="1"/><text x="73.3102%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="73.0602%" y="149" width="0.0218%" height="15" fill="rgb(209,59,46)" fg:x="3352" fg:w="1"/><text x="73.3102%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="73.0602%" y="133" width="0.0218%" height="15" fill="rgb(210,92,25)" fg:x="3352" fg:w="1"/><text x="73.3102%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="73.0384%" y="229" width="0.0872%" height="15" fill="rgb(238,174,52)" fg:x="3351" fg:w="4"/><text x="73.2884%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="73.0820%" y="213" width="0.0436%" height="15" fill="rgb(230,73,7)" fg:x="3353" fg:w="2"/><text x="73.3320%" y="223.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="73.1255%" y="213" width="0.0436%" height="15" fill="rgb(243,124,40)" fg:x="3355" fg:w="2"/><text x="73.3755%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="73.1691%" y="213" width="0.0872%" height="15" fill="rgb(244,170,11)" fg:x="3357" fg:w="4"/><text x="73.4191%" y="223.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="73.2563%" y="213" width="0.0218%" height="15" fill="rgb(207,114,54)" fg:x="3361" fg:w="1"/><text x="73.5063%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="73.2781%" y="213" width="0.0218%" height="15" fill="rgb(205,42,20)" fg:x="3362" fg:w="1"/><text x="73.5281%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="73.2999%" y="213" width="0.0218%" height="15" fill="rgb(230,30,28)" fg:x="3363" fg:w="1"/><text x="73.5499%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="73.3217%" y="213" width="0.0436%" height="15" fill="rgb(205,73,54)" fg:x="3364" fg:w="2"/><text x="73.5717%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="73.3653%" y="213" width="0.0872%" height="15" fill="rgb(254,227,23)" fg:x="3366" fg:w="4"/><text x="73.6153%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="73.4525%" y="213" width="0.0218%" height="15" fill="rgb(228,202,34)" fg:x="3370" fg:w="1"/><text x="73.7025%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="73.4743%" y="213" width="0.0436%" height="15" fill="rgb(222,225,37)" fg:x="3371" fg:w="2"/><text x="73.7243%" y="223.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="73.8884%" y="197" width="0.0436%" height="15" fill="rgb(221,14,54)" fg:x="3390" fg:w="2"/><text x="74.1384%" y="207.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="74.1064%" y="165" width="0.0218%" height="15" fill="rgb(254,102,2)" fg:x="3400" fg:w="1"/><text x="74.3564%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="74.1282%" y="165" width="0.0218%" height="15" fill="rgb(232,104,17)" fg:x="3401" fg:w="1"/><text x="74.3782%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="74.1282%" y="149" width="0.0218%" height="15" fill="rgb(250,220,14)" fg:x="3401" fg:w="1"/><text x="74.3782%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="74.1282%" y="133" width="0.0218%" height="15" fill="rgb(241,158,9)" fg:x="3401" fg:w="1"/><text x="74.3782%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="74.1500%" y="165" width="0.0436%" height="15" fill="rgb(246,9,43)" fg:x="3402" fg:w="2"/><text x="74.4000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="74.1935%" y="165" width="0.0436%" height="15" fill="rgb(206,73,33)" fg:x="3404" fg:w="2"/><text x="74.4435%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="74.1935%" y="149" width="0.0436%" height="15" fill="rgb(222,79,8)" fg:x="3404" fg:w="2"/><text x="74.4435%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="74.2153%" y="133" width="0.0218%" height="15" fill="rgb(234,8,54)" fg:x="3405" fg:w="1"/><text x="74.4653%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="74.2371%" y="165" width="0.0218%" height="15" fill="rgb(209,134,38)" fg:x="3406" fg:w="1"/><text x="74.4871%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (8 samples, 0.17%)</title><rect x="74.1064%" y="181" width="0.1744%" height="15" fill="rgb(230,127,29)" fg:x="3400" fg:w="8"/><text x="74.3564%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="74.2589%" y="165" width="0.0218%" height="15" fill="rgb(242,44,41)" fg:x="3407" fg:w="1"/><text x="74.5089%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="74.2807%" y="181" width="0.0218%" height="15" fill="rgb(222,56,43)" fg:x="3408" fg:w="1"/><text x="74.5307%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (20 samples, 0.44%)</title><rect x="73.9320%" y="197" width="0.4359%" height="15" fill="rgb(238,39,47)" fg:x="3392" fg:w="20"/><text x="74.1820%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="74.3025%" y="181" width="0.0654%" height="15" fill="rgb(226,79,43)" fg:x="3409" fg:w="3"/><text x="74.5525%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="74.3679%" y="197" width="0.0218%" height="15" fill="rgb(242,105,53)" fg:x="3412" fg:w="1"/><text x="74.6179%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="74.3897%" y="197" width="0.0436%" height="15" fill="rgb(251,132,46)" fg:x="3413" fg:w="2"/><text x="74.6397%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.17%)</title><rect x="74.4333%" y="197" width="0.1744%" height="15" fill="rgb(231,77,14)" fg:x="3415" fg:w="8"/><text x="74.6833%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="74.6077%" y="197" width="0.0218%" height="15" fill="rgb(240,135,9)" fg:x="3423" fg:w="1"/><text x="74.8577%" y="207.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.04%)</title><rect x="74.6295%" y="197" width="0.0436%" height="15" fill="rgb(248,109,14)" fg:x="3424" fg:w="2"/><text x="74.8795%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (10 samples, 0.22%)</title><rect x="74.6731%" y="197" width="0.2180%" height="15" fill="rgb(227,146,52)" fg:x="3426" fg:w="10"/><text x="74.9231%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.09%)</title><rect x="74.8910%" y="197" width="0.0872%" height="15" fill="rgb(232,54,3)" fg:x="3436" fg:w="4"/><text x="75.1410%" y="207.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="75.0218%" y="181" width="0.0218%" height="15" fill="rgb(229,201,43)" fg:x="3442" fg:w="1"/><text x="75.2718%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="75.0436%" y="181" width="0.0218%" height="15" fill="rgb(252,161,33)" fg:x="3443" fg:w="1"/><text x="75.2936%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="75.0436%" y="165" width="0.0218%" height="15" fill="rgb(226,146,40)" fg:x="3443" fg:w="1"/><text x="75.2936%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (2 samples, 0.04%)</title><rect x="75.0654%" y="181" width="0.0436%" height="15" fill="rgb(219,47,25)" fg:x="3444" fg:w="2"/><text x="75.3154%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::assign (2 samples, 0.04%)</title><rect x="75.1090%" y="181" width="0.0436%" height="15" fill="rgb(250,135,13)" fg:x="3446" fg:w="2"/><text x="75.3590%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="75.1526%" y="181" width="0.0218%" height="15" fill="rgb(219,229,18)" fg:x="3448" fg:w="1"/><text x="75.4026%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="75.1962%" y="133" width="0.0218%" height="15" fill="rgb(217,152,27)" fg:x="3450" fg:w="1"/><text x="75.4462%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (3 samples, 0.07%)</title><rect x="75.1744%" y="181" width="0.0654%" height="15" fill="rgb(225,71,47)" fg:x="3449" fg:w="3"/><text x="75.4244%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="75.1744%" y="165" width="0.0654%" height="15" fill="rgb(220,139,14)" fg:x="3449" fg:w="3"/><text x="75.4244%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="75.1744%" y="149" width="0.0654%" height="15" fill="rgb(247,54,32)" fg:x="3449" fg:w="3"/><text x="75.4244%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetId (1 samples, 0.02%)</title><rect x="75.2180%" y="133" width="0.0218%" height="15" fill="rgb(252,131,39)" fg:x="3451" fg:w="1"/><text x="75.4680%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; std::__1::operator+&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;(char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="75.2616%" y="165" width="0.0218%" height="15" fill="rgb(210,108,39)" fg:x="3453" fg:w="1"/><text x="75.5116%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:v15006](std::__1::__uninitialized_size_tag, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="75.2616%" y="149" width="0.0218%" height="15" fill="rgb(205,23,29)" fg:x="3453" fg:w="1"/><text x="75.5116%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="75.2616%" y="133" width="0.0218%" height="15" fill="rgb(246,139,46)" fg:x="3453" fg:w="1"/><text x="75.5116%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="75.2833%" y="165" width="0.0218%" height="15" fill="rgb(250,81,26)" fg:x="3454" fg:w="1"/><text x="75.5333%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="75.2833%" y="149" width="0.0218%" height="15" fill="rgb(214,104,7)" fg:x="3454" fg:w="1"/><text x="75.5333%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="75.3051%" y="165" width="0.0218%" height="15" fill="rgb(233,189,8)" fg:x="3455" fg:w="1"/><text x="75.5551%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="75.3269%" y="149" width="0.0218%" height="15" fill="rgb(228,141,17)" fg:x="3456" fg:w="1"/><text x="75.5769%" y="159.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="75.3487%" y="133" width="0.0218%" height="15" fill="rgb(247,157,1)" fg:x="3457" fg:w="1"/><text x="75.5987%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (2 samples, 0.04%)</title><rect x="75.3705%" y="133" width="0.0436%" height="15" fill="rgb(249,225,5)" fg:x="3458" fg:w="2"/><text x="75.6205%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="75.3705%" y="117" width="0.0436%" height="15" fill="rgb(242,55,13)" fg:x="3458" fg:w="2"/><text x="75.6205%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="75.4141%" y="133" width="0.0218%" height="15" fill="rgb(230,49,50)" fg:x="3460" fg:w="1"/><text x="75.6641%" y="143.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="75.2398%" y="181" width="0.2180%" height="15" fill="rgb(241,111,38)" fg:x="3452" fg:w="10"/><text x="75.4898%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="75.3269%" y="165" width="0.1308%" height="15" fill="rgb(252,155,4)" fg:x="3456" fg:w="6"/><text x="75.5769%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (5 samples, 0.11%)</title><rect x="75.3487%" y="149" width="0.1090%" height="15" fill="rgb(212,69,32)" fg:x="3457" fg:w="5"/><text x="75.5987%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="75.4359%" y="133" width="0.0218%" height="15" fill="rgb(243,107,47)" fg:x="3461" fg:w="1"/><text x="75.6859%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::__itoa::__traits_base&lt;unsigned long long, void&gt;::__convert[abi:v15006] (1 samples, 0.02%)</title><rect x="75.4795%" y="165" width="0.0218%" height="15" fill="rgb(247,130,12)" fg:x="3463" fg:w="1"/><text x="75.7295%" y="175.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.02%)</title><rect x="75.5231%" y="101" width="0.0218%" height="15" fill="rgb(233,74,16)" fg:x="3465" fg:w="1"/><text x="75.7731%" y="111.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (1 samples, 0.02%)</title><rect x="75.5449%" y="101" width="0.0218%" height="15" fill="rgb(208,58,18)" fg:x="3466" fg:w="1"/><text x="75.7949%" y="111.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (4 samples, 0.09%)</title><rect x="75.5013%" y="165" width="0.0872%" height="15" fill="rgb(242,225,1)" fg:x="3464" fg:w="4"/><text x="75.7513%" y="175.50"></text></g><g><title>libsystem_c.dylib`snprintf (3 samples, 0.07%)</title><rect x="75.5231%" y="149" width="0.0654%" height="15" fill="rgb(249,39,40)" fg:x="3465" fg:w="3"/><text x="75.7731%" y="159.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (3 samples, 0.07%)</title><rect x="75.5231%" y="133" width="0.0654%" height="15" fill="rgb(207,72,44)" fg:x="3465" fg:w="3"/><text x="75.7731%" y="143.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (3 samples, 0.07%)</title><rect x="75.5231%" y="117" width="0.0654%" height="15" fill="rgb(215,193,12)" fg:x="3465" fg:w="3"/><text x="75.7731%" y="127.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock (1 samples, 0.02%)</title><rect x="75.5667%" y="101" width="0.0218%" height="15" fill="rgb(248,41,39)" fg:x="3467" fg:w="1"/><text x="75.8167%" y="111.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (125 samples, 2.72%)</title><rect x="72.9294%" y="277" width="2.7245%" height="15" fill="rgb(253,85,4)" fg:x="3346" fg:w="125"/><text x="73.1794%" y="287.50">ru..</text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (124 samples, 2.70%)</title><rect x="72.9512%" y="261" width="2.7027%" height="15" fill="rgb(243,70,31)" fg:x="3347" fg:w="124"/><text x="73.2012%" y="271.50">ru..</text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (120 samples, 2.62%)</title><rect x="73.0384%" y="245" width="2.6155%" height="15" fill="rgb(253,195,26)" fg:x="3351" fg:w="120"/><text x="73.2884%" y="255.50">ru..</text></g><g><title>rusk-wallet`rocksdb::Configurable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (116 samples, 2.53%)</title><rect x="73.1255%" y="229" width="2.5283%" height="15" fill="rgb(243,42,11)" fg:x="3355" fg:w="116"/><text x="73.3755%" y="239.50">ru..</text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (98 samples, 2.14%)</title><rect x="73.5179%" y="213" width="2.1360%" height="15" fill="rgb(239,66,17)" fg:x="3373" fg:w="98"/><text x="73.7679%" y="223.50">r..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (31 samples, 0.68%)</title><rect x="74.9782%" y="197" width="0.6757%" height="15" fill="rgb(217,132,21)" fg:x="3440" fg:w="31"/><text x="75.2282%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (9 samples, 0.20%)</title><rect x="75.4577%" y="181" width="0.1962%" height="15" fill="rgb(252,202,21)" fg:x="3462" fg:w="9"/><text x="75.7077%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="75.5885%" y="165" width="0.0654%" height="15" fill="rgb(233,98,36)" fg:x="3468" fg:w="3"/><text x="75.8385%" y="175.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="75.7193%" y="261" width="0.0218%" height="15" fill="rgb(216,153,54)" fg:x="3474" fg:w="1"/><text x="75.9693%" y="271.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="75.7411%" y="261" width="0.0218%" height="15" fill="rgb(250,99,7)" fg:x="3475" fg:w="1"/><text x="75.9911%" y="271.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="75.7629%" y="261" width="0.0218%" height="15" fill="rgb(207,56,50)" fg:x="3476" fg:w="1"/><text x="76.0129%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; std::__1::operator+&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;(char const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="75.7847%" y="261" width="0.0218%" height="15" fill="rgb(244,61,34)" fg:x="3477" fg:w="1"/><text x="76.0347%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="75.8065%" y="261" width="0.0218%" height="15" fill="rgb(241,50,38)" fg:x="3478" fg:w="1"/><text x="76.0565%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="75.8282%" y="261" width="0.0218%" height="15" fill="rgb(212,166,30)" fg:x="3479" fg:w="1"/><text x="76.0782%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.09%)</title><rect x="75.8500%" y="261" width="0.0872%" height="15" fill="rgb(249,127,32)" fg:x="3480" fg:w="4"/><text x="76.1000%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="75.9372%" y="261" width="0.0218%" height="15" fill="rgb(209,103,0)" fg:x="3484" fg:w="1"/><text x="76.1872%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="75.9590%" y="261" width="0.0218%" height="15" fill="rgb(238,209,51)" fg:x="3485" fg:w="1"/><text x="76.2090%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::EndsWith(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="75.9808%" y="261" width="0.0218%" height="15" fill="rgb(237,56,23)" fg:x="3486" fg:w="1"/><text x="76.2308%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="76.0026%" y="261" width="0.0654%" height="15" fill="rgb(215,153,46)" fg:x="3487" fg:w="3"/><text x="76.2526%" y="271.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="76.3949%" y="229" width="0.0436%" height="15" fill="rgb(224,49,31)" fg:x="3505" fg:w="2"/><text x="76.6449%" y="239.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="76.4385%" y="229" width="0.0218%" height="15" fill="rgb(250,18,42)" fg:x="3507" fg:w="1"/><text x="76.6885%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="76.4821%" y="213" width="0.0436%" height="15" fill="rgb(215,176,39)" fg:x="3509" fg:w="2"/><text x="76.7321%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (7 samples, 0.15%)</title><rect x="76.4603%" y="229" width="0.1526%" height="15" fill="rgb(223,77,29)" fg:x="3508" fg:w="7"/><text x="76.7103%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.09%)</title><rect x="76.5257%" y="213" width="0.0872%" height="15" fill="rgb(234,94,52)" fg:x="3511" fg:w="4"/><text x="76.7757%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="76.6129%" y="229" width="0.0218%" height="15" fill="rgb(220,154,50)" fg:x="3515" fg:w="1"/><text x="76.8629%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="76.6347%" y="229" width="0.0436%" height="15" fill="rgb(212,11,10)" fg:x="3516" fg:w="2"/><text x="76.8847%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (24 samples, 0.52%)</title><rect x="76.2860%" y="245" width="0.5231%" height="15" fill="rgb(205,166,19)" fg:x="3500" fg:w="24"/><text x="76.5360%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.13%)</title><rect x="76.6783%" y="229" width="0.1308%" height="15" fill="rgb(244,198,16)" fg:x="3518" fg:w="6"/><text x="76.9283%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="76.8091%" y="245" width="0.0654%" height="15" fill="rgb(219,69,12)" fg:x="3524" fg:w="3"/><text x="77.0591%" y="255.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="76.8963%" y="229" width="0.0218%" height="15" fill="rgb(245,30,7)" fg:x="3528" fg:w="1"/><text x="77.1463%" y="239.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="76.9398%" y="213" width="0.0218%" height="15" fill="rgb(218,221,48)" fg:x="3530" fg:w="1"/><text x="77.1898%" y="223.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="76.9616%" y="213" width="0.0218%" height="15" fill="rgb(216,66,15)" fg:x="3531" fg:w="1"/><text x="77.2116%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (3 samples, 0.07%)</title><rect x="76.9834%" y="213" width="0.0654%" height="15" fill="rgb(226,122,50)" fg:x="3532" fg:w="3"/><text x="77.2334%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="77.0488%" y="213" width="0.0218%" height="15" fill="rgb(239,156,16)" fg:x="3535" fg:w="1"/><text x="77.2988%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (66 samples, 1.44%)</title><rect x="75.6539%" y="277" width="1.4385%" height="15" fill="rgb(224,27,38)" fg:x="3471" fg:w="66"/><text x="75.9039%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (47 samples, 1.02%)</title><rect x="76.0680%" y="261" width="1.0244%" height="15" fill="rgb(224,39,27)" fg:x="3490" fg:w="47"/><text x="76.3180%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="76.8745%" y="245" width="0.2180%" height="15" fill="rgb(215,92,29)" fg:x="3527" fg:w="10"/><text x="77.1245%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="76.9180%" y="229" width="0.1744%" height="15" fill="rgb(207,159,16)" fg:x="3529" fg:w="8"/><text x="77.1680%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="77.0706%" y="213" width="0.0218%" height="15" fill="rgb(238,163,47)" fg:x="3536" fg:w="1"/><text x="77.3206%" y="223.50"></text></g><g><title>libc+ (2 samples, 0.04%)</title><rect x="77.1360%" y="261" width="0.0436%" height="15" fill="rgb(219,91,49)" fg:x="3539" fg:w="2"/><text x="77.3860%" y="271.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="77.1796%" y="261" width="0.0218%" height="15" fill="rgb(227,167,31)" fg:x="3541" fg:w="1"/><text x="77.4296%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::(anonymous namespace)::initial_string&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;::operator() (1 samples, 0.02%)</title><rect x="77.2014%" y="261" width="0.0218%" height="15" fill="rgb(234,80,54)" fg:x="3542" fg:w="1"/><text x="77.4514%" y="271.50"></text></g><g><title>libc++.1.dylib`char* std::__1::__itoa::__append10[abi:v15006]&lt;unsigned int&gt; (1 samples, 0.02%)</title><rect x="77.2886%" y="245" width="0.0218%" height="15" fill="rgb(212,114,2)" fg:x="3546" fg:w="1"/><text x="77.5386%" y="255.50"></text></g><g><title>libsystem_c.dylib`__v2printf (1 samples, 0.02%)</title><rect x="77.3758%" y="213" width="0.0218%" height="15" fill="rgb(234,50,24)" fg:x="3550" fg:w="1"/><text x="77.6258%" y="223.50"></text></g><g><title>libsystem_c.dylib`__dtoa (2 samples, 0.04%)</title><rect x="77.4629%" y="197" width="0.0436%" height="15" fill="rgb(221,68,8)" fg:x="3554" fg:w="2"/><text x="77.7129%" y="207.50"></text></g><g><title>libsystem_c.dylib`__lo0bits_D2A (1 samples, 0.02%)</title><rect x="77.4847%" y="181" width="0.0218%" height="15" fill="rgb(254,180,31)" fg:x="3555" fg:w="1"/><text x="77.7347%" y="191.50"></text></g><g><title>libsystem_c.dylib`__sfvwrite (2 samples, 0.04%)</title><rect x="77.5065%" y="197" width="0.0436%" height="15" fill="rgb(247,130,50)" fg:x="3556" fg:w="2"/><text x="77.7565%" y="207.50"></text></g><g><title>libsystem_c.dylib`localeconv_l (1 samples, 0.02%)</title><rect x="77.5501%" y="197" width="0.0218%" height="15" fill="rgb(211,109,4)" fg:x="3558" fg:w="1"/><text x="77.8001%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (18 samples, 0.39%)</title><rect x="77.2232%" y="261" width="0.3923%" height="15" fill="rgb(238,50,21)" fg:x="3543" fg:w="18"/><text x="77.4732%" y="271.50"></text></g><g><title>libsystem_c.dylib`snprintf (14 samples, 0.31%)</title><rect x="77.3104%" y="245" width="0.3051%" height="15" fill="rgb(225,57,45)" fg:x="3547" fg:w="14"/><text x="77.5604%" y="255.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (13 samples, 0.28%)</title><rect x="77.3322%" y="229" width="0.2833%" height="15" fill="rgb(209,196,50)" fg:x="3548" fg:w="13"/><text x="77.5822%" y="239.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (10 samples, 0.22%)</title><rect x="77.3976%" y="213" width="0.2180%" height="15" fill="rgb(242,140,13)" fg:x="3551" fg:w="10"/><text x="77.6476%" y="223.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_unlock (2 samples, 0.04%)</title><rect x="77.5719%" y="197" width="0.0436%" height="15" fill="rgb(217,111,7)" fg:x="3559" fg:w="2"/><text x="77.8219%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.59%)</title><rect x="77.0924%" y="277" width="0.5885%" height="15" fill="rgb(253,193,51)" fg:x="3537" fg:w="27"/><text x="77.3424%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="77.6155%" y="261" width="0.0654%" height="15" fill="rgb(252,70,29)" fg:x="3561" fg:w="3"/><text x="77.8655%" y="271.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="77.7245%" y="261" width="0.0218%" height="15" fill="rgb(232,127,12)" fg:x="3566" fg:w="1"/><text x="77.9745%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="77.7463%" y="261" width="0.0218%" height="15" fill="rgb(211,180,21)" fg:x="3567" fg:w="1"/><text x="77.9963%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (2 samples, 0.04%)</title><rect x="77.7681%" y="261" width="0.0436%" height="15" fill="rgb(229,72,13)" fg:x="3568" fg:w="2"/><text x="78.0181%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="77.8117%" y="261" width="0.0218%" height="15" fill="rgb(240,211,49)" fg:x="3570" fg:w="1"/><text x="78.0617%" y="271.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="77.8335%" y="245" width="0.0218%" height="15" fill="rgb(219,149,40)" fg:x="3571" fg:w="1"/><text x="78.0835%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::SerializeVector&lt;int&gt;(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="77.6809%" y="277" width="0.2398%" height="15" fill="rgb(210,127,46)" fg:x="3564" fg:w="11"/><text x="77.9309%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="77.8335%" y="261" width="0.0872%" height="15" fill="rgb(220,106,7)" fg:x="3571" fg:w="4"/><text x="78.0835%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="77.8553%" y="245" width="0.0654%" height="15" fill="rgb(249,31,22)" fg:x="3572" fg:w="3"/><text x="78.1053%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (3 samples, 0.07%)</title><rect x="77.8553%" y="229" width="0.0654%" height="15" fill="rgb(253,1,49)" fg:x="3572" fg:w="3"/><text x="78.1053%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (248 samples, 5.41%)</title><rect x="72.5371%" y="293" width="5.4054%" height="15" fill="rgb(227,144,33)" fg:x="3328" fg:w="248"/><text x="72.7871%" y="303.50">rusk-wa..</text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_3, std::__1::allocator&lt;rocksdb::$_3&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*&amp;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="77.9207%" y="277" width="0.0218%" height="15" fill="rgb(249,163,44)" fg:x="3575" fg:w="1"/><text x="78.1707%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="77.9207%" y="261" width="0.0218%" height="15" fill="rgb(234,15,39)" fg:x="3575" fg:w="1"/><text x="78.1707%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="77.9207%" y="245" width="0.0218%" height="15" fill="rgb(207,66,16)" fg:x="3575" fg:w="1"/><text x="78.1707%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="77.9207%" y="229" width="0.0218%" height="15" fill="rgb(233,112,24)" fg:x="3575" fg:w="1"/><text x="78.1707%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (390 samples, 8.50%)</title><rect x="69.5074%" y="309" width="8.5004%" height="15" fill="rgb(230,90,22)" fg:x="3189" fg:w="390"/><text x="69.7574%" y="319.50">rusk-wallet`..</text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="77.9425%" y="293" width="0.0654%" height="15" fill="rgb(229,61,13)" fg:x="3576" fg:w="3"/><text x="78.1925%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1,820 samples, 39.67%)</title><rect x="38.3609%" y="325" width="39.6687%" height="15" fill="rgb(225,57,24)" fg:x="1760" fg:w="1820"/><text x="38.6109%" y="335.50">rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::Conf..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="78.0078%" y="309" width="0.0218%" height="15" fill="rgb(208,169,48)" fg:x="3579" fg:w="1"/><text x="78.2578%" y="319.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (2 samples, 0.04%)</title><rect x="78.3130%" y="309" width="0.0436%" height="15" fill="rgb(244,218,51)" fg:x="3593" fg:w="2"/><text x="78.5630%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (3 samples, 0.07%)</title><rect x="78.3566%" y="309" width="0.0654%" height="15" fill="rgb(214,148,10)" fg:x="3595" fg:w="3"/><text x="78.6066%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="78.5963%" y="277" width="0.0654%" height="15" fill="rgb(225,174,27)" fg:x="3606" fg:w="3"/><text x="78.8463%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (19 samples, 0.41%)</title><rect x="78.4220%" y="309" width="0.4141%" height="15" fill="rgb(230,96,26)" fg:x="3598" fg:w="19"/><text x="78.6720%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (13 samples, 0.28%)</title><rect x="78.5527%" y="293" width="0.2833%" height="15" fill="rgb(232,10,30)" fg:x="3604" fg:w="13"/><text x="78.8027%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.17%)</title><rect x="78.6617%" y="277" width="0.1744%" height="15" fill="rgb(222,8,50)" fg:x="3609" fg:w="8"/><text x="78.9117%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (14 samples, 0.31%)</title><rect x="78.8361%" y="309" width="0.3051%" height="15" fill="rgb(213,81,27)" fg:x="3617" fg:w="14"/><text x="79.0861%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (12 samples, 0.26%)</title><rect x="79.1412%" y="309" width="0.2616%" height="15" fill="rgb(245,50,10)" fg:x="3631" fg:w="12"/><text x="79.3912%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="79.4028%" y="309" width="0.0436%" height="15" fill="rgb(216,100,18)" fg:x="3643" fg:w="2"/><text x="79.6528%" y="319.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="79.5118%" y="293" width="0.0436%" height="15" fill="rgb(236,147,54)" fg:x="3648" fg:w="2"/><text x="79.7618%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="79.5554%" y="277" width="0.0436%" height="15" fill="rgb(205,143,26)" fg:x="3650" fg:w="2"/><text x="79.8054%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (2 samples, 0.04%)</title><rect x="79.5554%" y="261" width="0.0436%" height="15" fill="rgb(236,26,9)" fg:x="3650" fg:w="2"/><text x="79.8054%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="79.5772%" y="245" width="0.0218%" height="15" fill="rgb(221,165,53)" fg:x="3651" fg:w="1"/><text x="79.8272%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="79.5990%" y="277" width="0.0436%" height="15" fill="rgb(214,110,17)" fg:x="3652" fg:w="2"/><text x="79.8490%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo::Struct(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*), std::__1::allocator&lt;rocksdb::OptionTypeInfo::Struct (5 samples, 0.11%)</title><rect x="79.5554%" y="293" width="0.1090%" height="15" fill="rgb(237,197,12)" fg:x="3650" fg:w="5"/><text x="79.8054%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="79.6425%" y="277" width="0.0218%" height="15" fill="rgb(205,84,17)" fg:x="3654" fg:w="1"/><text x="79.8925%" y="287.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="79.6643%" y="277" width="0.0218%" height="15" fill="rgb(237,18,45)" fg:x="3655" fg:w="1"/><text x="79.9143%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="79.6643%" y="261" width="0.0218%" height="15" fill="rgb(221,87,14)" fg:x="3655" fg:w="1"/><text x="79.9143%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="79.6643%" y="245" width="0.0218%" height="15" fill="rgb(238,186,15)" fg:x="3655" fg:w="1"/><text x="79.9143%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::OptionTypeInfo (12 samples, 0.26%)</title><rect x="79.4464%" y="309" width="0.2616%" height="15" fill="rgb(208,115,11)" fg:x="3645" fg:w="12"/><text x="79.6964%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo::Struct(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*), std::__1::allocator&lt;rocksdb::OptionTypeInfo::Struct (2 samples, 0.04%)</title><rect x="79.6643%" y="293" width="0.0436%" height="15" fill="rgb(254,175,0)" fg:x="3655" fg:w="2"/><text x="79.9143%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="79.6861%" y="277" width="0.0218%" height="15" fill="rgb(227,24,42)" fg:x="3656" fg:w="1"/><text x="79.9361%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Prepare(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="79.7079%" y="309" width="0.0218%" height="15" fill="rgb(223,211,37)" fg:x="3657" fg:w="1"/><text x="79.9579%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_7, std::__1::allocator&lt;rocksdb::$_7&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;::__clone(std::__1::__function::__base&lt;rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="79.7297%" y="309" width="0.0218%" height="15" fill="rgb(235,49,27)" fg:x="3658" fg:w="1"/><text x="79.9797%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;std::__1::shared_ptr&lt;rocksdb::TablePropertiesCollectorFactory&gt;&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;std::__1::shared_ptr&lt;rocksdb::TablePropertiesCollectorFactory&gt;&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt;, rocksdb::Status (1 samples, 0.02%)</title><rect x="79.7515%" y="309" width="0.0218%" height="15" fill="rgb(254,97,51)" fg:x="3659" fg:w="1"/><text x="80.0015%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::PrepareOptions (81 samples, 1.77%)</title><rect x="78.0296%" y="325" width="1.7655%" height="15" fill="rgb(249,51,40)" fg:x="3580" fg:w="81"/><text x="78.2796%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo::Struct(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*), std::__1::allocator&lt;rocksdb::OptionTypeInfo::Struct (1 samples, 0.02%)</title><rect x="79.7733%" y="309" width="0.0218%" height="15" fill="rgb(210,128,45)" fg:x="3660" fg:w="1"/><text x="80.0233%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="79.7733%" y="293" width="0.0218%" height="15" fill="rgb(224,137,50)" fg:x="3660" fg:w="1"/><text x="80.0233%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::OptionTypeInfo (3 samples, 0.07%)</title><rect x="79.7951%" y="325" width="0.0654%" height="15" fill="rgb(242,15,9)" fg:x="3661" fg:w="3"/><text x="80.0451%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1,924 samples, 41.94%)</title><rect x="37.9468%" y="341" width="41.9355%" height="15" fill="rgb(233,187,41)" fg:x="1741" fg:w="1924"/><text x="38.1968%" y="351.50">rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb:..</text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;std::__1::shared_ptr&lt;rocksdb::TablePropertiesCollectorFactory&gt;&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;std::__1::shared_ptr&lt;rocksdb::TablePropertiesCollectorFactory&gt;&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt;, rocksdb::Status (1 samples, 0.02%)</title><rect x="79.8605%" y="325" width="0.0218%" height="15" fill="rgb(227,2,29)" fg:x="3664" fg:w="1"/><text x="80.1105%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::~ConfigurableCFOptions (1 samples, 0.02%)</title><rect x="79.8823%" y="341" width="0.0218%" height="15" fill="rgb(222,70,3)" fg:x="3665" fg:w="1"/><text x="80.1323%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableMutableCFOptions::~ConfigurableMutableCFOptions (1 samples, 0.02%)</title><rect x="79.8823%" y="325" width="0.0218%" height="15" fill="rgb(213,11,42)" fg:x="3665" fg:w="1"/><text x="80.1323%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="79.8823%" y="309" width="0.0218%" height="15" fill="rgb(225,150,9)" fg:x="3665" fg:w="1"/><text x="80.1323%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1,945 samples, 42.39%)</title><rect x="37.5327%" y="357" width="42.3932%" height="15" fill="rgb(230,162,45)" fg:x="1722" fg:w="1945"/><text x="37.7827%" y="367.50">rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOpt..</text></g><g><title>rusk-wallet`rocksdb::UpdateColumnFamilyOptions (1 samples, 0.02%)</title><rect x="79.9041%" y="341" width="0.0218%" height="15" fill="rgb(222,14,52)" fg:x="3666" fg:w="1"/><text x="80.1541%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="79.9259%" y="293" width="0.0218%" height="15" fill="rgb(254,198,14)" fg:x="3667" fg:w="1"/><text x="80.1759%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::AdvancedColumnFamilyOptions (1 samples, 0.02%)</title><rect x="79.9259%" y="277" width="0.0218%" height="15" fill="rgb(220,217,30)" fg:x="3667" fg:w="1"/><text x="80.1759%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::SkipListFactory::SkipListFactory (1 samples, 0.02%)</title><rect x="79.9259%" y="261" width="0.0218%" height="15" fill="rgb(215,146,41)" fg:x="3667" fg:w="1"/><text x="80.1759%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsAsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="79.9259%" y="341" width="0.0436%" height="15" fill="rgb(217,27,36)" fg:x="3667" fg:w="2"/><text x="80.1759%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsConfigurable::DBOptionsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="79.9259%" y="325" width="0.0436%" height="15" fill="rgb(219,218,39)" fg:x="3667" fg:w="2"/><text x="80.1759%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ImmutableDBOptions::ImmutableDBOptions (2 samples, 0.04%)</title><rect x="79.9259%" y="309" width="0.0436%" height="15" fill="rgb(219,4,42)" fg:x="3667" fg:w="2"/><text x="80.1759%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="79.9477%" y="293" width="0.0218%" height="15" fill="rgb(249,119,36)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="79.9477%" y="277" width="0.0218%" height="15" fill="rgb(209,23,33)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="79.9477%" y="261" width="0.0218%" height="15" fill="rgb(211,10,0)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (1 samples, 0.02%)</title><rect x="79.9477%" y="245" width="0.0218%" height="15" fill="rgb(208,99,37)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (1 samples, 0.02%)</title><rect x="79.9477%" y="229" width="0.0218%" height="15" fill="rgb(213,132,31)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="239.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*), std::__1::allocator&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*)&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="79.9477%" y="213" width="0.0218%" height="15" fill="rgb(243,129,40)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::~Mutex (1 samples, 0.02%)</title><rect x="79.9477%" y="197" width="0.0218%" height="15" fill="rgb(210,66,33)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.02%)</title><rect x="79.9477%" y="181" width="0.0218%" height="15" fill="rgb(209,189,4)" fg:x="3668" fg:w="1"/><text x="80.1977%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::BuildDBOptions (1 samples, 0.02%)</title><rect x="79.9695%" y="325" width="0.0218%" height="15" fill="rgb(214,107,37)" fg:x="3669" fg:w="1"/><text x="80.2195%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptions::DBOptions (1 samples, 0.02%)</title><rect x="79.9695%" y="309" width="0.0218%" height="15" fill="rgb(245,88,54)" fg:x="3669" fg:w="1"/><text x="80.2195%" y="319.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="79.9913%" y="309" width="0.0218%" height="15" fill="rgb(205,146,20)" fg:x="3670" fg:w="1"/><text x="80.2413%" y="319.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="80.0131%" y="309" width="0.0218%" height="15" fill="rgb(220,161,25)" fg:x="3671" fg:w="1"/><text x="80.2631%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="80.0349%" y="277" width="0.0218%" height="15" fill="rgb(215,152,15)" fg:x="3672" fg:w="1"/><text x="80.2849%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="80.0567%" y="277" width="0.0218%" height="15" fill="rgb(233,192,44)" fg:x="3673" fg:w="1"/><text x="80.3067%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="80.0785%" y="277" width="0.0872%" height="15" fill="rgb(240,170,46)" fg:x="3674" fg:w="4"/><text x="80.3285%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (4 samples, 0.09%)</title><rect x="80.0785%" y="261" width="0.0872%" height="15" fill="rgb(207,104,33)" fg:x="3674" fg:w="4"/><text x="80.3285%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="80.1656%" y="277" width="0.0218%" height="15" fill="rgb(219,21,39)" fg:x="3678" fg:w="1"/><text x="80.4156%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="80.1656%" y="261" width="0.0218%" height="15" fill="rgb(214,133,29)" fg:x="3678" fg:w="1"/><text x="80.4156%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="80.1656%" y="245" width="0.0218%" height="15" fill="rgb(226,93,6)" fg:x="3678" fg:w="1"/><text x="80.4156%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string[abi:v15006]&lt;std::nullptr_t&gt; (1 samples, 0.02%)</title><rect x="80.1656%" y="229" width="0.0218%" height="15" fill="rgb(252,222,34)" fg:x="3678" fg:w="1"/><text x="80.4156%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="80.0349%" y="293" width="0.1744%" height="15" fill="rgb(252,92,48)" fg:x="3672" fg:w="8"/><text x="80.2849%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::ParseBoolean(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="80.1874%" y="277" width="0.0218%" height="15" fill="rgb(245,223,24)" fg:x="3679" fg:w="1"/><text x="80.4374%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (9 samples, 0.20%)</title><rect x="80.0349%" y="309" width="0.1962%" height="15" fill="rgb(205,176,3)" fg:x="3672" fg:w="9"/><text x="80.2849%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="80.2092%" y="293" width="0.0218%" height="15" fill="rgb(235,151,15)" fg:x="3680" fg:w="1"/><text x="80.4592%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="80.2092%" y="277" width="0.0218%" height="15" fill="rgb(237,209,11)" fg:x="3680" fg:w="1"/><text x="80.4592%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="80.2092%" y="261" width="0.0218%" height="15" fill="rgb(243,227,24)" fg:x="3680" fg:w="1"/><text x="80.4592%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::GetDBOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="79.9259%" y="357" width="0.3269%" height="15" fill="rgb(239,193,16)" fg:x="3667" fg:w="15"/><text x="80.1759%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsConfigurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (13 samples, 0.28%)</title><rect x="79.9695%" y="341" width="0.2833%" height="15" fill="rgb(231,27,9)" fg:x="3669" fg:w="13"/><text x="80.2195%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (12 samples, 0.26%)</title><rect x="79.9913%" y="325" width="0.2616%" height="15" fill="rgb(219,169,10)" fg:x="3670" fg:w="12"/><text x="80.2413%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="80.2310%" y="309" width="0.0218%" height="15" fill="rgb(244,229,43)" fg:x="3681" fg:w="1"/><text x="80.4810%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="80.2310%" y="293" width="0.0218%" height="15" fill="rgb(254,38,20)" fg:x="3681" fg:w="1"/><text x="80.4810%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="80.2746%" y="341" width="0.0218%" height="15" fill="rgb(250,47,30)" fg:x="3683" fg:w="1"/><text x="80.5246%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="80.2964%" y="325" width="0.0218%" height="15" fill="rgb(224,124,36)" fg:x="3684" fg:w="1"/><text x="80.5464%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="80.2964%" y="309" width="0.0218%" height="15" fill="rgb(246,68,51)" fg:x="3684" fg:w="1"/><text x="80.5464%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="80.2964%" y="293" width="0.0218%" height="15" fill="rgb(253,43,49)" fg:x="3684" fg:w="1"/><text x="80.5464%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="80.3182%" y="309" width="0.0218%" height="15" fill="rgb(219,54,36)" fg:x="3685" fg:w="1"/><text x="80.5682%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="80.4490%" y="293" width="0.0218%" height="15" fill="rgb(227,133,34)" fg:x="3691" fg:w="1"/><text x="80.6990%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="80.4926%" y="229" width="0.0218%" height="15" fill="rgb(247,227,15)" fg:x="3693" fg:w="1"/><text x="80.7426%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::ShardedCache(unsigned long, int, bool, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="80.5144%" y="229" width="0.0218%" height="15" fill="rgb(229,96,14)" fg:x="3694" fg:w="1"/><text x="80.7644%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::port::cacheline_aligned_alloc (1 samples, 0.02%)</title><rect x="80.5144%" y="213" width="0.0218%" height="15" fill="rgb(220,79,17)" fg:x="3694" fg:w="1"/><text x="80.7644%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (1 samples, 0.02%)</title><rect x="80.5144%" y="197" width="0.0218%" height="15" fill="rgb(205,131,53)" fg:x="3694" fg:w="1"/><text x="80.7644%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_memalign (1 samples, 0.02%)</title><rect x="80.5144%" y="181" width="0.0218%" height="15" fill="rgb(209,50,29)" fg:x="3694" fg:w="1"/><text x="80.7644%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="80.6016%" y="213" width="0.0436%" height="15" fill="rgb(245,86,46)" fg:x="3698" fg:w="2"/><text x="80.8516%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="80.6452%" y="213" width="0.0218%" height="15" fill="rgb(235,66,46)" fg:x="3700" fg:w="1"/><text x="80.8952%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (2 samples, 0.04%)</title><rect x="80.6670%" y="213" width="0.0436%" height="15" fill="rgb(232,148,31)" fg:x="3701" fg:w="2"/><text x="80.9170%" y="223.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$pthread_mutex_init (1 samples, 0.02%)</title><rect x="80.7105%" y="213" width="0.0218%" height="15" fill="rgb(217,149,8)" fg:x="3703" fg:w="1"/><text x="80.9605%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::EvictFromLRU(unsigned long, rocksdb::autovector (1 samples, 0.02%)</title><rect x="80.7323%" y="213" width="0.0218%" height="15" fill="rgb(209,183,11)" fg:x="3704" fg:w="1"/><text x="80.9823%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::TryInsertIntoSecondaryCache(rocksdb::autovector (1 samples, 0.02%)</title><rect x="80.8195%" y="197" width="0.0218%" height="15" fill="rgb(208,55,20)" fg:x="3708" fg:w="1"/><text x="81.0695%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (2 samples, 0.04%)</title><rect x="80.8413%" y="197" width="0.0436%" height="15" fill="rgb(218,39,14)" fg:x="3709" fg:w="2"/><text x="81.0913%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (2 samples, 0.04%)</title><rect x="80.8413%" y="181" width="0.0436%" height="15" fill="rgb(216,169,33)" fg:x="3709" fg:w="2"/><text x="81.0913%" y="191.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (26 samples, 0.57%)</title><rect x="80.3400%" y="309" width="0.5667%" height="15" fill="rgb(233,80,24)" fg:x="3686" fg:w="26"/><text x="80.5900%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (20 samples, 0.44%)</title><rect x="80.4708%" y="293" width="0.4359%" height="15" fill="rgb(213,179,31)" fg:x="3692" fg:w="20"/><text x="80.7208%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (20 samples, 0.44%)</title><rect x="80.4708%" y="277" width="0.4359%" height="15" fill="rgb(209,19,5)" fg:x="3692" fg:w="20"/><text x="80.7208%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (19 samples, 0.41%)</title><rect x="80.4926%" y="261" width="0.4141%" height="15" fill="rgb(219,18,35)" fg:x="3693" fg:w="19"/><text x="80.7426%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (19 samples, 0.41%)</title><rect x="80.4926%" y="245" width="0.4141%" height="15" fill="rgb(209,169,16)" fg:x="3693" fg:w="19"/><text x="80.7426%" y="255.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (17 samples, 0.37%)</title><rect x="80.5362%" y="229" width="0.3705%" height="15" fill="rgb(245,90,51)" fg:x="3695" fg:w="17"/><text x="80.7862%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (7 samples, 0.15%)</title><rect x="80.7541%" y="213" width="0.1526%" height="15" fill="rgb(220,99,45)" fg:x="3705" fg:w="7"/><text x="81.0041%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;&gt;::value &amp;&amp; is_constructible&lt;rocksdb::lru_cache::LRUHandle*, std::__1::iterator_traits&lt;std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;&gt;::reference&gt;::value, void&gt;::type std::__1::vector&lt;rocksdb::lru_cache::LRUHandle*, std::__1::allocator&lt;rocksdb::lru_cache::LRUHandle*&gt;&gt;::assign&lt;std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;&gt;(std::__1::__wrap_iter&lt;rocksdb::lru_cache::LRUHandle* const*&gt;, std::__1::__wrap_iter (1 samples, 0.02%)</title><rect x="80.8849%" y="197" width="0.0218%" height="15" fill="rgb(249,89,25)" fg:x="3711" fg:w="1"/><text x="81.1349%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (31 samples, 0.68%)</title><rect x="80.2528%" y="357" width="0.6757%" height="15" fill="rgb(239,193,0)" fg:x="3682" fg:w="31"/><text x="80.5028%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::LoadFactory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (29 samples, 0.63%)</title><rect x="80.2964%" y="341" width="0.6321%" height="15" fill="rgb(231,126,1)" fg:x="3684" fg:w="29"/><text x="80.5464%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (28 samples, 0.61%)</title><rect x="80.3182%" y="325" width="0.6103%" height="15" fill="rgb(243,166,3)" fg:x="3685" fg:w="28"/><text x="80.5682%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::BlockBasedTableOptions (1 samples, 0.02%)</title><rect x="80.9067%" y="309" width="0.0218%" height="15" fill="rgb(223,22,34)" fg:x="3712" fg:w="1"/><text x="81.1567%" y="319.50"></text></g><g><title>rusk-wallet`void std::__1::map&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions, std::__1::less&lt;rocksdb::CacheEntryRole&gt;, std::__1::allocator&lt;std::__1::pair&lt;rocksdb::CacheEntryRole const, rocksdb::CacheEntryRoleOptions&gt;&gt;&gt;::insert[abi:v15006]&lt;std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, void*&gt;*, long&gt;&gt;&gt;(std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, std::__1::__tree_node&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, void*&gt;*, long&gt;&gt;, std::__1::__map_const_iterator&lt;std::__1::__tree_const_iterator&lt;std::__1::__value_type&lt;rocksdb::CacheEntryRole, rocksdb::CacheEntryRoleOptions&gt;, std::__1::__tree_node&lt;std::__1::__value_type (1 samples, 0.02%)</title><rect x="80.9067%" y="293" width="0.0218%" height="15" fill="rgb(251,52,51)" fg:x="3712" fg:w="1"/><text x="81.1567%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="80.9285%" y="341" width="0.0436%" height="15" fill="rgb(221,165,28)" fg:x="3713" fg:w="2"/><text x="81.1785%" y="351.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="80.9721%" y="341" width="0.0218%" height="15" fill="rgb(218,121,47)" fg:x="3715" fg:w="1"/><text x="81.2221%" y="351.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="80.9939%" y="341" width="0.0654%" height="15" fill="rgb(209,120,9)" fg:x="3716" fg:w="3"/><text x="81.2439%" y="351.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (8 samples, 0.17%)</title><rect x="81.0593%" y="341" width="0.1744%" height="15" fill="rgb(236,68,12)" fg:x="3719" fg:w="8"/><text x="81.3093%" y="351.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="81.4734%" y="325" width="0.0218%" height="15" fill="rgb(225,194,26)" fg:x="3738" fg:w="1"/><text x="81.7234%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="81.4952%" y="325" width="0.0218%" height="15" fill="rgb(231,84,39)" fg:x="3739" fg:w="1"/><text x="81.7452%" y="335.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="81.6042%" y="293" width="0.0436%" height="15" fill="rgb(210,11,45)" fg:x="3744" fg:w="2"/><text x="81.8542%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="81.6478%" y="293" width="0.0654%" height="15" fill="rgb(224,54,52)" fg:x="3746" fg:w="3"/><text x="81.8978%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (14 samples, 0.31%)</title><rect x="81.5170%" y="325" width="0.3051%" height="15" fill="rgb(238,102,14)" fg:x="3740" fg:w="14"/><text x="81.7670%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (10 samples, 0.22%)</title><rect x="81.6042%" y="309" width="0.2180%" height="15" fill="rgb(243,160,52)" fg:x="3744" fg:w="10"/><text x="81.8542%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.11%)</title><rect x="81.7132%" y="293" width="0.1090%" height="15" fill="rgb(216,114,19)" fg:x="3749" fg:w="5"/><text x="81.9632%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="81.8221%" y="325" width="0.0218%" height="15" fill="rgb(244,166,37)" fg:x="3754" fg:w="1"/><text x="82.0721%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="81.8221%" y="309" width="0.0218%" height="15" fill="rgb(246,29,44)" fg:x="3754" fg:w="1"/><text x="82.0721%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="81.8221%" y="293" width="0.0218%" height="15" fill="rgb(215,56,53)" fg:x="3754" fg:w="1"/><text x="82.0721%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.09%)</title><rect x="81.8439%" y="325" width="0.0872%" height="15" fill="rgb(217,60,2)" fg:x="3755" fg:w="4"/><text x="82.0939%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="81.9311%" y="325" width="0.0436%" height="15" fill="rgb(207,26,24)" fg:x="3759" fg:w="2"/><text x="82.1811%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (41 samples, 0.89%)</title><rect x="81.2337%" y="341" width="0.8936%" height="15" fill="rgb(252,210,15)" fg:x="3727" fg:w="41"/><text x="81.4837%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.15%)</title><rect x="81.9747%" y="325" width="0.1526%" height="15" fill="rgb(253,209,26)" fg:x="3761" fg:w="7"/><text x="82.2247%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (58 samples, 1.26%)</title><rect x="80.9285%" y="357" width="1.2642%" height="15" fill="rgb(238,170,14)" fg:x="3713" fg:w="58"/><text x="81.1785%" y="367.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="82.1273%" y="341" width="0.0654%" height="15" fill="rgb(216,178,15)" fg:x="3768" fg:w="3"/><text x="82.3773%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="82.1709%" y="325" width="0.0218%" height="15" fill="rgb(250,197,2)" fg:x="3770" fg:w="1"/><text x="82.4209%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="82.1709%" y="309" width="0.0218%" height="15" fill="rgb(212,70,42)" fg:x="3770" fg:w="1"/><text x="82.4209%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="82.1709%" y="293" width="0.0218%" height="15" fill="rgb(227,213,9)" fg:x="3770" fg:w="1"/><text x="82.4209%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="82.1709%" y="277" width="0.0218%" height="15" fill="rgb(245,99,25)" fg:x="3770" fg:w="1"/><text x="82.4209%" y="287.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="82.1927%" y="357" width="0.0218%" height="15" fill="rgb(250,82,29)" fg:x="3771" fg:w="1"/><text x="82.4427%" y="367.50"></text></g><g><title>rusk-wallet`std::__1::unique_ptr&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;, std::__1::__hash_node_destructor&lt;std::__1::allocator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;&gt;&gt;&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string (1 samples, 0.02%)</title><rect x="82.1927%" y="341" width="0.0218%" height="15" fill="rgb(241,226,54)" fg:x="3771" fg:w="1"/><text x="82.4427%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="82.1927%" y="325" width="0.0218%" height="15" fill="rgb(221,99,41)" fg:x="3771" fg:w="1"/><text x="82.4427%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="82.1927%" y="309" width="0.0218%" height="15" fill="rgb(213,90,21)" fg:x="3771" fg:w="1"/><text x="82.4427%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="82.1927%" y="293" width="0.0218%" height="15" fill="rgb(205,208,24)" fg:x="3771" fg:w="1"/><text x="82.4427%" y="303.50"></text></g><g><title>rusk-wallet`void std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;::construct[abi:v15006]&lt;rocksdb::ColumnFamilyOptions, rocksdb::ColumnFamilyOptions&gt; (1 samples, 0.02%)</title><rect x="82.2145%" y="357" width="0.0218%" height="15" fill="rgb(246,31,12)" fg:x="3772" fg:w="1"/><text x="82.4645%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="82.2363%" y="293" width="0.0218%" height="15" fill="rgb(213,154,6)" fg:x="3773" fg:w="1"/><text x="82.4863%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="82.2363%" y="277" width="0.0218%" height="15" fill="rgb(222,163,29)" fg:x="3773" fg:w="1"/><text x="82.4863%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="82.2363%" y="261" width="0.0218%" height="15" fill="rgb(227,201,8)" fg:x="3773" fg:w="1"/><text x="82.4863%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (2 samples, 0.04%)</title><rect x="82.2363%" y="341" width="0.0436%" height="15" fill="rgb(233,9,32)" fg:x="3773" fg:w="2"/><text x="82.4863%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (2 samples, 0.04%)</title><rect x="82.2363%" y="325" width="0.0436%" height="15" fill="rgb(217,54,24)" fg:x="3773" fg:w="2"/><text x="82.4863%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (2 samples, 0.04%)</title><rect x="82.2363%" y="309" width="0.0436%" height="15" fill="rgb(235,192,0)" fg:x="3773" fg:w="2"/><text x="82.4863%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.02%)</title><rect x="82.2581%" y="293" width="0.0218%" height="15" fill="rgb(235,45,9)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="82.2581%" y="277" width="0.0218%" height="15" fill="rgb(246,42,40)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="82.2581%" y="261" width="0.0218%" height="15" fill="rgb(248,111,24)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="82.2581%" y="245" width="0.0218%" height="15" fill="rgb(249,65,22)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="255.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="82.2581%" y="229" width="0.0218%" height="15" fill="rgb(238,111,51)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.02%)</title><rect x="82.2581%" y="213" width="0.0218%" height="15" fill="rgb(250,118,22)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (1 samples, 0.02%)</title><rect x="82.2581%" y="197" width="0.0218%" height="15" fill="rgb(234,84,26)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="82.2581%" y="181" width="0.0218%" height="15" fill="rgb(243,172,12)" fg:x="3774" fg:w="1"/><text x="82.5081%" y="191.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt;::__emplace_back_slow_path&lt;&gt; (3 samples, 0.07%)</title><rect x="82.2363%" y="357" width="0.0654%" height="15" fill="rgb(236,150,49)" fg:x="3773" fg:w="3"/><text x="82.4863%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="82.2799%" y="341" width="0.0218%" height="15" fill="rgb(225,197,26)" fg:x="3775" fg:w="1"/><text x="82.5299%" y="351.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="82.3017%" y="325" width="0.0218%" height="15" fill="rgb(214,17,42)" fg:x="3776" fg:w="1"/><text x="82.5517%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="82.3235%" y="309" width="0.0218%" height="15" fill="rgb(224,165,40)" fg:x="3777" fg:w="1"/><text x="82.5735%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="82.3235%" y="325" width="0.0436%" height="15" fill="rgb(246,100,4)" fg:x="3777" fg:w="2"/><text x="82.5735%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="82.3452%" y="309" width="0.0218%" height="15" fill="rgb(222,103,0)" fg:x="3778" fg:w="1"/><text x="82.5952%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2,482 samples, 54.10%)</title><rect x="28.2912%" y="373" width="54.0976%" height="15" fill="rgb(227,189,26)" fg:x="1298" fg:w="2482"/><text x="28.5412%" y="383.50">rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rock..</text></g><g><title>rusk-wallet`void std::__1::vector&lt;std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (4 samples, 0.09%)</title><rect x="82.3017%" y="357" width="0.0872%" height="15" fill="rgb(214,202,17)" fg:x="3776" fg:w="4"/><text x="82.5517%" y="367.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (4 samples, 0.09%)</title><rect x="82.3017%" y="341" width="0.0872%" height="15" fill="rgb(229,111,3)" fg:x="3776" fg:w="4"/><text x="82.5517%" y="351.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="82.3670%" y="325" width="0.0218%" height="15" fill="rgb(229,172,15)" fg:x="3779" fg:w="1"/><text x="82.6170%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (7 samples, 0.15%)</title><rect x="82.4978%" y="357" width="0.1526%" height="15" fill="rgb(230,224,35)" fg:x="3785" fg:w="7"/><text x="82.7478%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="82.6504%" y="357" width="0.0218%" height="15" fill="rgb(251,141,6)" fg:x="3792" fg:w="1"/><text x="82.9004%" y="367.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (4 samples, 0.09%)</title><rect x="82.6722%" y="357" width="0.0872%" height="15" fill="rgb(225,208,6)" fg:x="3793" fg:w="4"/><text x="82.9222%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.09%)</title><rect x="82.7594%" y="341" width="0.0872%" height="15" fill="rgb(246,181,16)" fg:x="3797" fg:w="4"/><text x="83.0094%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::CheckSection(rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="82.7594%" y="357" width="0.3269%" height="15" fill="rgb(227,129,36)" fg:x="3797" fg:w="15"/><text x="83.0094%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::GetCFOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="82.8466%" y="341" width="0.2398%" height="15" fill="rgb(248,117,24)" fg:x="3801" fg:w="11"/><text x="83.0966%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseSection(rocksdb::OptionSection*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (48 samples, 1.05%)</title><rect x="82.3888%" y="373" width="1.0462%" height="15" fill="rgb(214,185,35)" fg:x="3780" fg:w="48"/><text x="82.6388%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (16 samples, 0.35%)</title><rect x="83.0863%" y="357" width="0.3487%" height="15" fill="rgb(236,150,34)" fg:x="3812" fg:w="16"/><text x="83.3363%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (10 samples, 0.22%)</title><rect x="83.2171%" y="341" width="0.2180%" height="15" fill="rgb(243,228,27)" fg:x="3818" fg:w="10"/><text x="83.4671%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by (1 samples, 0.02%)</title><rect x="83.4133%" y="325" width="0.0218%" height="15" fill="rgb(245,77,44)" fg:x="3827" fg:w="1"/><text x="83.6633%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="83.4133%" y="309" width="0.0218%" height="15" fill="rgb(235,214,42)" fg:x="3827" fg:w="1"/><text x="83.6633%" y="319.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (4 samples, 0.09%)</title><rect x="83.6748%" y="357" width="0.0872%" height="15" fill="rgb(221,74,3)" fg:x="3839" fg:w="4"/><text x="83.9248%" y="367.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="83.7620%" y="357" width="0.0218%" height="15" fill="rgb(206,121,29)" fg:x="3843" fg:w="1"/><text x="84.0120%" y="367.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="84.5466%" y="341" width="0.0218%" height="15" fill="rgb(249,131,53)" fg:x="3879" fg:w="1"/><text x="84.7966%" y="351.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (4 samples, 0.09%)</title><rect x="84.5684%" y="341" width="0.0872%" height="15" fill="rgb(236,170,29)" fg:x="3880" fg:w="4"/><text x="84.8184%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.07%)</title><rect x="84.5902%" y="325" width="0.0654%" height="15" fill="rgb(247,96,15)" fg:x="3881" fg:w="3"/><text x="84.8402%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.07%)</title><rect x="84.5902%" y="309" width="0.0654%" height="15" fill="rgb(211,210,7)" fg:x="3881" fg:w="3"/><text x="84.8402%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10 samples, 0.22%)</title><rect x="84.6556%" y="341" width="0.2180%" height="15" fill="rgb(240,88,50)" fg:x="3884" fg:w="10"/><text x="84.9056%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (58 samples, 1.26%)</title><rect x="83.7838%" y="357" width="1.2642%" height="15" fill="rgb(209,229,26)" fg:x="3844" fg:w="58"/><text x="84.0338%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (8 samples, 0.17%)</title><rect x="84.8736%" y="341" width="0.1744%" height="15" fill="rgb(210,68,23)" fg:x="3894" fg:w="8"/><text x="85.1236%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="85.0480%" y="357" width="0.0218%" height="15" fill="rgb(229,180,13)" fg:x="3902" fg:w="1"/><text x="85.2980%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.04%)</title><rect x="85.0697%" y="357" width="0.0436%" height="15" fill="rgb(236,53,44)" fg:x="3903" fg:w="2"/><text x="85.3197%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.04%)</title><rect x="85.1133%" y="357" width="0.0436%" height="15" fill="rgb(244,214,29)" fg:x="3905" fg:w="2"/><text x="85.3633%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.24%)</title><rect x="85.1569%" y="357" width="0.2398%" height="15" fill="rgb(220,75,29)" fg:x="3907" fg:w="11"/><text x="85.4069%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (55 samples, 1.20%)</title><rect x="85.3967%" y="357" width="1.1988%" height="15" fill="rgb(214,183,37)" fg:x="3918" fg:w="55"/><text x="85.6467%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.15%)</title><rect x="86.5955%" y="357" width="0.1526%" height="15" fill="rgb(239,117,29)" fg:x="3973" fg:w="7"/><text x="86.8455%" y="367.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memchr (1 samples, 0.02%)</title><rect x="87.0750%" y="341" width="0.0218%" height="15" fill="rgb(237,171,35)" fg:x="3995" fg:w="1"/><text x="87.3250%" y="351.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (2 samples, 0.04%)</title><rect x="87.0968%" y="341" width="0.0436%" height="15" fill="rgb(229,178,53)" fg:x="3996" fg:w="2"/><text x="87.3468%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseStatement(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (172 samples, 3.75%)</title><rect x="83.4350%" y="373" width="3.7489%" height="15" fill="rgb(210,102,19)" fg:x="3828" fg:w="172"/><text x="83.6850%" y="383.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::TrimAndRemoveComment(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.44%)</title><rect x="86.7480%" y="357" width="0.4359%" height="15" fill="rgb(235,127,22)" fg:x="3980" fg:w="20"/><text x="86.9980%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (2 samples, 0.04%)</title><rect x="87.1404%" y="341" width="0.0436%" height="15" fill="rgb(244,31,31)" fg:x="3998" fg:w="2"/><text x="87.3904%" y="351.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memchr (2 samples, 0.04%)</title><rect x="87.4891%" y="357" width="0.0436%" height="15" fill="rgb(231,43,21)" fg:x="4014" fg:w="2"/><text x="87.7391%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (4 samples, 0.09%)</title><rect x="87.5327%" y="357" width="0.0872%" height="15" fill="rgb(217,131,35)" fg:x="4016" fg:w="4"/><text x="87.7827%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::TrimAndRemoveComment(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (28 samples, 0.61%)</title><rect x="87.1840%" y="373" width="0.6103%" height="15" fill="rgb(221,149,4)" fg:x="4000" fg:w="28"/><text x="87.4340%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (8 samples, 0.17%)</title><rect x="87.6199%" y="357" width="0.1744%" height="15" fill="rgb(232,170,28)" fg:x="4020" fg:w="8"/><text x="87.8699%" y="367.50"></text></g><g><title>libsystem_c.dylib`fclose (1 samples, 0.02%)</title><rect x="87.7942%" y="325" width="0.0218%" height="15" fill="rgb(238,56,10)" fg:x="4028" fg:w="1"/><text x="88.0442%" y="335.50"></text></g><g><title>libsystem_c.dylib`__sfprelease (1 samples, 0.02%)</title><rect x="87.7942%" y="309" width="0.0218%" height="15" fill="rgb(235,196,14)" fg:x="4028" fg:w="1"/><text x="88.0442%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (1 samples, 0.02%)</title><rect x="87.7942%" y="293" width="0.0218%" height="15" fill="rgb(216,45,48)" fg:x="4028" fg:w="1"/><text x="88.0442%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::SequentialFileReader::~SequentialFileReader (2 samples, 0.04%)</title><rect x="87.7942%" y="373" width="0.0436%" height="15" fill="rgb(238,213,17)" fg:x="4028" fg:w="2"/><text x="88.0442%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::ReadaheadSequentialFile::~ReadaheadSequentialFile (2 samples, 0.04%)</title><rect x="87.7942%" y="357" width="0.0436%" height="15" fill="rgb(212,13,2)" fg:x="4028" fg:w="2"/><text x="88.0442%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::PosixSequentialFile::~PosixSequentialFile (2 samples, 0.04%)</title><rect x="87.7942%" y="341" width="0.0436%" height="15" fill="rgb(240,114,20)" fg:x="4028" fg:w="2"/><text x="88.0442%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__close_nocancel (1 samples, 0.02%)</title><rect x="87.8160%" y="325" width="0.0218%" height="15" fill="rgb(228,41,40)" fg:x="4029" fg:w="1"/><text x="88.0660%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (2 samples, 0.04%)</title><rect x="87.8378%" y="373" width="0.0436%" height="15" fill="rgb(244,132,35)" fg:x="4030" fg:w="2"/><text x="88.0878%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="88.3173%" y="357" width="0.0218%" height="15" fill="rgb(253,189,4)" fg:x="4052" fg:w="1"/><text x="88.5673%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="88.3391%" y="357" width="0.0218%" height="15" fill="rgb(224,37,19)" fg:x="4053" fg:w="1"/><text x="88.5891%" y="367.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (2 samples, 0.04%)</title><rect x="88.4045%" y="325" width="0.0436%" height="15" fill="rgb(235,223,18)" fg:x="4056" fg:w="2"/><text x="88.6545%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="88.4481%" y="325" width="0.0218%" height="15" fill="rgb(235,163,25)" fg:x="4058" fg:w="1"/><text x="88.6981%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (7 samples, 0.15%)</title><rect x="88.4045%" y="341" width="0.1526%" height="15" fill="rgb(217,145,28)" fg:x="4056" fg:w="7"/><text x="88.6545%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.09%)</title><rect x="88.4699%" y="325" width="0.0872%" height="15" fill="rgb(223,223,32)" fg:x="4059" fg:w="4"/><text x="88.7199%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (12 samples, 0.26%)</title><rect x="88.3609%" y="357" width="0.2616%" height="15" fill="rgb(227,189,39)" fg:x="4054" fg:w="12"/><text x="88.6109%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="88.5571%" y="341" width="0.0654%" height="15" fill="rgb(248,10,22)" fg:x="4063" fg:w="3"/><text x="88.8071%" y="351.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="88.6225%" y="357" width="0.0218%" height="15" fill="rgb(248,46,39)" fg:x="4066" fg:w="1"/><text x="88.8725%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.07%)</title><rect x="88.6443%" y="357" width="0.0654%" height="15" fill="rgb(248,113,48)" fg:x="4067" fg:w="3"/><text x="88.8943%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.07%)</title><rect x="88.6443%" y="341" width="0.0654%" height="15" fill="rgb(245,16,25)" fg:x="4067" fg:w="3"/><text x="88.8943%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.07%)</title><rect x="88.6443%" y="325" width="0.0654%" height="15" fill="rgb(249,152,16)" fg:x="4067" fg:w="3"/><text x="88.8943%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="88.7097%" y="357" width="0.0654%" height="15" fill="rgb(250,16,1)" fg:x="4070" fg:w="3"/><text x="88.9597%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="88.7751%" y="357" width="0.0218%" height="15" fill="rgb(249,138,3)" fg:x="4073" fg:w="1"/><text x="89.0251%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (15 samples, 0.33%)</title><rect x="88.7969%" y="357" width="0.3269%" height="15" fill="rgb(227,71,41)" fg:x="4074" fg:w="15"/><text x="89.0469%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3,193 samples, 69.59%)</title><rect x="19.6600%" y="389" width="69.5946%" height="15" fill="rgb(209,184,23)" fg:x="902" fg:w="3193"/><text x="19.9100%" y="399.50">rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::_..</text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (63 samples, 1.37%)</title><rect x="87.8814%" y="373" width="1.3731%" height="15" fill="rgb(223,215,31)" fg:x="4032" fg:w="63"/><text x="88.1314%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.13%)</title><rect x="89.1238%" y="357" width="0.1308%" height="15" fill="rgb(210,146,28)" fg:x="4089" fg:w="6"/><text x="89.3738%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseStatement(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="89.2546%" y="389" width="0.0436%" height="15" fill="rgb(209,183,41)" fg:x="4095" fg:w="2"/><text x="89.5046%" y="399.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="89.2982%" y="357" width="0.0218%" height="15" fill="rgb(209,224,45)" fg:x="4097" fg:w="1"/><text x="89.5482%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="89.2982%" y="341" width="0.0218%" height="15" fill="rgb(224,209,51)" fg:x="4097" fg:w="1"/><text x="89.5482%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.02%)</title><rect x="89.2982%" y="325" width="0.0218%" height="15" fill="rgb(223,17,39)" fg:x="4097" fg:w="1"/><text x="89.5482%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.02%)</title><rect x="89.2982%" y="309" width="0.0218%" height="15" fill="rgb(234,204,37)" fg:x="4097" fg:w="1"/><text x="89.5482%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="89.2982%" y="293" width="0.0218%" height="15" fill="rgb(236,120,5)" fg:x="4097" fg:w="1"/><text x="89.5482%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="89.3200%" y="357" width="0.0218%" height="15" fill="rgb(248,97,27)" fg:x="4098" fg:w="1"/><text x="89.5700%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="89.3418%" y="357" width="0.0218%" height="15" fill="rgb(240,66,17)" fg:x="4099" fg:w="1"/><text x="89.5918%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.04%)</title><rect x="89.3636%" y="341" width="0.0436%" height="15" fill="rgb(210,79,3)" fg:x="4100" fg:w="2"/><text x="89.6136%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (3 samples, 0.07%)</title><rect x="89.4071%" y="341" width="0.0654%" height="15" fill="rgb(214,176,27)" fg:x="4102" fg:w="3"/><text x="89.6571%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::AdvancedColumnFamilyOptions (2 samples, 0.04%)</title><rect x="89.4289%" y="325" width="0.0436%" height="15" fill="rgb(235,185,3)" fg:x="4103" fg:w="2"/><text x="89.6789%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="89.5161%" y="325" width="0.0436%" height="15" fill="rgb(227,24,12)" fg:x="4107" fg:w="2"/><text x="89.7661%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::RegisterOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="89.4725%" y="341" width="0.1090%" height="15" fill="rgb(252,169,48)" fg:x="4105" fg:w="5"/><text x="89.7225%" y="351.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::Configurable::RegisteredOptions, std::__1::allocator&lt;rocksdb::Configurable::RegisteredOptions&gt;&gt;::__emplace_back_slow_path&lt;rocksdb::Configurable::RegisteredOptions&amp;&gt; (1 samples, 0.02%)</title><rect x="89.5597%" y="325" width="0.0218%" height="15" fill="rgb(212,65,1)" fg:x="4109" fg:w="1"/><text x="89.8097%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="89.5597%" y="309" width="0.0218%" height="15" fill="rgb(242,39,24)" fg:x="4109" fg:w="1"/><text x="89.8097%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableMutableCFOptions::ConfigurableMutableCFOptions (4 samples, 0.09%)</title><rect x="89.5815%" y="341" width="0.0872%" height="15" fill="rgb(249,32,23)" fg:x="4110" fg:w="4"/><text x="89.8315%" y="351.50"></text></g><g><title>rusk-wallet`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;rocksdb::CompressionType*&gt;::value &amp;&amp; is_constructible&lt;rocksdb::CompressionType, std::__1::iterator_traits&lt;rocksdb::CompressionType*&gt;::reference&gt;::value, void&gt;::type std::__1::vector&lt;rocksdb::CompressionType, std::__1::allocator&lt;rocksdb::CompressionType&gt;&gt;::assign&lt;rocksdb::CompressionType*&gt; (1 samples, 0.02%)</title><rect x="89.6469%" y="325" width="0.0218%" height="15" fill="rgb(251,195,23)" fg:x="4113" fg:w="1"/><text x="89.8969%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::CFOptionsAsConfigurable(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (20 samples, 0.44%)</title><rect x="89.2982%" y="373" width="0.4359%" height="15" fill="rgb(236,174,8)" fg:x="4097" fg:w="20"/><text x="89.5482%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigurableCFOptions(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (17 samples, 0.37%)</title><rect x="89.3636%" y="357" width="0.3705%" height="15" fill="rgb(220,197,8)" fg:x="4100" fg:w="17"/><text x="89.6136%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::MutableCFOptions (3 samples, 0.07%)</title><rect x="89.6687%" y="341" width="0.0654%" height="15" fill="rgb(240,108,37)" fg:x="4114" fg:w="3"/><text x="89.9187%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::MutableCFOptions::RefreshDerivedOptions (1 samples, 0.02%)</title><rect x="89.7123%" y="325" width="0.0218%" height="15" fill="rgb(232,176,24)" fg:x="4116" fg:w="1"/><text x="89.9623%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::OptionsAreEqual(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="89.7341%" y="373" width="0.0218%" height="15" fill="rgb(243,35,29)" fg:x="4117" fg:w="1"/><text x="89.9841%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="89.7559%" y="357" width="0.0218%" height="15" fill="rgb(210,37,18)" fg:x="4118" fg:w="1"/><text x="90.0059%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableMutableCFOptions::~ConfigurableMutableCFOptions (2 samples, 0.04%)</title><rect x="89.7777%" y="357" width="0.0436%" height="15" fill="rgb(224,184,40)" fg:x="4119" fg:w="2"/><text x="90.0277%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="89.7777%" y="341" width="0.0436%" height="15" fill="rgb(236,39,29)" fg:x="4119" fg:w="2"/><text x="90.0277%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::~ConfigurableCFOptions (6 samples, 0.13%)</title><rect x="89.7559%" y="373" width="0.1308%" height="15" fill="rgb(232,48,39)" fg:x="4118" fg:w="6"/><text x="90.0059%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ImmutableCFOptions::~ImmutableCFOptions (3 samples, 0.07%)</title><rect x="89.8213%" y="357" width="0.0654%" height="15" fill="rgb(236,34,42)" fg:x="4121" fg:w="3"/><text x="90.0713%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="89.8431%" y="341" width="0.0436%" height="15" fill="rgb(243,106,37)" fg:x="4122" fg:w="2"/><text x="90.0931%" y="351.50"></text></g><g><title>rusk-wallet`bool std::__1::operator!=[abi:v15006]&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="90.0828%" y="341" width="0.0872%" height="15" fill="rgb(218,96,6)" fg:x="4133" fg:w="4"/><text x="90.3328%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="90.3008%" y="325" width="0.0436%" height="15" fill="rgb(235,130,12)" fg:x="4143" fg:w="2"/><text x="90.5508%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="90.3008%" y="309" width="0.0436%" height="15" fill="rgb(231,95,0)" fg:x="4143" fg:w="2"/><text x="90.5508%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsPtr(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.3226%" y="293" width="0.0218%" height="15" fill="rgb(228,12,23)" fg:x="4144" fg:w="1"/><text x="90.5726%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionsPtr(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.3226%" y="277" width="0.0218%" height="15" fill="rgb(216,12,1)" fg:x="4144" fg:w="1"/><text x="90.5726%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::StructsAreEqual(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.3444%" y="325" width="0.0218%" height="15" fill="rgb(219,59,3)" fg:x="4145" fg:w="1"/><text x="90.5944%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::AreEqual(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="90.1700%" y="341" width="0.2398%" height="15" fill="rgb(215,208,46)" fg:x="4137" fg:w="11"/><text x="90.4200%" y="351.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;int&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*), std::__1::allocator&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Vector&lt;int&gt;(int, rocksdb::OptionVerificationType, rocksdb::OptionTypeFlags, rocksdb::OptionTypeInfo const&amp;, char)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt;, bool (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="90.3662%" y="325" width="0.0436%" height="15" fill="rgb(254,224,29)" fg:x="4146" fg:w="2"/><text x="90.6162%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::AreEqual(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.3880%" y="309" width="0.0218%" height="15" fill="rgb(232,14,29)" fg:x="4147" fg:w="1"/><text x="90.6380%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="90.4098%" y="341" width="0.0872%" height="15" fill="rgb(208,45,52)" fg:x="4148" fg:w="4"/><text x="90.6598%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::OptionsAreEqual(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (22 samples, 0.48%)</title><rect x="90.0392%" y="357" width="0.4795%" height="15" fill="rgb(234,191,28)" fg:x="4131" fg:w="22"/><text x="90.2892%" y="367.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="90.4969%" y="341" width="0.0218%" height="15" fill="rgb(244,67,43)" fg:x="4152" fg:w="1"/><text x="90.7469%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyCFOptions(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (57 samples, 1.24%)</title><rect x="89.2982%" y="389" width="1.2424%" height="15" fill="rgb(236,189,24)" fg:x="4097" fg:w="57"/><text x="89.5482%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (30 samples, 0.65%)</title><rect x="89.8867%" y="373" width="0.6539%" height="15" fill="rgb(239,214,33)" fg:x="4124" fg:w="30"/><text x="90.1367%" y="383.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.5187%" y="357" width="0.0218%" height="15" fill="rgb(226,176,41)" fg:x="4153" fg:w="1"/><text x="90.7687%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::~AdvancedColumnFamilyOptions (2 samples, 0.04%)</title><rect x="90.5405%" y="325" width="0.0436%" height="15" fill="rgb(248,47,8)" fg:x="4154" fg:w="2"/><text x="90.7905%" y="335.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (2 samples, 0.04%)</title><rect x="90.5405%" y="309" width="0.0436%" height="15" fill="rgb(218,81,44)" fg:x="4154" fg:w="2"/><text x="90.7905%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsConfigurable::DBOptionsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="90.5405%" y="357" width="0.0654%" height="15" fill="rgb(213,98,6)" fg:x="4154" fg:w="3"/><text x="90.7905%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ImmutableDBOptions::ImmutableDBOptions (3 samples, 0.07%)</title><rect x="90.5405%" y="341" width="0.0654%" height="15" fill="rgb(222,85,22)" fg:x="4154" fg:w="3"/><text x="90.7905%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="90.5841%" y="325" width="0.0218%" height="15" fill="rgb(239,46,39)" fg:x="4156" fg:w="1"/><text x="90.8341%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="90.5841%" y="309" width="0.0218%" height="15" fill="rgb(237,12,29)" fg:x="4156" fg:w="1"/><text x="90.8341%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (1 samples, 0.02%)</title><rect x="90.5841%" y="293" width="0.0218%" height="15" fill="rgb(214,77,8)" fg:x="4156" fg:w="1"/><text x="90.8341%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="90.5841%" y="277" width="0.0218%" height="15" fill="rgb(217,168,37)" fg:x="4156" fg:w="1"/><text x="90.8341%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="90.5841%" y="261" width="0.0218%" height="15" fill="rgb(221,217,23)" fg:x="4156" fg:w="1"/><text x="90.8341%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="90.5841%" y="245" width="0.0218%" height="15" fill="rgb(243,229,36)" fg:x="4156" fg:w="1"/><text x="90.8341%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="90.5405%" y="389" width="0.0872%" height="15" fill="rgb(251,163,40)" fg:x="4154" fg:w="4"/><text x="90.7905%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsAsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="90.5405%" y="373" width="0.0872%" height="15" fill="rgb(237,222,12)" fg:x="4154" fg:w="4"/><text x="90.7905%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ImmutableDBOptions::ImmutableDBOptions (1 samples, 0.02%)</title><rect x="90.6059%" y="357" width="0.0218%" height="15" fill="rgb(248,132,6)" fg:x="4157" fg:w="1"/><text x="90.8559%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="90.6495%" y="357" width="0.0218%" height="15" fill="rgb(227,167,50)" fg:x="4159" fg:w="1"/><text x="90.8995%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::GetOptionsPtr(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.6931%" y="341" width="0.0218%" height="15" fill="rgb(242,84,37)" fg:x="4161" fg:w="1"/><text x="90.9431%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionsPtr(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.6931%" y="325" width="0.0218%" height="15" fill="rgb(212,4,50)" fg:x="4161" fg:w="1"/><text x="90.9431%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="90.6495%" y="373" width="0.1526%" height="15" fill="rgb(230,228,32)" fg:x="4159" fg:w="7"/><text x="90.8995%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="90.6713%" y="357" width="0.1308%" height="15" fill="rgb(248,217,23)" fg:x="4160" fg:w="6"/><text x="90.9213%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::OptionsAreEqual(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="90.7149%" y="341" width="0.0872%" height="15" fill="rgb(238,197,32)" fg:x="4162" fg:w="4"/><text x="90.9649%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::AreEqual(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="90.7367%" y="325" width="0.0654%" height="15" fill="rgb(236,106,1)" fg:x="4163" fg:w="3"/><text x="90.9867%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::StructsAreEqual(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.7803%" y="309" width="0.0218%" height="15" fill="rgb(219,228,13)" fg:x="4165" fg:w="1"/><text x="91.0303%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::AreEqual(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="90.7803%" y="293" width="0.0218%" height="15" fill="rgb(238,30,35)" fg:x="4165" fg:w="1"/><text x="91.0303%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyTableFactory (9 samples, 0.20%)</title><rect x="90.6277%" y="389" width="0.1962%" height="15" fill="rgb(236,70,23)" fg:x="4158" fg:w="9"/><text x="90.8777%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetId (1 samples, 0.02%)</title><rect x="90.8021%" y="373" width="0.0218%" height="15" fill="rgb(249,104,48)" fg:x="4166" fg:w="1"/><text x="91.0521%" y="383.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="90.8239%" y="373" width="0.0218%" height="15" fill="rgb(254,117,50)" fg:x="4167" fg:w="1"/><text x="91.0739%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="90.8457%" y="373" width="0.0436%" height="15" fill="rgb(223,152,4)" fg:x="4168" fg:w="2"/><text x="91.0957%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (15 samples, 0.33%)</title><rect x="90.8893%" y="373" width="0.3269%" height="15" fill="rgb(245,6,2)" fg:x="4170" fg:w="15"/><text x="91.1393%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="91.2162%" y="373" width="0.0218%" height="15" fill="rgb(249,150,24)" fg:x="4185" fg:w="1"/><text x="91.4662%" y="383.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (2 samples, 0.04%)</title><rect x="91.2380%" y="373" width="0.0436%" height="15" fill="rgb(228,185,42)" fg:x="4186" fg:w="2"/><text x="91.4880%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::~AdvancedColumnFamilyOptions (1 samples, 0.02%)</title><rect x="91.2816%" y="373" width="0.0218%" height="15" fill="rgb(226,39,33)" fg:x="4188" fg:w="1"/><text x="91.5316%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::RibbonFilterPolicy::~RibbonFilterPolicy (1 samples, 0.02%)</title><rect x="91.2816%" y="357" width="0.0218%" height="15" fill="rgb(221,166,19)" fg:x="4188" fg:w="1"/><text x="91.5316%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="91.2816%" y="341" width="0.0218%" height="15" fill="rgb(209,109,2)" fg:x="4188" fg:w="1"/><text x="91.5316%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="91.3034%" y="357" width="0.0218%" height="15" fill="rgb(252,216,26)" fg:x="4189" fg:w="1"/><text x="91.5534%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="91.3034%" y="341" width="0.0218%" height="15" fill="rgb(227,173,36)" fg:x="4189" fg:w="1"/><text x="91.5534%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.02%)</title><rect x="91.3034%" y="325" width="0.0218%" height="15" fill="rgb(209,90,7)" fg:x="4189" fg:w="1"/><text x="91.5534%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="91.3470%" y="325" width="0.0218%" height="15" fill="rgb(250,194,11)" fg:x="4191" fg:w="1"/><text x="91.5970%" y="335.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="91.3688%" y="293" width="0.0218%" height="15" fill="rgb(220,72,50)" fg:x="4192" fg:w="1"/><text x="91.6188%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="91.3906%" y="293" width="0.0654%" height="15" fill="rgb(222,106,48)" fg:x="4193" fg:w="3"/><text x="91.6406%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.04%)</title><rect x="91.4560%" y="293" width="0.0436%" height="15" fill="rgb(216,220,45)" fg:x="4196" fg:w="2"/><text x="91.7060%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="91.4778%" y="277" width="0.0218%" height="15" fill="rgb(234,112,18)" fg:x="4197" fg:w="1"/><text x="91.7278%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (9 samples, 0.20%)</title><rect x="91.4996%" y="293" width="0.1962%" height="15" fill="rgb(206,179,9)" fg:x="4198" fg:w="9"/><text x="91.7496%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.13%)</title><rect x="91.5650%" y="277" width="0.1308%" height="15" fill="rgb(215,115,40)" fg:x="4201" fg:w="6"/><text x="91.8150%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (18 samples, 0.39%)</title><rect x="91.3688%" y="309" width="0.3923%" height="15" fill="rgb(222,69,34)" fg:x="4192" fg:w="18"/><text x="91.6188%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*), std::__1::allocator&lt;rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache()::&apos;lambda&apos;(rocksdb::lru_cache::LRUCacheShard*)&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (3 samples, 0.07%)</title><rect x="91.6957%" y="293" width="0.0654%" height="15" fill="rgb(209,161,10)" fg:x="4207" fg:w="3"/><text x="91.9457%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::~Mutex (2 samples, 0.04%)</title><rect x="91.7175%" y="277" width="0.0436%" height="15" fill="rgb(217,6,38)" fg:x="4208" fg:w="2"/><text x="91.9675%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_destroy (2 samples, 0.04%)</title><rect x="91.7175%" y="261" width="0.0436%" height="15" fill="rgb(229,229,48)" fg:x="4208" fg:w="2"/><text x="91.9675%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="91.7611%" y="277" width="0.0218%" height="15" fill="rgb(225,21,28)" fg:x="4210" fg:w="1"/><text x="92.0111%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="91.7829%" y="277" width="0.0218%" height="15" fill="rgb(206,33,13)" fg:x="4211" fg:w="1"/><text x="92.0329%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="91.8047%" y="277" width="0.0218%" height="15" fill="rgb(242,178,17)" fg:x="4212" fg:w="1"/><text x="92.0547%" y="287.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="91.8265%" y="261" width="0.0218%" height="15" fill="rgb(220,162,5)" fg:x="4213" fg:w="1"/><text x="92.0765%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="91.8483%" y="261" width="0.0218%" height="15" fill="rgb(210,33,43)" fg:x="4214" fg:w="1"/><text x="92.0983%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (27 samples, 0.59%)</title><rect x="91.3034%" y="373" width="0.5885%" height="15" fill="rgb(216,116,54)" fg:x="4189" fg:w="27"/><text x="91.5534%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (26 samples, 0.57%)</title><rect x="91.3252%" y="357" width="0.5667%" height="15" fill="rgb(249,92,24)" fg:x="4190" fg:w="26"/><text x="91.5752%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (26 samples, 0.57%)</title><rect x="91.3252%" y="341" width="0.5667%" height="15" fill="rgb(231,189,14)" fg:x="4190" fg:w="26"/><text x="91.5752%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (24 samples, 0.52%)</title><rect x="91.3688%" y="325" width="0.5231%" height="15" fill="rgb(230,8,41)" fg:x="4192" fg:w="24"/><text x="91.6188%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (6 samples, 0.13%)</title><rect x="91.7611%" y="309" width="0.1308%" height="15" fill="rgb(249,7,27)" fg:x="4210" fg:w="6"/><text x="92.0111%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (6 samples, 0.13%)</title><rect x="91.7611%" y="293" width="0.1308%" height="15" fill="rgb(232,86,5)" fg:x="4210" fg:w="6"/><text x="92.0111%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (3 samples, 0.07%)</title><rect x="91.8265%" y="277" width="0.0654%" height="15" fill="rgb(224,175,18)" fg:x="4213" fg:w="3"/><text x="92.0765%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__tree&lt;rocksdb::ParsedInternalKey, rocksdb::ParsedInternalKeyComparator, std::__1::allocator&lt;rocksdb::ParsedInternalKey&gt;&gt;::destroy(std::__1::__tree_node (1 samples, 0.02%)</title><rect x="91.8701%" y="261" width="0.0218%" height="15" fill="rgb(220,129,12)" fg:x="4215" fg:w="1"/><text x="92.1201%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.20%)</title><rect x="92.1099%" y="357" width="0.1962%" height="15" fill="rgb(210,19,36)" fg:x="4226" fg:w="9"/><text x="92.3599%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::~RocksDBOptionsParser (76 samples, 1.66%)</title><rect x="90.8239%" y="389" width="1.6565%" height="15" fill="rgb(219,96,14)" fg:x="4167" fg:w="76"/><text x="91.0739%" y="399.50"></text></g><g><title>rusk-wallet`std::__1::vector&lt;std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (27 samples, 0.59%)</title><rect x="91.8919%" y="373" width="0.5885%" height="15" fill="rgb(249,106,1)" fg:x="4216" fg:w="27"/><text x="92.1419%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.17%)</title><rect x="92.3060%" y="357" width="0.1744%" height="15" fill="rgb(249,155,20)" fg:x="4235" fg:w="8"/><text x="92.5560%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3,420 samples, 74.54%)</title><rect x="18.0471%" y="405" width="74.5423%" height="15" fill="rgb(244,168,9)" fg:x="828" fg:w="3420"/><text x="18.2971%" y="415.50">rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions co..</text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="92.4804%" y="389" width="0.1090%" height="15" fill="rgb(216,23,50)" fg:x="4243" fg:w="5"/><text x="92.7304%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Append (1 samples, 0.02%)</title><rect x="92.5894%" y="405" width="0.0218%" height="15" fill="rgb(224,219,20)" fg:x="4248" fg:w="1"/><text x="92.8394%" y="415.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.02%)</title><rect x="92.5894%" y="389" width="0.0218%" height="15" fill="rgb(222,156,15)" fg:x="4248" fg:w="1"/><text x="92.8394%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Flush (13 samples, 0.28%)</title><rect x="92.6112%" y="389" width="0.2833%" height="15" fill="rgb(231,97,17)" fg:x="4249" fg:w="13"/><text x="92.8612%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::WriteBuffered (13 samples, 0.28%)</title><rect x="92.6112%" y="373" width="0.2833%" height="15" fill="rgb(218,70,48)" fg:x="4249" fg:w="13"/><text x="92.8612%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`write (13 samples, 0.28%)</title><rect x="92.6112%" y="357" width="0.2833%" height="15" fill="rgb(212,196,52)" fg:x="4249" fg:w="13"/><text x="92.8612%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3,938 samples, 85.83%)</title><rect x="7.1055%" y="437" width="85.8326%" height="15" fill="rgb(243,203,18)" fg:x="326" fg:w="3938"/><text x="7.3555%" y="447.50">rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;..</text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3,935 samples, 85.77%)</title><rect x="7.1709%" y="421" width="85.7672%" height="15" fill="rgb(252,125,41)" fg:x="329" fg:w="3935"/><text x="7.4209%" y="431.50">rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;ch..</text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Sync (15 samples, 0.33%)</title><rect x="92.6112%" y="405" width="0.3269%" height="15" fill="rgb(223,180,33)" fg:x="4249" fg:w="15"/><text x="92.8612%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::SyncInternal (2 samples, 0.04%)</title><rect x="92.8945%" y="389" width="0.0436%" height="15" fill="rgb(254,159,46)" fg:x="4262" fg:w="2"/><text x="93.1445%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`fsync (2 samples, 0.04%)</title><rect x="92.8945%" y="373" width="0.0436%" height="15" fill="rgb(254,38,10)" fg:x="4262" fg:w="2"/><text x="93.1445%" y="383.50"></text></g><g><title>rusk-wallet`void std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;::construct[abi:v15006]&lt;rocksdb::ColumnFamilyOptions, rocksdb::ColumnFamilyOptions&gt; (1 samples, 0.02%)</title><rect x="92.9381%" y="437" width="0.0218%" height="15" fill="rgb(208,217,32)" fg:x="4264" fg:w="1"/><text x="93.1881%" y="447.50"></text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::insert (3,998 samples, 87.14%)</title><rect x="5.8413%" y="517" width="87.1404%" height="15" fill="rgb(221,120,13)" fg:x="268" fg:w="3998"/><text x="6.0913%" y="527.50">rusk-wallet`dusk_wallet::cache::Cache::insert</text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;rocksdb::db::SingleThreaded,I&gt;::create_cf (3,986 samples, 86.88%)</title><rect x="6.1029%" y="501" width="86.8788%" height="15" fill="rgb(246,54,52)" fg:x="280" fg:w="3986"/><text x="6.3529%" y="511.50">rusk-wallet`rocksdb::db::DBCommon&lt;rocksdb::db::SingleThreaded,I&gt;::create_cf</text></g><g><title>rusk-wallet`rocksdb_create_column_family (3,986 samples, 86.88%)</title><rect x="6.1029%" y="485" width="86.8788%" height="15" fill="rgb(242,34,25)" fg:x="280" fg:w="3986"/><text x="6.3529%" y="495.50">rusk-wallet`rocksdb_create_column_family</text></g><g><title>rusk-wallet`rocksdb::DBImpl::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3,986 samples, 86.88%)</title><rect x="6.1029%" y="469" width="86.8788%" height="15" fill="rgb(247,209,9)" fg:x="280" fg:w="3986"/><text x="6.3529%" y="479.50">rusk-wallet`rocksdb::DBImpl::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, st..</text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteOptionsFile (3,975 samples, 86.64%)</title><rect x="6.3426%" y="453" width="86.6391%" height="15" fill="rgb(228,71,26)" fg:x="291" fg:w="3975"/><text x="6.5926%" y="463.50">rusk-wallet`rocksdb::DBImpl::WriteOptionsFile</text></g><g><title>rusk-wallet`void std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;::__push_back_slow_path&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="92.9599%" y="437" width="0.0218%" height="15" fill="rgb(222,145,49)" fg:x="4265" fg:w="1"/><text x="93.2099%" y="447.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="92.9599%" y="421" width="0.0218%" height="15" fill="rgb(218,121,17)" fg:x="4265" fg:w="1"/><text x="93.2099%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="92.9599%" y="405" width="0.0218%" height="15" fill="rgb(244,50,7)" fg:x="4265" fg:w="1"/><text x="93.2099%" y="415.50"></text></g><g><title>rusk-wallet`dusk_wallet_core::derive_ssk (1 samples, 0.02%)</title><rect x="92.9817%" y="517" width="0.0218%" height="15" fill="rgb(246,229,37)" fg:x="4266" fg:w="1"/><text x="93.2317%" y="527.50"></text></g><g><title>rusk-wallet`sha2::sha256::soft::compress (1 samples, 0.02%)</title><rect x="92.9817%" y="501" width="0.0218%" height="15" fill="rgb(225,18,5)" fg:x="4266" fg:w="1"/><text x="93.2317%" y="511.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (2 samples, 0.04%)</title><rect x="93.0035%" y="469" width="0.0436%" height="15" fill="rgb(213,204,8)" fg:x="4267" fg:w="2"/><text x="93.2535%" y="479.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (3 samples, 0.07%)</title><rect x="93.0035%" y="501" width="0.0654%" height="15" fill="rgb(238,103,6)" fg:x="4267" fg:w="3"/><text x="93.2535%" y="511.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (3 samples, 0.07%)</title><rect x="93.0035%" y="485" width="0.0654%" height="15" fill="rgb(222,25,35)" fg:x="4267" fg:w="3"/><text x="93.2535%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="93.0471%" y="469" width="0.0218%" height="15" fill="rgb(213,203,35)" fg:x="4269" fg:w="1"/><text x="93.2971%" y="479.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::to_hash_inputs (1 samples, 0.02%)</title><rect x="93.0689%" y="501" width="0.0218%" height="15" fill="rgb(221,79,53)" fg:x="4270" fg:w="1"/><text x="93.3189%" y="511.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.02%)</title><rect x="93.0689%" y="485" width="0.0218%" height="15" fill="rgb(243,200,35)" fg:x="4270" fg:w="1"/><text x="93.3189%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (2 samples, 0.04%)</title><rect x="93.0907%" y="453" width="0.0436%" height="15" fill="rgb(248,60,25)" fg:x="4271" fg:w="2"/><text x="93.3407%" y="463.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (4 samples, 0.09%)</title><rect x="93.0907%" y="485" width="0.0872%" height="15" fill="rgb(227,53,46)" fg:x="4271" fg:w="4"/><text x="93.3407%" y="495.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (4 samples, 0.09%)</title><rect x="93.0907%" y="469" width="0.0872%" height="15" fill="rgb(216,120,32)" fg:x="4271" fg:w="4"/><text x="93.3407%" y="479.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (2 samples, 0.04%)</title><rect x="93.1343%" y="453" width="0.0436%" height="15" fill="rgb(220,134,1)" fg:x="4273" fg:w="2"/><text x="93.3843%" y="463.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::to_hash_inputs (1 samples, 0.02%)</title><rect x="93.1779%" y="485" width="0.0218%" height="15" fill="rgb(237,168,5)" fg:x="4275" fg:w="1"/><text x="93.4279%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="93.1779%" y="469" width="0.0218%" height="15" fill="rgb(231,100,33)" fg:x="4275" fg:w="1"/><text x="93.4279%" y="479.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,258 samples, 92.81%)</title><rect x="0.4141%" y="581" width="92.8073%" height="15" fill="rgb(236,177,47)" fg:x="19" fg:w="4258"/><text x="0.6641%" y="591.50">rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::get_balance (4,258 samples, 92.81%)</title><rect x="0.4141%" y="565" width="92.8073%" height="15" fill="rgb(235,7,49)" fg:x="19" fg:w="4258"/><text x="0.6641%" y="575.50">rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::get_balance</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::unspent_notes (4,258 samples, 92.81%)</title><rect x="0.4141%" y="549" width="92.8073%" height="15" fill="rgb(232,119,22)" fg:x="19" fg:w="4258"/><text x="0.6641%" y="559.50">rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::unspent_notes</text></g><g><title>rusk-wallet`&lt;dusk_wallet::clients::StateStore as dusk_wallet_core::StateClient&gt;::fetch_notes (4,246 samples, 92.55%)</title><rect x="0.6757%" y="533" width="92.5458%" height="15" fill="rgb(254,73,53)" fg:x="31" fg:w="4246"/><text x="0.9257%" y="543.50">rusk-wallet`&lt;dusk_wallet::clients::StateStore as dusk_wallet_core::StateClient&gt;::fetch_notes</text></g><g><title>rusk-wallet`phoenix_core::note::Note::gen_nullifier (10 samples, 0.22%)</title><rect x="93.0035%" y="517" width="0.2180%" height="15" fill="rgb(251,35,20)" fg:x="4267" fg:w="10"/><text x="93.2535%" y="527.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::sk_r (6 samples, 0.13%)</title><rect x="93.0907%" y="501" width="0.1308%" height="15" fill="rgb(241,119,20)" fg:x="4271" fg:w="6"/><text x="93.3407%" y="511.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (1 samples, 0.02%)</title><rect x="93.1997%" y="485" width="0.0218%" height="15" fill="rgb(207,102,14)" fg:x="4276" fg:w="1"/><text x="93.4497%" y="495.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (1 samples, 0.02%)</title><rect x="93.1997%" y="469" width="0.0218%" height="15" fill="rgb(248,201,50)" fg:x="4276" fg:w="1"/><text x="93.4497%" y="479.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (1 samples, 0.02%)</title><rect x="93.1997%" y="453" width="0.0218%" height="15" fill="rgb(222,185,44)" fg:x="4276" fg:w="1"/><text x="93.4497%" y="463.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (1 samples, 0.02%)</title><rect x="93.1997%" y="437" width="0.0218%" height="15" fill="rgb(218,107,18)" fg:x="4276" fg:w="1"/><text x="93.4497%" y="447.50"></text></g><g><title>rusk-wallet`&lt;std::sync::mpsc::TryRecvError as core::convert::From&lt;std::sync::mpsc::RecvError&gt;&gt;::from (1 samples, 0.02%)</title><rect x="93.2214%" y="581" width="0.0218%" height="15" fill="rgb(237,177,39)" fg:x="4277" fg:w="1"/><text x="93.4714%" y="591.50"></text></g><g><title>rusk-wallet`&lt;std::sys::unix::os_str::Slice as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="93.2214%" y="565" width="0.0218%" height="15" fill="rgb(246,69,6)" fg:x="4277" fg:w="1"/><text x="93.4714%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="93.2214%" y="549" width="0.0218%" height="15" fill="rgb(234,208,37)" fg:x="4277" fg:w="1"/><text x="93.4714%" y="559.50"></text></g><g><title>rusk-wallet`dusk_wallet::wallet::address::Address::preview (1 samples, 0.02%)</title><rect x="93.2432%" y="581" width="0.0218%" height="15" fill="rgb(225,4,6)" fg:x="4278" fg:w="1"/><text x="93.4932%" y="591.50"></text></g><g><title>rusk-wallet`&lt;dusk_pki::keys::spend::public::PublicSpendKey as dusk_bytes::serialize::Serializable&lt;64_usize&gt;&gt;::to_bytes (1 samples, 0.02%)</title><rect x="93.2432%" y="565" width="0.0218%" height="15" fill="rgb(233,45,0)" fg:x="4278" fg:w="1"/><text x="93.4932%" y="575.50"></text></g><g><title>rusk-wallet`&lt;dusk_jubjub::JubJubAffine as core::convert::From&lt;dusk_jubjub::JubJubExtended&gt;&gt;::from (1 samples, 0.02%)</title><rect x="93.2432%" y="549" width="0.0218%" height="15" fill="rgb(226,136,5)" fg:x="4278" fg:w="1"/><text x="93.4932%" y="559.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.02%)</title><rect x="93.2432%" y="533" width="0.0218%" height="15" fill="rgb(211,91,47)" fg:x="4278" fg:w="1"/><text x="93.4932%" y="543.50"></text></g><g><title>rusk-wallet`requestty::prompt_one (2 samples, 0.04%)</title><rect x="93.2650%" y="581" width="0.0436%" height="15" fill="rgb(242,88,51)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="591.50"></text></g><g><title>rusk-wallet`requestty::question::Question::ask (2 samples, 0.04%)</title><rect x="93.2650%" y="565" width="0.0436%" height="15" fill="rgb(230,91,28)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="575.50"></text></g><g><title>rusk-wallet`requestty::question::select::Select::ask (2 samples, 0.04%)</title><rect x="93.2650%" y="549" width="0.0436%" height="15" fill="rgb(254,186,29)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="559.50"></text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::run (2 samples, 0.04%)</title><rect x="93.2650%" y="533" width="0.0436%" height="15" fill="rgb(238,6,4)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="543.50"></text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::render (2 samples, 0.04%)</title><rect x="93.2650%" y="517" width="0.0436%" height="15" fill="rgb(221,151,16)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="527.50"></text></g><g><title>rusk-wallet`requestty_ui::input::Input&lt;P,B&gt;::update_size (2 samples, 0.04%)</title><rect x="93.2650%" y="501" width="0.0436%" height="15" fill="rgb(251,143,52)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="511.50"></text></g><g><title>rusk-wallet`crossterm::terminal::sys::unix::size (2 samples, 0.04%)</title><rect x="93.2650%" y="485" width="0.0436%" height="15" fill="rgb(206,90,15)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="495.50"></text></g><g><title>rusk-wallet`std::fs::OpenOptions::_open (2 samples, 0.04%)</title><rect x="93.2650%" y="469" width="0.0436%" height="15" fill="rgb(218,35,8)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="479.50"></text></g><g><title>rusk-wallet`std::sys::unix::fs::File::open_c (2 samples, 0.04%)</title><rect x="93.2650%" y="453" width="0.0436%" height="15" fill="rgb(239,215,6)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 0.04%)</title><rect x="93.2650%" y="437" width="0.0436%" height="15" fill="rgb(245,116,39)" fg:x="4279" fg:w="2"/><text x="93.5150%" y="447.50"></text></g><g><title>rusk-wallet`rusk_wallet::menu::Menu&lt;K&gt;::answer (1 samples, 0.02%)</title><rect x="93.3086%" y="581" width="0.0218%" height="15" fill="rgb(242,65,28)" fg:x="4281" fg:w="1"/><text x="93.5586%" y="591.50"></text></g><g><title>rusk-wallet`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.02%)</title><rect x="93.3086%" y="565" width="0.0218%" height="15" fill="rgb(252,132,53)" fg:x="4281" fg:w="1"/><text x="93.5586%" y="575.50"></text></g><g><title>dyld`start (4,283 samples, 93.35%)</title><rect x="0.0000%" y="789" width="93.3522%" height="15" fill="rgb(224,159,50)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="799.50">dyld`start</text></g><g><title>rusk-wallet`main (4,283 samples, 93.35%)</title><rect x="0.0000%" y="773" width="93.3522%" height="15" fill="rgb(224,93,4)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="783.50">rusk-wallet`main</text></g><g><title>rusk-wallet`std::rt::lang_start_internal (4,283 samples, 93.35%)</title><rect x="0.0000%" y="757" width="93.3522%" height="15" fill="rgb(208,81,34)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="767.50">rusk-wallet`std::rt::lang_start_internal</text></g><g><title>rusk-wallet`std::rt::lang_start::_{{closure}} (4,283 samples, 93.35%)</title><rect x="0.0000%" y="741" width="93.3522%" height="15" fill="rgb(233,92,54)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="751.50">rusk-wallet`std::rt::lang_start::_{{closure}}</text></g><g><title>rusk-wallet`std::sys_common::backtrace::__rust_begin_short_backtrace (4,283 samples, 93.35%)</title><rect x="0.0000%" y="725" width="93.3522%" height="15" fill="rgb(237,21,14)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="735.50">rusk-wallet`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rusk-wallet`rusk_wallet::main (4,283 samples, 93.35%)</title><rect x="0.0000%" y="709" width="93.3522%" height="15" fill="rgb(249,128,51)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="719.50">rusk-wallet`rusk_wallet::main</text></g><g><title>rusk-wallet`tokio::runtime::Runtime::block_on (4,283 samples, 93.35%)</title><rect x="0.0000%" y="693" width="93.3522%" height="15" fill="rgb(223,129,24)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="703.50">rusk-wallet`tokio::runtime::Runtime::block_on</text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (4,283 samples, 93.35%)</title><rect x="0.0000%" y="677" width="93.3522%" height="15" fill="rgb(231,168,25)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="687.50">rusk-wallet`tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>rusk-wallet`tokio::park::thread::CachedParkThread::block_on (4,283 samples, 93.35%)</title><rect x="0.0000%" y="661" width="93.3522%" height="15" fill="rgb(224,39,20)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="671.50">rusk-wallet`tokio::park::thread::CachedParkThread::block_on</text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (4,283 samples, 93.35%)</title><rect x="0.0000%" y="645" width="93.3522%" height="15" fill="rgb(225,152,53)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="655.50">rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,283 samples, 93.35%)</title><rect x="0.0000%" y="629" width="93.3522%" height="15" fill="rgb(252,17,24)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="639.50">rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>rusk-wallet`rusk_wallet::exec::_{{closure}} (4,283 samples, 93.35%)</title><rect x="0.0000%" y="613" width="93.3522%" height="15" fill="rgb(250,114,30)" fg:x="0" fg:w="4283"/><text x="0.2500%" y="623.50">rusk-wallet`rusk_wallet::exec::_{{closure}}</text></g><g><title>rusk-wallet`rusk_wallet::interactive::run_loop::_{{closure}} (4,264 samples, 92.94%)</title><rect x="0.4141%" y="597" width="92.9381%" height="15" fill="rgb(229,5,4)" fg:x="19" fg:w="4264"/><text x="0.6641%" y="607.50">rusk-wallet`rusk_wallet::interactive::run_loop::_{{closure}}</text></g><g><title>rusk-wallet`std::io::stdio::_print (1 samples, 0.02%)</title><rect x="93.3304%" y="581" width="0.0218%" height="15" fill="rgb(225,176,49)" fg:x="4282" fg:w="1"/><text x="93.5804%" y="591.50"></text></g><g><title>rusk-wallet`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.02%)</title><rect x="93.3304%" y="565" width="0.0218%" height="15" fill="rgb(224,221,49)" fg:x="4282" fg:w="1"/><text x="93.5804%" y="575.50"></text></g><g><title>rusk-wallet`core::fmt::write (1 samples, 0.02%)</title><rect x="93.3304%" y="549" width="0.0218%" height="15" fill="rgb(253,169,27)" fg:x="4282" fg:w="1"/><text x="93.5804%" y="559.50"></text></g><g><title>rusk-wallet`rusk_abi::dusk::from_dusk (1 samples, 0.02%)</title><rect x="93.3304%" y="533" width="0.0218%" height="15" fill="rgb(211,206,16)" fg:x="4282" fg:w="1"/><text x="93.5804%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.04%)</title><rect x="93.3522%" y="789" width="0.0436%" height="15" fill="rgb(244,87,35)" fg:x="4283" fg:w="2"/><text x="93.6022%" y="799.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_exit (1 samples, 0.02%)</title><rect x="93.3958%" y="757" width="0.0218%" height="15" fill="rgb(246,28,10)" fg:x="4285" fg:w="1"/><text x="93.6458%" y="767.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_tsd_cleanup (1 samples, 0.02%)</title><rect x="93.3958%" y="741" width="0.0218%" height="15" fill="rgb(229,12,44)" fg:x="4285" fg:w="1"/><text x="93.6458%" y="751.50"></text></g><g><title>Network`nw_endpoint_create_address (1 samples, 0.02%)</title><rect x="93.4176%" y="549" width="0.0218%" height="15" fill="rgb(210,145,37)" fg:x="4286" fg:w="1"/><text x="93.6676%" y="559.50"></text></g><g><title>libsystem_info.dylib`_gai_nat64_second_pass (2 samples, 0.04%)</title><rect x="93.4176%" y="581" width="0.0436%" height="15" fill="rgb(227,112,52)" fg:x="4286" fg:w="2"/><text x="93.6676%" y="591.50"></text></g><g><title>Network`nw_nat64_v4_address_requires_synthesis (2 samples, 0.04%)</title><rect x="93.4176%" y="565" width="0.0436%" height="15" fill="rgb(238,155,34)" fg:x="4286" fg:w="2"/><text x="93.6676%" y="575.50"></text></g><g><title>Network`nw_path_create_evaluator_for_endpoint (1 samples, 0.02%)</title><rect x="93.4394%" y="549" width="0.0218%" height="15" fill="rgb(239,226,36)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="559.50"></text></g><g><title>Network`nw_path_create_evaluator_for_endpoint_no_evaluate (1 samples, 0.02%)</title><rect x="93.4394%" y="533" width="0.0218%" height="15" fill="rgb(230,16,23)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="543.50"></text></g><g><title>Network`-[NWConcrete_nw_parameters initWithStack:] (1 samples, 0.02%)</title><rect x="93.4394%" y="517" width="0.0218%" height="15" fill="rgb(236,171,36)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="527.50"></text></g><g><title>Network`networkd_settings_init (1 samples, 0.02%)</title><rect x="93.4394%" y="501" width="0.0218%" height="15" fill="rgb(221,22,14)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="511.50"></text></g><g><title>Network`networkd_settings_update_from_token(int) (1 samples, 0.02%)</title><rect x="93.4394%" y="485" width="0.0218%" height="15" fill="rgb(242,43,11)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="495.50"></text></g><g><title>Network`networkd_settings_read_from_file() (1 samples, 0.02%)</title><rect x="93.4394%" y="469" width="0.0218%" height="15" fill="rgb(232,69,23)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="479.50"></text></g><g><title>libxpc.dylib`xpc_create_from_plist (1 samples, 0.02%)</title><rect x="93.4394%" y="453" width="0.0218%" height="15" fill="rgb(216,180,54)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="463.50"></text></g><g><title>libxpc.dylib`_xpc_plist_parse_xml (1 samples, 0.02%)</title><rect x="93.4394%" y="437" width="0.0218%" height="15" fill="rgb(216,5,24)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="447.50"></text></g><g><title>libxpc.dylib`_xpc_xml_parser_stack_finish_leaf (1 samples, 0.02%)</title><rect x="93.4394%" y="421" width="0.0218%" height="15" fill="rgb(225,89,9)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="431.50"></text></g><g><title>libxpc.dylib`_xpc_dictionary_insert (1 samples, 0.02%)</title><rect x="93.4394%" y="405" width="0.0218%" height="15" fill="rgb(243,75,33)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="93.4394%" y="389" width="0.0218%" height="15" fill="rgb(247,141,45)" fg:x="4287" fg:w="1"/><text x="93.6894%" y="399.50"></text></g><g><title>rusk-wallet`&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3 samples, 0.07%)</title><rect x="93.4176%" y="677" width="0.0654%" height="15" fill="rgb(232,177,36)" fg:x="4286" fg:w="3"/><text x="93.6676%" y="687.50"></text></g><g><title>rusk-wallet`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="93.4176%" y="661" width="0.0654%" height="15" fill="rgb(219,125,36)" fg:x="4286" fg:w="3"/><text x="93.6676%" y="671.50"></text></g><g><title>rusk-wallet`&lt;(&amp;str,u16) as std::net::addr::ToSocketAddrs&gt;::to_socket_addrs (3 samples, 0.07%)</title><rect x="93.4176%" y="645" width="0.0654%" height="15" fill="rgb(227,94,9)" fg:x="4286" fg:w="3"/><text x="93.6676%" y="655.50"></text></g><g><title>rusk-wallet`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (3 samples, 0.07%)</title><rect x="93.4176%" y="629" width="0.0654%" height="15" fill="rgb(240,34,52)" fg:x="4286" fg:w="3"/><text x="93.6676%" y="639.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (3 samples, 0.07%)</title><rect x="93.4176%" y="613" width="0.0654%" height="15" fill="rgb(216,45,12)" fg:x="4286" fg:w="3"/><text x="93.6676%" y="623.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (3 samples, 0.07%)</title><rect x="93.4176%" y="597" width="0.0654%" height="15" fill="rgb(246,21,19)" fg:x="4286" fg:w="3"/><text x="93.6676%" y="607.50"></text></g><g><title>libsystem_info.dylib`search_addrinfo (1 samples, 0.02%)</title><rect x="93.4612%" y="581" width="0.0218%" height="15" fill="rgb(213,98,42)" fg:x="4288" fg:w="1"/><text x="93.7112%" y="591.50"></text></g><g><title>libsystem_info.dylib`mdns_addrinfo (1 samples, 0.02%)</title><rect x="93.4612%" y="565" width="0.0218%" height="15" fill="rgb(250,136,47)" fg:x="4288" fg:w="1"/><text x="93.7112%" y="575.50"></text></g><g><title>libsystem_info.dylib`_mdns_search_ex (1 samples, 0.02%)</title><rect x="93.4612%" y="549" width="0.0218%" height="15" fill="rgb(251,124,27)" fg:x="4288" fg:w="1"/><text x="93.7112%" y="559.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceCreateConnection (1 samples, 0.02%)</title><rect x="93.4612%" y="533" width="0.0218%" height="15" fill="rgb(229,180,14)" fg:x="4288" fg:w="1"/><text x="93.7112%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__connect_nocancel (1 samples, 0.02%)</title><rect x="93.4612%" y="517" width="0.0218%" height="15" fill="rgb(245,216,25)" fg:x="4288" fg:w="1"/><text x="93.7112%" y="527.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (1 samples, 0.02%)</title><rect x="93.4830%" y="613" width="0.0218%" height="15" fill="rgb(251,43,5)" fg:x="4289" fg:w="1"/><text x="93.7330%" y="623.50"></text></g><g><title>rusk-wallet`&lt;tokio::runtime::scheduler::multi_thread::park::Parker as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="93.4830%" y="597" width="0.0218%" height="15" fill="rgb(250,128,24)" fg:x="4289" fg:w="1"/><text x="93.7330%" y="607.50"></text></g><g><title>rusk-wallet`&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (1 samples, 0.02%)</title><rect x="93.4830%" y="581" width="0.0218%" height="15" fill="rgb(217,117,27)" fg:x="4289" fg:w="1"/><text x="93.7330%" y="591.50"></text></g><g><title>rusk-wallet`tokio::time::driver::Driver&lt;P&gt;::park_internal (1 samples, 0.02%)</title><rect x="93.4830%" y="565" width="0.0218%" height="15" fill="rgb(245,147,4)" fg:x="4289" fg:w="1"/><text x="93.7330%" y="575.50"></text></g><g><title>rusk-wallet`tokio::runtime::io::Driver::turn (1 samples, 0.02%)</title><rect x="93.4830%" y="549" width="0.0218%" height="15" fill="rgb(242,201,35)" fg:x="4289" fg:w="1"/><text x="93.7330%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1 samples, 0.02%)</title><rect x="93.4830%" y="533" width="0.0218%" height="15" fill="rgb(218,181,1)" fg:x="4289" fg:w="1"/><text x="93.7330%" y="543.50"></text></g><g><title>rusk-wallet`std::sys::unix::thread::Thread::new::thread_start (6 samples, 0.13%)</title><rect x="93.4176%" y="757" width="0.1308%" height="15" fill="rgb(222,6,29)" fg:x="4286" fg:w="6"/><text x="93.6676%" y="767.50"></text></g><g><title>rusk-wallet`core::ops::function::FnOnce::call_once{{vtable.shim}} (6 samples, 0.13%)</title><rect x="93.4176%" y="741" width="0.1308%" height="15" fill="rgb(208,186,3)" fg:x="4286" fg:w="6"/><text x="93.6676%" y="751.50"></text></g><g><title>rusk-wallet`std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 0.13%)</title><rect x="93.4176%" y="725" width="0.1308%" height="15" fill="rgb(216,36,26)" fg:x="4286" fg:w="6"/><text x="93.6676%" y="735.50"></text></g><g><title>rusk-wallet`tokio::runtime::blocking::pool::Inner::run (6 samples, 0.13%)</title><rect x="93.4176%" y="709" width="0.1308%" height="15" fill="rgb(248,201,23)" fg:x="4286" fg:w="6"/><text x="93.6676%" y="719.50"></text></g><g><title>rusk-wallet`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (6 samples, 0.13%)</title><rect x="93.4176%" y="693" width="0.1308%" height="15" fill="rgb(251,170,31)" fg:x="4286" fg:w="6"/><text x="93.6676%" y="703.50"></text></g><g><title>rusk-wallet`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (3 samples, 0.07%)</title><rect x="93.4830%" y="677" width="0.0654%" height="15" fill="rgb(207,110,25)" fg:x="4289" fg:w="3"/><text x="93.7330%" y="687.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::run (3 samples, 0.07%)</title><rect x="93.4830%" y="661" width="0.0654%" height="15" fill="rgb(250,54,15)" fg:x="4289" fg:w="3"/><text x="93.7330%" y="671.50"></text></g><g><title>rusk-wallet`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (3 samples, 0.07%)</title><rect x="93.4830%" y="645" width="0.0654%" height="15" fill="rgb(227,68,33)" fg:x="4289" fg:w="3"/><text x="93.7330%" y="655.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::Context::run (3 samples, 0.07%)</title><rect x="93.4830%" y="629" width="0.0654%" height="15" fill="rgb(238,34,41)" fg:x="4289" fg:w="3"/><text x="93.7330%" y="639.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (2 samples, 0.04%)</title><rect x="93.5048%" y="613" width="0.0436%" height="15" fill="rgb(220,11,15)" fg:x="4290" fg:w="2"/><text x="93.7548%" y="623.50"></text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.04%)</title><rect x="93.5048%" y="597" width="0.0436%" height="15" fill="rgb(246,111,35)" fg:x="4290" fg:w="2"/><text x="93.7548%" y="607.50"></text></g><g><title>rusk-wallet`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2 samples, 0.04%)</title><rect x="93.5048%" y="581" width="0.0436%" height="15" fill="rgb(209,88,53)" fg:x="4290" fg:w="2"/><text x="93.7548%" y="591.50"></text></g><g><title>rusk-wallet`tokio::runtime::task::core::CoreStage&lt;T&gt;::poll (2 samples, 0.04%)</title><rect x="93.5048%" y="565" width="0.0436%" height="15" fill="rgb(231,185,47)" fg:x="4290" fg:w="2"/><text x="93.7548%" y="575.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.04%)</title><rect x="93.5048%" y="549" width="0.0436%" height="15" fill="rgb(233,154,1)" fg:x="4290" fg:w="2"/><text x="93.7548%" y="559.50"></text></g><g><title>rusk-wallet`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="93.5266%" y="533" width="0.0218%" height="15" fill="rgb(225,15,46)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="543.50"></text></g><g><title>rusk-wallet`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="93.5266%" y="517" width="0.0218%" height="15" fill="rgb(211,135,41)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="527.50"></text></g><g><title>rusk-wallet`&lt;h2::client::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (1 samples, 0.02%)</title><rect x="93.5266%" y="501" width="0.0218%" height="15" fill="rgb(208,54,0)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="511.50"></text></g><g><title>rusk-wallet`h2::proto::connection::Connection&lt;T,P,B&gt;::poll (1 samples, 0.02%)</title><rect x="93.5266%" y="485" width="0.0218%" height="15" fill="rgb(244,136,14)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="495.50"></text></g><g><title>rusk-wallet`h2::proto::connection::DynConnection&lt;B&gt;::recv_frame (1 samples, 0.02%)</title><rect x="93.5266%" y="469" width="0.0218%" height="15" fill="rgb(241,56,14)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="479.50"></text></g><g><title>rusk-wallet`h2::proto::streams::streams::DynStreams&lt;B&gt;::recv_headers (1 samples, 0.02%)</title><rect x="93.5266%" y="453" width="0.0218%" height="15" fill="rgb(205,80,24)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="463.50"></text></g><g><title>rusk-wallet`h2::proto::streams::store::Store::find_entry (1 samples, 0.02%)</title><rect x="93.5266%" y="437" width="0.0218%" height="15" fill="rgb(220,57,4)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="447.50"></text></g><g><title>rusk-wallet`hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.02%)</title><rect x="93.5266%" y="421" width="0.0218%" height="15" fill="rgb(226,193,50)" fg:x="4291" fg:w="1"/><text x="93.7766%" y="431.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (8 samples, 0.17%)</title><rect x="93.3958%" y="789" width="0.1744%" height="15" fill="rgb(231,168,22)" fg:x="4285" fg:w="8"/><text x="93.6458%" y="799.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_start (8 samples, 0.17%)</title><rect x="93.3958%" y="773" width="0.1744%" height="15" fill="rgb(254,215,14)" fg:x="4285" fg:w="8"/><text x="93.6458%" y="783.50"></text></g><g><title>rusk-wallet`void* std::__1::__thread_proxy[abi:v15006]&lt;std::__1::tuple&lt;std::__1::unique_ptr&lt;std::__1::__thread_struct, std::__1::default_delete&lt;std::__1::__thread_struct&gt;&gt;, void (rocksdb::Timer::*)(), rocksdb::Timer*&gt;&gt; (1 samples, 0.02%)</title><rect x="93.5484%" y="757" width="0.0218%" height="15" fill="rgb(211,115,16)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="767.50"></text></g><g><title>rusk-wallet`rocksdb::Timer::Run (1 samples, 0.02%)</title><rect x="93.5484%" y="741" width="0.0218%" height="15" fill="rgb(236,210,16)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="751.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::DumpStats (1 samples, 0.02%)</title><rect x="93.5484%" y="725" width="0.0218%" height="15" fill="rgb(221,94,12)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="735.50"></text></g><g><title>rusk-wallet`rocksdb::InternalStats::HandleCFStatsPeriodic(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.5484%" y="709" width="0.0218%" height="15" fill="rgb(235,218,49)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="719.50"></text></g><g><title>rusk-wallet`rocksdb::InternalStats::DumpCFStatsNoFileHistogram(bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.5484%" y="693" width="0.0218%" height="15" fill="rgb(217,114,14)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="703.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PrintLevelStats(char*, unsigned long, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::map&lt;rocksdb::LevelStatType, double, std::__1::less&lt;rocksdb::LevelStatType&gt;, std::__1::allocator&lt;std::__1::pair (1 samples, 0.02%)</title><rect x="93.5484%" y="677" width="0.0218%" height="15" fill="rgb(216,145,22)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="687.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.02%)</title><rect x="93.5484%" y="661" width="0.0218%" height="15" fill="rgb(217,112,39)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="671.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.02%)</title><rect x="93.5484%" y="645" width="0.0218%" height="15" fill="rgb(225,85,32)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="655.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.02%)</title><rect x="93.5484%" y="629" width="0.0218%" height="15" fill="rgb(245,209,47)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="639.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="93.5484%" y="613" width="0.0218%" height="15" fill="rgb(218,220,15)" fg:x="4292" fg:w="1"/><text x="93.7984%" y="623.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="93.5920%" y="661" width="0.0218%" height="15" fill="rgb(222,202,31)" fg:x="4294" fg:w="1"/><text x="93.8420%" y="671.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="93.6138%" y="629" width="0.0218%" height="15" fill="rgb(243,203,4)" fg:x="4295" fg:w="1"/><text x="93.8638%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="93.6356%" y="629" width="0.0218%" height="15" fill="rgb(237,92,17)" fg:x="4296" fg:w="1"/><text x="93.8856%" y="639.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (2 samples, 0.04%)</title><rect x="93.6574%" y="629" width="0.0436%" height="15" fill="rgb(231,119,7)" fg:x="4297" fg:w="2"/><text x="93.9074%" y="639.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7010%" y="533" width="0.0218%" height="15" fill="rgb(237,82,41)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7010%" y="517" width="0.0218%" height="15" fill="rgb(226,81,48)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="93.7010%" y="501" width="0.0218%" height="15" fill="rgb(234,70,51)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7010%" y="485" width="0.0218%" height="15" fill="rgb(251,86,4)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="93.7010%" y="469" width="0.0218%" height="15" fill="rgb(244,144,28)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7010%" y="453" width="0.0218%" height="15" fill="rgb(232,161,39)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7010%" y="437" width="0.0218%" height="15" fill="rgb(247,34,51)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7010%" y="421" width="0.0218%" height="15" fill="rgb(225,132,2)" fg:x="4299" fg:w="1"/><text x="93.9510%" y="431.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="93.7228%" y="517" width="0.0218%" height="15" fill="rgb(209,159,44)" fg:x="4300" fg:w="1"/><text x="93.9728%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="93.7446%" y="517" width="0.0218%" height="15" fill="rgb(251,214,1)" fg:x="4301" fg:w="1"/><text x="93.9946%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="93.6138%" y="645" width="0.1744%" height="15" fill="rgb(247,84,47)" fg:x="4295" fg:w="8"/><text x="93.8638%" y="655.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="93.7010%" y="629" width="0.0872%" height="15" fill="rgb(240,111,43)" fg:x="4299" fg:w="4"/><text x="93.9510%" y="639.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="93.7010%" y="613" width="0.0872%" height="15" fill="rgb(215,214,35)" fg:x="4299" fg:w="4"/><text x="93.9510%" y="623.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (4 samples, 0.09%)</title><rect x="93.7010%" y="597" width="0.0872%" height="15" fill="rgb(248,207,23)" fg:x="4299" fg:w="4"/><text x="93.9510%" y="607.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (4 samples, 0.09%)</title><rect x="93.7010%" y="581" width="0.0872%" height="15" fill="rgb(214,186,4)" fg:x="4299" fg:w="4"/><text x="93.9510%" y="591.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="93.7010%" y="565" width="0.0872%" height="15" fill="rgb(220,133,22)" fg:x="4299" fg:w="4"/><text x="93.9510%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="93.7010%" y="549" width="0.0872%" height="15" fill="rgb(239,134,19)" fg:x="4299" fg:w="4"/><text x="93.9510%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="93.7228%" y="533" width="0.0654%" height="15" fill="rgb(250,140,9)" fg:x="4300" fg:w="3"/><text x="93.9728%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7663%" y="517" width="0.0218%" height="15" fill="rgb(225,59,14)" fg:x="4302" fg:w="1"/><text x="94.0163%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="93.7663%" y="501" width="0.0218%" height="15" fill="rgb(214,152,51)" fg:x="4302" fg:w="1"/><text x="94.0163%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="93.7663%" y="485" width="0.0218%" height="15" fill="rgb(251,227,43)" fg:x="4302" fg:w="1"/><text x="94.0163%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7663%" y="469" width="0.0218%" height="15" fill="rgb(241,96,17)" fg:x="4302" fg:w="1"/><text x="94.0163%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.7663%" y="453" width="0.0218%" height="15" fill="rgb(234,198,43)" fg:x="4302" fg:w="1"/><text x="94.0163%" y="463.50"></text></g><g><title>rusk-wallet`&lt;dusk_wallet::clients::StateStore as dusk_wallet_core::StateClient&gt;::fetch_notes (11 samples, 0.24%)</title><rect x="93.5702%" y="789" width="0.2398%" height="15" fill="rgb(220,108,29)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="799.50"></text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::insert (11 samples, 0.24%)</title><rect x="93.5702%" y="773" width="0.2398%" height="15" fill="rgb(226,163,33)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="783.50"></text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;rocksdb::db::SingleThreaded,I&gt;::create_cf (11 samples, 0.24%)</title><rect x="93.5702%" y="757" width="0.2398%" height="15" fill="rgb(205,194,45)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="767.50"></text></g><g><title>rusk-wallet`rocksdb_create_column_family (11 samples, 0.24%)</title><rect x="93.5702%" y="741" width="0.2398%" height="15" fill="rgb(206,143,44)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="751.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="93.5702%" y="725" width="0.2398%" height="15" fill="rgb(236,136,36)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="735.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteOptionsFile (11 samples, 0.24%)</title><rect x="93.5702%" y="709" width="0.2398%" height="15" fill="rgb(249,172,42)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="719.50"></text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="93.5702%" y="693" width="0.2398%" height="15" fill="rgb(216,139,23)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="703.50"></text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="93.5702%" y="677" width="0.2398%" height="15" fill="rgb(207,166,20)" fg:x="4293" fg:w="11"/><text x="93.8202%" y="687.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (9 samples, 0.20%)</title><rect x="93.6138%" y="661" width="0.1962%" height="15" fill="rgb(210,209,22)" fg:x="4295" fg:w="9"/><text x="93.8638%" y="671.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::~RocksDBOptionsParser (1 samples, 0.02%)</title><rect x="93.7881%" y="645" width="0.0218%" height="15" fill="rgb(232,118,20)" fg:x="4303" fg:w="1"/><text x="94.0381%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="93.7881%" y="629" width="0.0218%" height="15" fill="rgb(238,113,42)" fg:x="4303" fg:w="1"/><text x="94.0381%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="93.7881%" y="613" width="0.0218%" height="15" fill="rgb(231,42,5)" fg:x="4303" fg:w="1"/><text x="94.0381%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.02%)</title><rect x="93.8099%" y="565" width="0.0218%" height="15" fill="rgb(243,166,24)" fg:x="4304" fg:w="1"/><text x="94.0599%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (1 samples, 0.02%)</title><rect x="93.8317%" y="565" width="0.0218%" height="15" fill="rgb(237,226,12)" fg:x="4305" fg:w="1"/><text x="94.0817%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="93.8535%" y="549" width="0.0218%" height="15" fill="rgb(229,133,24)" fg:x="4306" fg:w="1"/><text x="94.1035%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="93.8535%" y="533" width="0.0218%" height="15" fill="rgb(238,33,43)" fg:x="4306" fg:w="1"/><text x="94.1035%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::RegisterOptions(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.8535%" y="517" width="0.0218%" height="15" fill="rgb(227,59,38)" fg:x="4306" fg:w="1"/><text x="94.1035%" y="527.50"></text></g><g><title>rusk-wallet`void std::__1::vector&lt;rocksdb::Configurable::RegisteredOptions, std::__1::allocator&lt;rocksdb::Configurable::RegisteredOptions&gt;&gt;::__emplace_back_slow_path&lt;rocksdb::Configurable::RegisteredOptions&amp;&gt; (1 samples, 0.02%)</title><rect x="93.8535%" y="501" width="0.0218%" height="15" fill="rgb(230,97,0)" fg:x="4306" fg:w="1"/><text x="94.1035%" y="511.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="93.8535%" y="485" width="0.0218%" height="15" fill="rgb(250,173,50)" fg:x="4306" fg:w="1"/><text x="94.1035%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="93.8535%" y="469" width="0.0218%" height="15" fill="rgb(240,15,50)" fg:x="4306" fg:w="1"/><text x="94.1035%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="93.8535%" y="453" width="0.0218%" height="15" fill="rgb(221,93,22)" fg:x="4306" fg:w="1"/><text x="94.1035%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.8753%" y="517" width="0.0218%" height="15" fill="rgb(245,180,53)" fg:x="4307" fg:w="1"/><text x="94.1253%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.8753%" y="501" width="0.0218%" height="15" fill="rgb(231,88,51)" fg:x="4307" fg:w="1"/><text x="94.1253%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.8753%" y="485" width="0.0218%" height="15" fill="rgb(240,58,21)" fg:x="4307" fg:w="1"/><text x="94.1253%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.8753%" y="469" width="0.0218%" height="15" fill="rgb(237,21,10)" fg:x="4307" fg:w="1"/><text x="94.1253%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::stoull(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.8753%" y="453" width="0.0218%" height="15" fill="rgb(218,43,11)" fg:x="4307" fg:w="1"/><text x="94.1253%" y="463.50"></text></g><g><title>libsystem_c.dylib`strtoull_l (1 samples, 0.02%)</title><rect x="93.8753%" y="437" width="0.0218%" height="15" fill="rgb(218,221,29)" fg:x="4307" fg:w="1"/><text x="94.1253%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (2 samples, 0.04%)</title><rect x="93.8753%" y="549" width="0.0436%" height="15" fill="rgb(214,118,42)" fg:x="4307" fg:w="2"/><text x="94.1253%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="93.8753%" y="533" width="0.0436%" height="15" fill="rgb(251,200,26)" fg:x="4307" fg:w="2"/><text x="94.1253%" y="543.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="93.8971%" y="517" width="0.0218%" height="15" fill="rgb(237,101,39)" fg:x="4308" fg:w="1"/><text x="94.1471%" y="527.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.8971%" y="501" width="0.0218%" height="15" fill="rgb(251,117,11)" fg:x="4308" fg:w="1"/><text x="94.1471%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="93.9407%" y="469" width="0.0218%" height="15" fill="rgb(216,223,23)" fg:x="4310" fg:w="1"/><text x="94.1907%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="93.9625%" y="437" width="0.0218%" height="15" fill="rgb(251,54,12)" fg:x="4311" fg:w="1"/><text x="94.2125%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.9843%" y="421" width="0.0218%" height="15" fill="rgb(254,176,54)" fg:x="4312" fg:w="1"/><text x="94.2343%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="93.9843%" y="405" width="0.0218%" height="15" fill="rgb(210,32,8)" fg:x="4312" fg:w="1"/><text x="94.2343%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="93.9843%" y="389" width="0.0218%" height="15" fill="rgb(235,52,38)" fg:x="4312" fg:w="1"/><text x="94.2343%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="93.9843%" y="373" width="0.0218%" height="15" fill="rgb(231,4,44)" fg:x="4312" fg:w="1"/><text x="94.2343%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="93.9625%" y="469" width="0.0654%" height="15" fill="rgb(249,2,32)" fg:x="4311" fg:w="3"/><text x="94.2125%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="93.9625%" y="453" width="0.0654%" height="15" fill="rgb(224,65,26)" fg:x="4311" fg:w="3"/><text x="94.2125%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (2 samples, 0.04%)</title><rect x="93.9843%" y="437" width="0.0436%" height="15" fill="rgb(250,73,40)" fg:x="4312" fg:w="2"/><text x="94.2343%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.0061%" y="421" width="0.0218%" height="15" fill="rgb(253,177,16)" fg:x="4313" fg:w="1"/><text x="94.2561%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.0061%" y="405" width="0.0218%" height="15" fill="rgb(217,32,34)" fg:x="4313" fg:w="1"/><text x="94.2561%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.0061%" y="389" width="0.0218%" height="15" fill="rgb(212,7,10)" fg:x="4313" fg:w="1"/><text x="94.2561%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.0279%" y="453" width="0.0218%" height="15" fill="rgb(245,89,8)" fg:x="4314" fg:w="1"/><text x="94.2779%" y="463.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="94.0279%" y="437" width="0.0218%" height="15" fill="rgb(237,16,53)" fg:x="4314" fg:w="1"/><text x="94.2779%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="93.9189%" y="501" width="0.1526%" height="15" fill="rgb(250,204,30)" fg:x="4309" fg:w="7"/><text x="94.1689%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="93.9189%" y="485" width="0.1526%" height="15" fill="rgb(208,77,27)" fg:x="4309" fg:w="7"/><text x="94.1689%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="94.0279%" y="469" width="0.0436%" height="15" fill="rgb(250,204,28)" fg:x="4314" fg:w="2"/><text x="94.2779%" y="479.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompactionStyle&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompactionStyle&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::CompactionStyle&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="94.0497%" y="453" width="0.0218%" height="15" fill="rgb(244,63,21)" fg:x="4315" fg:w="1"/><text x="94.2997%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="93.8535%" y="565" width="0.2398%" height="15" fill="rgb(236,85,44)" fg:x="4306" fg:w="11"/><text x="94.1035%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="93.9189%" y="549" width="0.1744%" height="15" fill="rgb(215,98,4)" fg:x="4309" fg:w="8"/><text x="94.1689%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (8 samples, 0.17%)</title><rect x="93.9189%" y="533" width="0.1744%" height="15" fill="rgb(235,38,11)" fg:x="4309" fg:w="8"/><text x="94.1689%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (8 samples, 0.17%)</title><rect x="93.9189%" y="517" width="0.1744%" height="15" fill="rgb(254,186,25)" fg:x="4309" fg:w="8"/><text x="94.1689%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.0715%" y="501" width="0.0218%" height="15" fill="rgb(225,55,31)" fg:x="4316" fg:w="1"/><text x="94.3215%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (14 samples, 0.31%)</title><rect x="93.8099%" y="581" width="0.3051%" height="15" fill="rgb(211,15,21)" fg:x="4304" fg:w="14"/><text x="94.0599%" y="591.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseStatement(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.0933%" y="565" width="0.0218%" height="15" fill="rgb(215,187,41)" fg:x="4317" fg:w="1"/><text x="94.3433%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="94.0933%" y="549" width="0.0218%" height="15" fill="rgb(248,69,32)" fg:x="4317" fg:w="1"/><text x="94.3433%" y="559.50"></text></g><g><title>rusk-wallet`rusk_wallet::interactive::run_loop::_{{closure}} (15 samples, 0.33%)</title><rect x="93.8099%" y="789" width="0.3269%" height="15" fill="rgb(252,102,52)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="799.50"></text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.33%)</title><rect x="93.8099%" y="773" width="0.3269%" height="15" fill="rgb(253,140,32)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="783.50"></text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::get_balance (15 samples, 0.33%)</title><rect x="93.8099%" y="757" width="0.3269%" height="15" fill="rgb(216,56,42)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="767.50"></text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::unspent_notes (15 samples, 0.33%)</title><rect x="93.8099%" y="741" width="0.3269%" height="15" fill="rgb(216,184,14)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="751.50"></text></g><g><title>rusk-wallet`&lt;dusk_wallet::clients::StateStore as dusk_wallet_core::StateClient&gt;::fetch_notes (15 samples, 0.33%)</title><rect x="93.8099%" y="725" width="0.3269%" height="15" fill="rgb(237,187,27)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="735.50"></text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::insert (15 samples, 0.33%)</title><rect x="93.8099%" y="709" width="0.3269%" height="15" fill="rgb(219,65,3)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="719.50"></text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;rocksdb::db::SingleThreaded,I&gt;::create_cf (15 samples, 0.33%)</title><rect x="93.8099%" y="693" width="0.3269%" height="15" fill="rgb(245,83,25)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="703.50"></text></g><g><title>rusk-wallet`rocksdb_create_column_family (15 samples, 0.33%)</title><rect x="93.8099%" y="677" width="0.3269%" height="15" fill="rgb(214,205,45)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="687.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="93.8099%" y="661" width="0.3269%" height="15" fill="rgb(241,20,18)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="671.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteOptionsFile (15 samples, 0.33%)</title><rect x="93.8099%" y="645" width="0.3269%" height="15" fill="rgb(232,163,23)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="655.50"></text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="93.8099%" y="629" width="0.3269%" height="15" fill="rgb(214,5,46)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="639.50"></text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="93.8099%" y="613" width="0.3269%" height="15" fill="rgb(229,78,17)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="623.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="93.8099%" y="597" width="0.3269%" height="15" fill="rgb(248,89,10)" fg:x="4304" fg:w="15"/><text x="94.0599%" y="607.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyCFOptions(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.1151%" y="581" width="0.0218%" height="15" fill="rgb(248,54,15)" fg:x="4318" fg:w="1"/><text x="94.3651%" y="591.50"></text></g><g><title>rusk-wallet`rocksdb::CFOptionsAsConfigurable(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.1151%" y="565" width="0.0218%" height="15" fill="rgb(223,116,6)" fg:x="4318" fg:w="1"/><text x="94.3651%" y="575.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigurableCFOptions(rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.1151%" y="549" width="0.0218%" height="15" fill="rgb(205,125,38)" fg:x="4318" fg:w="1"/><text x="94.3651%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableMutableCFOptions::ConfigurableMutableCFOptions (1 samples, 0.02%)</title><rect x="94.1151%" y="533" width="0.0218%" height="15" fill="rgb(251,78,38)" fg:x="4318" fg:w="1"/><text x="94.3651%" y="543.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (1 samples, 0.02%)</title><rect x="94.1369%" y="629" width="0.0218%" height="15" fill="rgb(253,78,28)" fg:x="4319" fg:w="1"/><text x="94.3869%" y="639.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (1 samples, 0.02%)</title><rect x="94.1369%" y="613" width="0.0218%" height="15" fill="rgb(209,120,3)" fg:x="4319" fg:w="1"/><text x="94.3869%" y="623.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.02%)</title><rect x="94.1369%" y="597" width="0.0218%" height="15" fill="rgb(238,229,9)" fg:x="4319" fg:w="1"/><text x="94.3869%" y="607.50"></text></g><g><title>rusk-wallet`dusk_pki::view::ViewKey::owns (3 samples, 0.07%)</title><rect x="94.1369%" y="645" width="0.0654%" height="15" fill="rgb(253,159,18)" fg:x="4319" fg:w="3"/><text x="94.3869%" y="655.50"></text></g><g><title>rusk-wallet`dusk_pki::permutation::hash (2 samples, 0.04%)</title><rect x="94.1587%" y="629" width="0.0436%" height="15" fill="rgb(244,42,34)" fg:x="4320" fg:w="2"/><text x="94.4087%" y="639.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (2 samples, 0.04%)</title><rect x="94.1587%" y="613" width="0.0436%" height="15" fill="rgb(224,8,7)" fg:x="4320" fg:w="2"/><text x="94.4087%" y="623.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (2 samples, 0.04%)</title><rect x="94.1587%" y="597" width="0.0436%" height="15" fill="rgb(210,201,45)" fg:x="4320" fg:w="2"/><text x="94.4087%" y="607.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (2 samples, 0.04%)</title><rect x="94.1587%" y="581" width="0.0436%" height="15" fill="rgb(252,185,21)" fg:x="4320" fg:w="2"/><text x="94.4087%" y="591.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (2 samples, 0.04%)</title><rect x="94.1587%" y="565" width="0.0436%" height="15" fill="rgb(223,131,1)" fg:x="4320" fg:w="2"/><text x="94.4087%" y="575.50"></text></g><g><title>rusk-wallet`dusk_pki::view::ViewKey::public_spend_key (1 samples, 0.02%)</title><rect x="94.2023%" y="645" width="0.0218%" height="15" fill="rgb(245,141,16)" fg:x="4322" fg:w="1"/><text x="94.4523%" y="655.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (1 samples, 0.02%)</title><rect x="94.2023%" y="629" width="0.0218%" height="15" fill="rgb(229,55,45)" fg:x="4322" fg:w="1"/><text x="94.4523%" y="639.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (1 samples, 0.02%)</title><rect x="94.2023%" y="613" width="0.0218%" height="15" fill="rgb(208,92,15)" fg:x="4322" fg:w="1"/><text x="94.4523%" y="623.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (1 samples, 0.02%)</title><rect x="94.2023%" y="597" width="0.0218%" height="15" fill="rgb(234,185,47)" fg:x="4322" fg:w="1"/><text x="94.4523%" y="607.50"></text></g><g><title>rusk-wallet`alloc::fmt::format::format_inner (1 samples, 0.02%)</title><rect x="94.2241%" y="629" width="0.0218%" height="15" fill="rgb(253,104,50)" fg:x="4323" fg:w="1"/><text x="94.4741%" y="639.50"></text></g><g><title>rusk-wallet`core::fmt::write (1 samples, 0.02%)</title><rect x="94.2241%" y="613" width="0.0218%" height="15" fill="rgb(205,70,7)" fg:x="4323" fg:w="1"/><text x="94.4741%" y="623.50"></text></g><g><title>rusk-wallet`&lt;dusk_pki::keys::spend::public::PublicSpendKey as core::fmt::LowerHex&gt;::fmt (1 samples, 0.02%)</title><rect x="94.2241%" y="597" width="0.0218%" height="15" fill="rgb(240,178,43)" fg:x="4323" fg:w="1"/><text x="94.4741%" y="607.50"></text></g><g><title>rusk-wallet`&lt;dusk_jubjub::JubJubAffine as core::convert::From&lt;dusk_jubjub::JubJubExtended&gt;&gt;::from (1 samples, 0.02%)</title><rect x="94.2241%" y="581" width="0.0218%" height="15" fill="rgb(214,112,2)" fg:x="4323" fg:w="1"/><text x="94.4741%" y="591.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="94.2241%" y="565" width="0.0218%" height="15" fill="rgb(206,46,17)" fg:x="4323" fg:w="1"/><text x="94.4741%" y="575.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="94.2459%" y="533" width="0.0218%" height="15" fill="rgb(225,220,16)" fg:x="4324" fg:w="1"/><text x="94.4959%" y="543.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="94.2677%" y="533" width="0.0218%" height="15" fill="rgb(238,65,40)" fg:x="4325" fg:w="1"/><text x="94.5177%" y="543.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="94.2895%" y="517" width="0.0436%" height="15" fill="rgb(230,151,21)" fg:x="4326" fg:w="2"/><text x="94.5395%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="94.2895%" y="533" width="0.0654%" height="15" fill="rgb(218,58,49)" fg:x="4326" fg:w="3"/><text x="94.5395%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3330%" y="517" width="0.0218%" height="15" fill="rgb(219,179,14)" fg:x="4328" fg:w="1"/><text x="94.5830%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3330%" y="501" width="0.0218%" height="15" fill="rgb(223,72,1)" fg:x="4328" fg:w="1"/><text x="94.5830%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (1 samples, 0.02%)</title><rect x="94.3330%" y="485" width="0.0218%" height="15" fill="rgb(238,126,10)" fg:x="4328" fg:w="1"/><text x="94.5830%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3330%" y="469" width="0.0218%" height="15" fill="rgb(224,206,38)" fg:x="4328" fg:w="1"/><text x="94.5830%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3330%" y="453" width="0.0218%" height="15" fill="rgb(212,201,54)" fg:x="4328" fg:w="1"/><text x="94.5830%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetId (1 samples, 0.02%)</title><rect x="94.3330%" y="437" width="0.0218%" height="15" fill="rgb(218,154,48)" fg:x="4328" fg:w="1"/><text x="94.5830%" y="447.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="94.3330%" y="421" width="0.0218%" height="15" fill="rgb(232,93,24)" fg:x="4328" fg:w="1"/><text x="94.5830%" y="431.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="94.3548%" y="485" width="0.0218%" height="15" fill="rgb(245,30,21)" fg:x="4329" fg:w="1"/><text x="94.6048%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="94.3766%" y="485" width="0.0218%" height="15" fill="rgb(242,148,29)" fg:x="4330" fg:w="1"/><text x="94.6266%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3984%" y="469" width="0.0218%" height="15" fill="rgb(244,153,54)" fg:x="4331" fg:w="1"/><text x="94.6484%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3984%" y="453" width="0.0218%" height="15" fill="rgb(252,87,22)" fg:x="4331" fg:w="1"/><text x="94.6484%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3984%" y="437" width="0.0218%" height="15" fill="rgb(210,51,29)" fg:x="4331" fg:w="1"/><text x="94.6484%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.3984%" y="421" width="0.0218%" height="15" fill="rgb(242,136,47)" fg:x="4331" fg:w="1"/><text x="94.6484%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::GetStringFromColumnFamilyOptions(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="94.3548%" y="533" width="0.0872%" height="15" fill="rgb(238,68,4)" fg:x="4329" fg:w="4"/><text x="94.6048%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="94.3548%" y="517" width="0.0872%" height="15" fill="rgb(242,161,30)" fg:x="4329" fg:w="4"/><text x="94.6048%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="94.3548%" y="501" width="0.0872%" height="15" fill="rgb(218,58,44)" fg:x="4329" fg:w="4"/><text x="94.6048%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="94.3984%" y="485" width="0.0436%" height="15" fill="rgb(252,125,32)" fg:x="4331" fg:w="2"/><text x="94.6484%" y="495.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_3, std::__1::allocator&lt;rocksdb::$_3&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*&amp;&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.4202%" y="469" width="0.0218%" height="15" fill="rgb(219,178,0)" fg:x="4332" fg:w="1"/><text x="94.6702%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.4202%" y="453" width="0.0218%" height="15" fill="rgb(213,152,7)" fg:x="4332" fg:w="1"/><text x="94.6702%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.4202%" y="437" width="0.0218%" height="15" fill="rgb(249,109,34)" fg:x="4332" fg:w="1"/><text x="94.6702%" y="447.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="94.4202%" y="421" width="0.0218%" height="15" fill="rgb(232,96,21)" fg:x="4332" fg:w="1"/><text x="94.6702%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="94.4202%" y="405" width="0.0218%" height="15" fill="rgb(228,27,39)" fg:x="4332" fg:w="1"/><text x="94.6702%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="94.4420%" y="517" width="0.0218%" height="15" fill="rgb(211,182,52)" fg:x="4333" fg:w="1"/><text x="94.6920%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="94.4638%" y="517" width="0.0218%" height="15" fill="rgb(234,178,38)" fg:x="4334" fg:w="1"/><text x="94.7138%" y="527.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="94.4856%" y="517" width="0.0218%" height="15" fill="rgb(221,111,3)" fg:x="4335" fg:w="1"/><text x="94.7356%" y="527.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="94.5074%" y="501" width="0.0218%" height="15" fill="rgb(228,175,21)" fg:x="4336" fg:w="1"/><text x="94.7574%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="94.5292%" y="501" width="0.0436%" height="15" fill="rgb(228,174,43)" fg:x="4337" fg:w="2"/><text x="94.7792%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (1 samples, 0.02%)</title><rect x="94.5728%" y="501" width="0.0218%" height="15" fill="rgb(211,191,0)" fg:x="4339" fg:w="1"/><text x="94.8228%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="94.5946%" y="501" width="0.0218%" height="15" fill="rgb(253,117,3)" fg:x="4340" fg:w="1"/><text x="94.8446%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="94.6164%" y="501" width="0.0436%" height="15" fill="rgb(241,127,19)" fg:x="4341" fg:w="2"/><text x="94.8664%" y="511.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.6600%" y="501" width="0.0218%" height="15" fill="rgb(218,103,12)" fg:x="4343" fg:w="1"/><text x="94.9100%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::LineFileReader::ReadLine(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="94.6818%" y="501" width="0.0436%" height="15" fill="rgb(236,214,43)" fg:x="4344" fg:w="2"/><text x="94.9318%" y="511.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="94.6818%" y="485" width="0.0436%" height="15" fill="rgb(244,144,19)" fg:x="4344" fg:w="2"/><text x="94.9318%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="94.7036%" y="469" width="0.0218%" height="15" fill="rgb(246,188,10)" fg:x="4345" fg:w="1"/><text x="94.9536%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="94.7254%" y="485" width="0.0218%" height="15" fill="rgb(212,193,33)" fg:x="4346" fg:w="1"/><text x="94.9754%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="94.7908%" y="373" width="0.0218%" height="15" fill="rgb(241,51,29)" fg:x="4349" fg:w="1"/><text x="95.0408%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::ShardedCache(unsigned long, int, bool, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="94.8126%" y="373" width="0.0218%" height="15" fill="rgb(211,58,19)" fg:x="4350" fg:w="1"/><text x="95.0626%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (5 samples, 0.11%)</title><rect x="94.7472%" y="485" width="0.1090%" height="15" fill="rgb(229,111,26)" fg:x="4347" fg:w="5"/><text x="94.9972%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (5 samples, 0.11%)</title><rect x="94.7472%" y="469" width="0.1090%" height="15" fill="rgb(213,115,40)" fg:x="4347" fg:w="5"/><text x="94.9972%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (5 samples, 0.11%)</title><rect x="94.7472%" y="453" width="0.1090%" height="15" fill="rgb(209,56,44)" fg:x="4347" fg:w="5"/><text x="94.9972%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (3 samples, 0.07%)</title><rect x="94.7908%" y="437" width="0.0654%" height="15" fill="rgb(230,108,32)" fg:x="4349" fg:w="3"/><text x="95.0408%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="94.7908%" y="421" width="0.0654%" height="15" fill="rgb(216,165,31)" fg:x="4349" fg:w="3"/><text x="95.0408%" y="431.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="94.7908%" y="405" width="0.0654%" height="15" fill="rgb(218,122,21)" fg:x="4349" fg:w="3"/><text x="95.0408%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="94.7908%" y="389" width="0.0654%" height="15" fill="rgb(223,224,47)" fg:x="4349" fg:w="3"/><text x="95.0408%" y="399.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="94.8344%" y="373" width="0.0218%" height="15" fill="rgb(238,102,44)" fg:x="4351" fg:w="1"/><text x="95.0844%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.02%)</title><rect x="94.8344%" y="357" width="0.0218%" height="15" fill="rgb(236,46,40)" fg:x="4351" fg:w="1"/><text x="95.0844%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="94.8561%" y="469" width="0.0218%" height="15" fill="rgb(247,202,50)" fg:x="4352" fg:w="1"/><text x="95.1061%" y="479.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="94.8779%" y="453" width="0.0218%" height="15" fill="rgb(209,99,20)" fg:x="4353" fg:w="1"/><text x="95.1279%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="94.8997%" y="437" width="0.0218%" height="15" fill="rgb(252,27,34)" fg:x="4354" fg:w="1"/><text x="95.1497%" y="447.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$strlen (1 samples, 0.02%)</title><rect x="94.9215%" y="437" width="0.0218%" height="15" fill="rgb(215,206,23)" fg:x="4355" fg:w="1"/><text x="95.1715%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.9433%" y="405" width="0.0218%" height="15" fill="rgb(212,135,36)" fg:x="4356" fg:w="1"/><text x="95.1933%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="94.9433%" y="389" width="0.0218%" height="15" fill="rgb(240,189,1)" fg:x="4356" fg:w="1"/><text x="95.1933%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="94.9433%" y="373" width="0.0218%" height="15" fill="rgb(242,56,20)" fg:x="4356" fg:w="1"/><text x="95.1933%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.9433%" y="357" width="0.0218%" height="15" fill="rgb(247,132,33)" fg:x="4356" fg:w="1"/><text x="95.1933%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.9433%" y="341" width="0.0218%" height="15" fill="rgb(208,149,11)" fg:x="4356" fg:w="1"/><text x="95.1933%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::DataBlockIndexType, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.9651%" y="405" width="0.0218%" height="15" fill="rgb(211,33,11)" fg:x="4357" fg:w="1"/><text x="95.2151%" y="415.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::DataBlockIndexType&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="94.9651%" y="389" width="0.0218%" height="15" fill="rgb(221,29,38)" fg:x="4357" fg:w="1"/><text x="95.2151%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="94.9433%" y="437" width="0.0654%" height="15" fill="rgb(206,182,49)" fg:x="4356" fg:w="3"/><text x="95.1933%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="94.9433%" y="421" width="0.0654%" height="15" fill="rgb(216,140,1)" fg:x="4356" fg:w="3"/><text x="95.1933%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="94.9869%" y="405" width="0.0218%" height="15" fill="rgb(232,57,40)" fg:x="4358" fg:w="1"/><text x="95.2369%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="94.8779%" y="469" width="0.1526%" height="15" fill="rgb(224,186,18)" fg:x="4353" fg:w="7"/><text x="95.1279%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="94.8997%" y="453" width="0.1308%" height="15" fill="rgb(215,121,11)" fg:x="4354" fg:w="6"/><text x="95.1497%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.0087%" y="437" width="0.0218%" height="15" fill="rgb(245,147,10)" fg:x="4359" fg:w="1"/><text x="95.2587%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (9 samples, 0.20%)</title><rect x="94.8561%" y="485" width="0.1962%" height="15" fill="rgb(238,153,13)" fg:x="4352" fg:w="9"/><text x="95.1061%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.0305%" y="469" width="0.0218%" height="15" fill="rgb(233,108,0)" fg:x="4360" fg:w="1"/><text x="95.2805%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.0305%" y="453" width="0.0218%" height="15" fill="rgb(212,157,17)" fg:x="4360" fg:w="1"/><text x="95.2805%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.0305%" y="437" width="0.0218%" height="15" fill="rgb(225,213,38)" fg:x="4360" fg:w="1"/><text x="95.2805%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.0305%" y="421" width="0.0218%" height="15" fill="rgb(248,16,11)" fg:x="4360" fg:w="1"/><text x="95.2805%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="95.0523%" y="421" width="0.0218%" height="15" fill="rgb(241,33,4)" fg:x="4361" fg:w="1"/><text x="95.3023%" y="431.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.0959%" y="405" width="0.0218%" height="15" fill="rgb(222,26,43)" fg:x="4363" fg:w="1"/><text x="95.3459%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="95.0959%" y="389" width="0.0218%" height="15" fill="rgb(243,29,36)" fg:x="4363" fg:w="1"/><text x="95.3459%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="95.0959%" y="373" width="0.0218%" height="15" fill="rgb(241,9,27)" fg:x="4363" fg:w="1"/><text x="95.3459%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.1177%" y="405" width="0.0218%" height="15" fill="rgb(205,117,26)" fg:x="4364" fg:w="1"/><text x="95.3677%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="95.1395%" y="357" width="0.0218%" height="15" fill="rgb(209,80,39)" fg:x="4365" fg:w="1"/><text x="95.3895%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="95.1613%" y="325" width="0.0436%" height="15" fill="rgb(239,155,6)" fg:x="4366" fg:w="2"/><text x="95.4113%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.04%)</title><rect x="95.1613%" y="309" width="0.0436%" height="15" fill="rgb(212,104,12)" fg:x="4366" fg:w="2"/><text x="95.4113%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (2 samples, 0.04%)</title><rect x="95.1613%" y="293" width="0.0436%" height="15" fill="rgb(234,204,3)" fg:x="4366" fg:w="2"/><text x="95.4113%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="95.1613%" y="357" width="0.0654%" height="15" fill="rgb(251,218,7)" fg:x="4366" fg:w="3"/><text x="95.4113%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (3 samples, 0.07%)</title><rect x="95.1613%" y="341" width="0.0654%" height="15" fill="rgb(221,81,32)" fg:x="4366" fg:w="3"/><text x="95.4113%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.2049%" y="325" width="0.0218%" height="15" fill="rgb(214,152,26)" fg:x="4368" fg:w="1"/><text x="95.4549%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.2049%" y="309" width="0.0218%" height="15" fill="rgb(223,22,3)" fg:x="4368" fg:w="1"/><text x="95.4549%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.2267%" y="325" width="0.0218%" height="15" fill="rgb(207,174,7)" fg:x="4369" fg:w="1"/><text x="95.4767%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (1 samples, 0.02%)</title><rect x="95.2485%" y="293" width="0.0218%" height="15" fill="rgb(224,19,52)" fg:x="4370" fg:w="1"/><text x="95.4985%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.2485%" y="277" width="0.0218%" height="15" fill="rgb(228,24,14)" fg:x="4370" fg:w="1"/><text x="95.4985%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.2485%" y="261" width="0.0218%" height="15" fill="rgb(230,153,43)" fg:x="4370" fg:w="1"/><text x="95.4985%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="95.2485%" y="245" width="0.0218%" height="15" fill="rgb(231,106,12)" fg:x="4370" fg:w="1"/><text x="95.4985%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="95.2267%" y="341" width="0.0654%" height="15" fill="rgb(215,92,2)" fg:x="4369" fg:w="3"/><text x="95.4767%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="95.2485%" y="325" width="0.0436%" height="15" fill="rgb(249,143,25)" fg:x="4370" fg:w="2"/><text x="95.4985%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="95.2485%" y="309" width="0.0436%" height="15" fill="rgb(252,7,35)" fg:x="4370" fg:w="2"/><text x="95.4985%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.2703%" y="293" width="0.0218%" height="15" fill="rgb(216,69,40)" fg:x="4371" fg:w="1"/><text x="95.5203%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="95.2703%" y="277" width="0.0218%" height="15" fill="rgb(240,36,33)" fg:x="4371" fg:w="1"/><text x="95.5203%" y="287.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.02%)</title><rect x="95.2703%" y="261" width="0.0218%" height="15" fill="rgb(231,128,14)" fg:x="4371" fg:w="1"/><text x="95.5203%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.2921%" y="325" width="0.0218%" height="15" fill="rgb(245,143,14)" fg:x="4372" fg:w="1"/><text x="95.5421%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="95.2921%" y="341" width="0.0436%" height="15" fill="rgb(222,130,28)" fg:x="4372" fg:w="2"/><text x="95.5421%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.3139%" y="325" width="0.0218%" height="15" fill="rgb(212,10,48)" fg:x="4373" fg:w="1"/><text x="95.5639%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="95.2267%" y="357" width="0.1308%" height="15" fill="rgb(254,118,45)" fg:x="4369" fg:w="6"/><text x="95.4767%" y="367.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.3357%" y="341" width="0.0218%" height="15" fill="rgb(228,6,45)" fg:x="4374" fg:w="1"/><text x="95.5857%" y="351.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.3357%" y="325" width="0.0218%" height="15" fill="rgb(241,18,35)" fg:x="4374" fg:w="1"/><text x="95.5857%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="95.1395%" y="405" width="0.2398%" height="15" fill="rgb(227,214,53)" fg:x="4365" fg:w="11"/><text x="95.3895%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (11 samples, 0.24%)</title><rect x="95.1395%" y="389" width="0.2398%" height="15" fill="rgb(224,107,51)" fg:x="4365" fg:w="11"/><text x="95.3895%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (11 samples, 0.24%)</title><rect x="95.1395%" y="373" width="0.2398%" height="15" fill="rgb(248,60,28)" fg:x="4365" fg:w="11"/><text x="95.3895%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::LoadFactory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="95.3575%" y="357" width="0.0218%" height="15" fill="rgb(249,101,23)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="95.3575%" y="341" width="0.0218%" height="15" fill="rgb(228,51,19)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (1 samples, 0.02%)</title><rect x="95.3575%" y="325" width="0.0218%" height="15" fill="rgb(213,20,6)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.02%)</title><rect x="95.3575%" y="309" width="0.0218%" height="15" fill="rgb(212,124,10)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="95.3575%" y="293" width="0.0218%" height="15" fill="rgb(248,3,40)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="95.3575%" y="277" width="0.0218%" height="15" fill="rgb(223,178,23)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="95.3575%" y="261" width="0.0218%" height="15" fill="rgb(240,132,45)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="271.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="95.3575%" y="245" width="0.0218%" height="15" fill="rgb(245,164,36)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.02%)</title><rect x="95.3575%" y="229" width="0.0218%" height="15" fill="rgb(231,188,53)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (1 samples, 0.02%)</title><rect x="95.3575%" y="213" width="0.0218%" height="15" fill="rgb(237,198,39)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="95.3575%" y="197" width="0.0218%" height="15" fill="rgb(223,120,35)" fg:x="4375" fg:w="1"/><text x="95.6075%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.3793%" y="405" width="0.0218%" height="15" fill="rgb(253,107,49)" fg:x="4376" fg:w="1"/><text x="95.6293%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.3793%" y="389" width="0.0218%" height="15" fill="rgb(216,44,31)" fg:x="4376" fg:w="1"/><text x="95.6293%" y="399.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="95.4010%" y="389" width="0.0218%" height="15" fill="rgb(253,87,21)" fg:x="4377" fg:w="1"/><text x="95.6510%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.4228%" y="341" width="0.0218%" height="15" fill="rgb(226,18,2)" fg:x="4378" fg:w="1"/><text x="95.6728%" y="351.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="95.4228%" y="325" width="0.0218%" height="15" fill="rgb(216,8,46)" fg:x="4378" fg:w="1"/><text x="95.6728%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.04%)</title><rect x="95.4228%" y="357" width="0.0436%" height="15" fill="rgb(226,140,39)" fg:x="4378" fg:w="2"/><text x="95.6728%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.4446%" y="341" width="0.0218%" height="15" fill="rgb(221,194,54)" fg:x="4379" fg:w="1"/><text x="95.6946%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.4446%" y="325" width="0.0218%" height="15" fill="rgb(213,92,11)" fg:x="4379" fg:w="1"/><text x="95.6946%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="95.4228%" y="389" width="0.0654%" height="15" fill="rgb(229,162,46)" fg:x="4378" fg:w="3"/><text x="95.6728%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (3 samples, 0.07%)</title><rect x="95.4228%" y="373" width="0.0654%" height="15" fill="rgb(214,111,36)" fg:x="4378" fg:w="3"/><text x="95.6728%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.4664%" y="357" width="0.0218%" height="15" fill="rgb(207,6,21)" fg:x="4380" fg:w="1"/><text x="95.7164%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="95.4664%" y="341" width="0.0218%" height="15" fill="rgb(213,127,38)" fg:x="4380" fg:w="1"/><text x="95.7164%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.4882%" y="389" width="0.0218%" height="15" fill="rgb(238,118,32)" fg:x="4381" fg:w="1"/><text x="95.7382%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.4882%" y="373" width="0.0218%" height="15" fill="rgb(240,139,39)" fg:x="4381" fg:w="1"/><text x="95.7382%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.4882%" y="357" width="0.0218%" height="15" fill="rgb(235,10,37)" fg:x="4381" fg:w="1"/><text x="95.7382%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ParseVector&lt;int&gt;(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, char, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.5100%" y="389" width="0.0218%" height="15" fill="rgb(249,171,38)" fg:x="4382" fg:w="1"/><text x="95.7600%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.5100%" y="373" width="0.0218%" height="15" fill="rgb(242,144,32)" fg:x="4382" fg:w="1"/><text x="95.7600%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="95.5318%" y="389" width="0.0654%" height="15" fill="rgb(217,117,21)" fg:x="4383" fg:w="3"/><text x="95.7818%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (2 samples, 0.04%)</title><rect x="95.5536%" y="373" width="0.0436%" height="15" fill="rgb(249,87,1)" fg:x="4384" fg:w="2"/><text x="95.8036%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (25 samples, 0.54%)</title><rect x="95.0741%" y="421" width="0.5449%" height="15" fill="rgb(248,196,48)" fg:x="4362" fg:w="25"/><text x="95.3241%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="95.4010%" y="405" width="0.2180%" height="15" fill="rgb(251,206,33)" fg:x="4377" fg:w="10"/><text x="95.6510%" y="415.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_0, std::__1::allocator&lt;rocksdb::$_0&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.5972%" y="389" width="0.0218%" height="15" fill="rgb(232,141,28)" fg:x="4386" fg:w="1"/><text x="95.8472%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.5972%" y="373" width="0.0218%" height="15" fill="rgb(209,167,14)" fg:x="4386" fg:w="1"/><text x="95.8472%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="95.5972%" y="357" width="0.0218%" height="15" fill="rgb(225,11,50)" fg:x="4386" fg:w="1"/><text x="95.8472%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="95.5972%" y="341" width="0.0218%" height="15" fill="rgb(209,50,20)" fg:x="4386" fg:w="1"/><text x="95.8472%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.5972%" y="325" width="0.0218%" height="15" fill="rgb(212,17,46)" fg:x="4386" fg:w="1"/><text x="95.8472%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.5972%" y="309" width="0.0218%" height="15" fill="rgb(216,101,39)" fg:x="4386" fg:w="1"/><text x="95.8472%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (27 samples, 0.59%)</title><rect x="95.0523%" y="437" width="0.5885%" height="15" fill="rgb(212,228,48)" fg:x="4361" fg:w="27"/><text x="95.3023%" y="447.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (1 samples, 0.02%)</title><rect x="95.6190%" y="421" width="0.0218%" height="15" fill="rgb(250,6,50)" fg:x="4387" fg:w="1"/><text x="95.8690%" y="431.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="95.6190%" y="405" width="0.0218%" height="15" fill="rgb(250,160,48)" fg:x="4387" fg:w="1"/><text x="95.8690%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="95.6408%" y="405" width="0.0218%" height="15" fill="rgb(244,216,33)" fg:x="4388" fg:w="1"/><text x="95.8908%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (3 samples, 0.07%)</title><rect x="95.6408%" y="421" width="0.0654%" height="15" fill="rgb(207,157,5)" fg:x="4388" fg:w="3"/><text x="95.8908%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="95.6626%" y="405" width="0.0436%" height="15" fill="rgb(228,199,8)" fg:x="4389" fg:w="2"/><text x="95.9126%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="95.7062%" y="421" width="0.0218%" height="15" fill="rgb(227,80,20)" fg:x="4391" fg:w="1"/><text x="95.9562%" y="431.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="95.7280%" y="341" width="0.0218%" height="15" fill="rgb(222,9,33)" fg:x="4392" fg:w="1"/><text x="95.9780%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.7498%" y="325" width="0.0218%" height="15" fill="rgb(239,44,28)" fg:x="4393" fg:w="1"/><text x="95.9998%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (3 samples, 0.07%)</title><rect x="95.7280%" y="405" width="0.0654%" height="15" fill="rgb(249,187,43)" fg:x="4392" fg:w="3"/><text x="95.9780%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="95.7280%" y="389" width="0.0654%" height="15" fill="rgb(216,141,28)" fg:x="4392" fg:w="3"/><text x="95.9780%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="95.7280%" y="373" width="0.0654%" height="15" fill="rgb(230,154,53)" fg:x="4392" fg:w="3"/><text x="95.9780%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="95.7280%" y="357" width="0.0654%" height="15" fill="rgb(227,82,4)" fg:x="4392" fg:w="3"/><text x="95.9780%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="95.7498%" y="341" width="0.0436%" height="15" fill="rgb(220,107,16)" fg:x="4393" fg:w="2"/><text x="95.9998%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.7716%" y="325" width="0.0218%" height="15" fill="rgb(207,187,2)" fg:x="4394" fg:w="1"/><text x="96.0216%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.7716%" y="309" width="0.0218%" height="15" fill="rgb(210,162,52)" fg:x="4394" fg:w="1"/><text x="96.0216%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.7716%" y="293" width="0.0218%" height="15" fill="rgb(217,216,49)" fg:x="4394" fg:w="1"/><text x="96.0216%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (35 samples, 0.76%)</title><rect x="95.0523%" y="453" width="0.7629%" height="15" fill="rgb(218,146,49)" fg:x="4361" fg:w="35"/><text x="95.3023%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="95.6408%" y="437" width="0.1744%" height="15" fill="rgb(216,55,40)" fg:x="4388" fg:w="8"/><text x="95.8908%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="95.7280%" y="421" width="0.0872%" height="15" fill="rgb(208,196,21)" fg:x="4392" fg:w="4"/><text x="95.9780%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.7934%" y="405" width="0.0218%" height="15" fill="rgb(242,117,42)" fg:x="4395" fg:w="1"/><text x="96.0434%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="95.7934%" y="389" width="0.0218%" height="15" fill="rgb(210,11,23)" fg:x="4395" fg:w="1"/><text x="96.0434%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.8152%" y="437" width="0.0218%" height="15" fill="rgb(217,110,2)" fg:x="4396" fg:w="1"/><text x="96.0652%" y="447.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="95.8152%" y="421" width="0.0218%" height="15" fill="rgb(229,77,54)" fg:x="4396" fg:w="1"/><text x="96.0652%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="95.8152%" y="405" width="0.0218%" height="15" fill="rgb(218,53,16)" fg:x="4396" fg:w="1"/><text x="96.0652%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (37 samples, 0.81%)</title><rect x="95.0523%" y="485" width="0.8065%" height="15" fill="rgb(215,38,13)" fg:x="4361" fg:w="37"/><text x="95.3023%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (37 samples, 0.81%)</title><rect x="95.0523%" y="469" width="0.8065%" height="15" fill="rgb(235,42,18)" fg:x="4361" fg:w="37"/><text x="95.3023%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::PrepareOptions (2 samples, 0.04%)</title><rect x="95.8152%" y="453" width="0.0436%" height="15" fill="rgb(219,66,54)" fg:x="4396" fg:w="2"/><text x="96.0652%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::OptionTypeInfo (1 samples, 0.02%)</title><rect x="95.8370%" y="437" width="0.0218%" height="15" fill="rgb(222,205,4)" fg:x="4397" fg:w="1"/><text x="96.0870%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (2 samples, 0.04%)</title><rect x="95.8588%" y="485" width="0.0436%" height="15" fill="rgb(227,213,46)" fg:x="4398" fg:w="2"/><text x="96.1088%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::LoadFactory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (2 samples, 0.04%)</title><rect x="95.8588%" y="469" width="0.0436%" height="15" fill="rgb(250,145,42)" fg:x="4398" fg:w="2"/><text x="96.1088%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (2 samples, 0.04%)</title><rect x="95.8588%" y="453" width="0.0436%" height="15" fill="rgb(219,15,2)" fg:x="4398" fg:w="2"/><text x="96.1088%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (2 samples, 0.04%)</title><rect x="95.8588%" y="437" width="0.0436%" height="15" fill="rgb(231,181,52)" fg:x="4398" fg:w="2"/><text x="96.1088%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.02%)</title><rect x="95.8806%" y="421" width="0.0218%" height="15" fill="rgb(235,1,42)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="95.8806%" y="405" width="0.0218%" height="15" fill="rgb(249,88,27)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="415.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="95.8806%" y="389" width="0.0218%" height="15" fill="rgb(235,145,16)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="95.8806%" y="373" width="0.0218%" height="15" fill="rgb(237,114,19)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="383.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="95.8806%" y="357" width="0.0218%" height="15" fill="rgb(238,51,50)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="95.8806%" y="341" width="0.0218%" height="15" fill="rgb(205,194,25)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="95.8806%" y="325" width="0.0218%" height="15" fill="rgb(215,203,17)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="95.8806%" y="309" width="0.0218%" height="15" fill="rgb(233,112,49)" fg:x="4399" fg:w="1"/><text x="96.1306%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="95.9024%" y="453" width="0.0218%" height="15" fill="rgb(241,130,26)" fg:x="4400" fg:w="1"/><text x="96.1524%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (56 samples, 1.22%)</title><rect x="94.7254%" y="501" width="1.2206%" height="15" fill="rgb(252,223,19)" fg:x="4346" fg:w="56"/><text x="94.9754%" y="511.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (2 samples, 0.04%)</title><rect x="95.9024%" y="485" width="0.0436%" height="15" fill="rgb(211,95,25)" fg:x="4400" fg:w="2"/><text x="96.1524%" y="495.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="95.9024%" y="469" width="0.0436%" height="15" fill="rgb(251,182,27)" fg:x="4400" fg:w="2"/><text x="96.1524%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.9241%" y="453" width="0.0218%" height="15" fill="rgb(238,24,4)" fg:x="4401" fg:w="1"/><text x="96.1741%" y="463.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.9459%" y="485" width="0.0218%" height="15" fill="rgb(224,220,25)" fg:x="4402" fg:w="1"/><text x="96.1959%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseStatement(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="95.9459%" y="501" width="0.0436%" height="15" fill="rgb(239,133,26)" fg:x="4402" fg:w="2"/><text x="96.1959%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="95.9677%" y="485" width="0.0218%" height="15" fill="rgb(211,94,48)" fg:x="4403" fg:w="1"/><text x="96.2177%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (69 samples, 1.50%)</title><rect x="94.5074%" y="517" width="1.5039%" height="15" fill="rgb(239,87,6)" fg:x="4336" fg:w="69"/><text x="94.7574%" y="527.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="95.9895%" y="501" width="0.0218%" height="15" fill="rgb(227,62,0)" fg:x="4404" fg:w="1"/><text x="96.2395%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.02%)</title><rect x="96.0113%" y="501" width="0.0218%" height="15" fill="rgb(211,226,4)" fg:x="4405" fg:w="1"/><text x="96.2613%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.02%)</title><rect x="96.0113%" y="485" width="0.0218%" height="15" fill="rgb(253,38,52)" fg:x="4405" fg:w="1"/><text x="96.2613%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyCFOptions(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="96.0113%" y="517" width="0.0436%" height="15" fill="rgb(229,126,40)" fg:x="4405" fg:w="2"/><text x="96.2613%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::AreEquivalent(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.0331%" y="501" width="0.0218%" height="15" fill="rgb(229,165,44)" fg:x="4406" fg:w="1"/><text x="96.2831%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.0549%" y="517" width="0.0218%" height="15" fill="rgb(247,95,47)" fg:x="4407" fg:w="1"/><text x="96.3049%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsAsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.0549%" y="501" width="0.0218%" height="15" fill="rgb(216,140,30)" fg:x="4407" fg:w="1"/><text x="96.3049%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsConfigurable::DBOptionsConfigurable(rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.0549%" y="485" width="0.0218%" height="15" fill="rgb(246,214,8)" fg:x="4407" fg:w="1"/><text x="96.3049%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::ImmutableDBOptions::ImmutableDBOptions (1 samples, 0.02%)</title><rect x="96.0549%" y="469" width="0.0218%" height="15" fill="rgb(227,224,15)" fg:x="4407" fg:w="1"/><text x="96.3049%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="96.0549%" y="453" width="0.0218%" height="15" fill="rgb(233,175,4)" fg:x="4407" fg:w="1"/><text x="96.3049%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="96.0549%" y="437" width="0.0218%" height="15" fill="rgb(221,66,45)" fg:x="4407" fg:w="1"/><text x="96.3049%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (1 samples, 0.02%)</title><rect x="96.0549%" y="421" width="0.0218%" height="15" fill="rgb(221,178,18)" fg:x="4407" fg:w="1"/><text x="96.3049%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (76 samples, 1.66%)</title><rect x="94.4420%" y="533" width="1.6565%" height="15" fill="rgb(213,81,29)" fg:x="4333" fg:w="76"/><text x="94.6920%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::~RocksDBOptionsParser (1 samples, 0.02%)</title><rect x="96.0767%" y="517" width="0.0218%" height="15" fill="rgb(220,89,49)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="96.0767%" y="501" width="0.0218%" height="15" fill="rgb(227,60,33)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="96.0767%" y="485" width="0.0218%" height="15" fill="rgb(205,113,12)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="96.0767%" y="469" width="0.0218%" height="15" fill="rgb(211,32,1)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (1 samples, 0.02%)</title><rect x="96.0767%" y="453" width="0.0218%" height="15" fill="rgb(246,2,12)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (1 samples, 0.02%)</title><rect x="96.0767%" y="437" width="0.0218%" height="15" fill="rgb(243,37,27)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (1 samples, 0.02%)</title><rect x="96.0767%" y="421" width="0.0218%" height="15" fill="rgb(248,211,31)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="96.0767%" y="405" width="0.0218%" height="15" fill="rgb(242,146,47)" fg:x="4408" fg:w="1"/><text x="96.3267%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Append (1 samples, 0.02%)</title><rect x="96.0985%" y="533" width="0.0218%" height="15" fill="rgb(206,70,20)" fg:x="4409" fg:w="1"/><text x="96.3485%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.02%)</title><rect x="96.0985%" y="517" width="0.0218%" height="15" fill="rgb(215,10,51)" fg:x="4409" fg:w="1"/><text x="96.3485%" y="527.50"></text></g><g><title>rusk-wallet`tokio::park::thread::CachedParkThread::block_on (92 samples, 2.01%)</title><rect x="94.1369%" y="789" width="2.0052%" height="15" fill="rgb(243,178,53)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="799.50">r..</text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (92 samples, 2.01%)</title><rect x="94.1369%" y="773" width="2.0052%" height="15" fill="rgb(233,221,20)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="783.50">r..</text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (92 samples, 2.01%)</title><rect x="94.1369%" y="757" width="2.0052%" height="15" fill="rgb(218,95,35)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="767.50">r..</text></g><g><title>rusk-wallet`rusk_wallet::exec::_{{closure}} (92 samples, 2.01%)</title><rect x="94.1369%" y="741" width="2.0052%" height="15" fill="rgb(229,13,5)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="751.50">r..</text></g><g><title>rusk-wallet`rusk_wallet::interactive::run_loop::_{{closure}} (92 samples, 2.01%)</title><rect x="94.1369%" y="725" width="2.0052%" height="15" fill="rgb(252,164,30)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="735.50">r..</text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (92 samples, 2.01%)</title><rect x="94.1369%" y="709" width="2.0052%" height="15" fill="rgb(232,68,36)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="719.50">r..</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::get_balance (92 samples, 2.01%)</title><rect x="94.1369%" y="693" width="2.0052%" height="15" fill="rgb(219,59,54)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="703.50">r..</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::unspent_notes (92 samples, 2.01%)</title><rect x="94.1369%" y="677" width="2.0052%" height="15" fill="rgb(250,92,33)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="687.50">r..</text></g><g><title>rusk-wallet`&lt;dusk_wallet::clients::StateStore as dusk_wallet_core::StateClient&gt;::fetch_notes (92 samples, 2.01%)</title><rect x="94.1369%" y="661" width="2.0052%" height="15" fill="rgb(229,162,54)" fg:x="4319" fg:w="92"/><text x="94.3869%" y="671.50">r..</text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::insert (88 samples, 1.92%)</title><rect x="94.2241%" y="645" width="1.9180%" height="15" fill="rgb(244,114,52)" fg:x="4323" fg:w="88"/><text x="94.4741%" y="655.50">r..</text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;rocksdb::db::SingleThreaded,I&gt;::create_cf (87 samples, 1.90%)</title><rect x="94.2459%" y="629" width="1.8963%" height="15" fill="rgb(212,211,43)" fg:x="4324" fg:w="87"/><text x="94.4959%" y="639.50">r..</text></g><g><title>rusk-wallet`rocksdb_create_column_family (87 samples, 1.90%)</title><rect x="94.2459%" y="613" width="1.8963%" height="15" fill="rgb(226,147,8)" fg:x="4324" fg:w="87"/><text x="94.4959%" y="623.50">r..</text></g><g><title>rusk-wallet`rocksdb::DBImpl::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (87 samples, 1.90%)</title><rect x="94.2459%" y="597" width="1.8963%" height="15" fill="rgb(226,23,13)" fg:x="4324" fg:w="87"/><text x="94.4959%" y="607.50">r..</text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteOptionsFile (87 samples, 1.90%)</title><rect x="94.2459%" y="581" width="1.8963%" height="15" fill="rgb(240,63,4)" fg:x="4324" fg:w="87"/><text x="94.4959%" y="591.50">r..</text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (87 samples, 1.90%)</title><rect x="94.2459%" y="565" width="1.8963%" height="15" fill="rgb(221,1,32)" fg:x="4324" fg:w="87"/><text x="94.4959%" y="575.50">r..</text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (87 samples, 1.90%)</title><rect x="94.2459%" y="549" width="1.8963%" height="15" fill="rgb(242,117,10)" fg:x="4324" fg:w="87"/><text x="94.4959%" y="559.50">r..</text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Sync (1 samples, 0.02%)</title><rect x="96.1203%" y="533" width="0.0218%" height="15" fill="rgb(249,172,44)" fg:x="4410" fg:w="1"/><text x="96.3703%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::Flush (1 samples, 0.02%)</title><rect x="96.1203%" y="517" width="0.0218%" height="15" fill="rgb(244,46,45)" fg:x="4410" fg:w="1"/><text x="96.3703%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::WritableFileWriter::WriteBuffered (1 samples, 0.02%)</title><rect x="96.1203%" y="501" width="0.0218%" height="15" fill="rgb(206,43,17)" fg:x="4410" fg:w="1"/><text x="96.3703%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.02%)</title><rect x="96.1203%" y="485" width="0.0218%" height="15" fill="rgb(239,218,39)" fg:x="4410" fg:w="1"/><text x="96.3703%" y="495.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (3 samples, 0.07%)</title><rect x="96.1421%" y="581" width="0.0654%" height="15" fill="rgb(208,169,54)" fg:x="4411" fg:w="3"/><text x="96.3921%" y="591.50"></text></g><g><title>rusk-wallet`dusk_pki::keys::spend::secret::SecretSpendKey::view_key (4 samples, 0.09%)</title><rect x="96.1421%" y="629" width="0.0872%" height="15" fill="rgb(247,25,42)" fg:x="4411" fg:w="4"/><text x="96.3921%" y="639.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (4 samples, 0.09%)</title><rect x="96.1421%" y="613" width="0.0872%" height="15" fill="rgb(226,23,31)" fg:x="4411" fg:w="4"/><text x="96.3921%" y="623.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (4 samples, 0.09%)</title><rect x="96.1421%" y="597" width="0.0872%" height="15" fill="rgb(247,16,28)" fg:x="4411" fg:w="4"/><text x="96.3921%" y="607.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="96.2075%" y="581" width="0.0218%" height="15" fill="rgb(231,147,38)" fg:x="4414" fg:w="1"/><text x="96.4575%" y="591.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::mul (2 samples, 0.04%)</title><rect x="96.2293%" y="581" width="0.0436%" height="15" fill="rgb(253,81,48)" fg:x="4415" fg:w="2"/><text x="96.4793%" y="591.50"></text></g><g><title>rusk-wallet`&lt;&amp;dusk_jubjub::JubJubExtended as core::ops::arith::Mul&lt;&amp;dusk_jubjub::fr::Fr&gt;&gt;::mul (3 samples, 0.07%)</title><rect x="96.2293%" y="613" width="0.0654%" height="15" fill="rgb(249,222,43)" fg:x="4415" fg:w="3"/><text x="96.4793%" y="623.50"></text></g><g><title>rusk-wallet`dusk_jubjub::ExtendedNielsPoint::multiply (3 samples, 0.07%)</title><rect x="96.2293%" y="597" width="0.0654%" height="15" fill="rgb(221,3,27)" fg:x="4415" fg:w="3"/><text x="96.4793%" y="607.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="96.2729%" y="581" width="0.0218%" height="15" fill="rgb(228,180,5)" fg:x="4417" fg:w="1"/><text x="96.5229%" y="591.50"></text></g><g><title>rusk-wallet`dusk_jubjub::JubJubExtended::to_hash_inputs (1 samples, 0.02%)</title><rect x="96.2947%" y="597" width="0.0218%" height="15" fill="rgb(227,131,42)" fg:x="4418" fg:w="1"/><text x="96.5447%" y="607.50"></text></g><g><title>rusk-wallet`dusk_bls12_381::scalar::Scalar::square (1 samples, 0.02%)</title><rect x="96.2947%" y="581" width="0.0218%" height="15" fill="rgb(212,3,39)" fg:x="4418" fg:w="1"/><text x="96.5447%" y="591.50"></text></g><g><title>rusk-wallet`dusk_pki::view::ViewKey::owns (5 samples, 0.11%)</title><rect x="96.2293%" y="629" width="0.1090%" height="15" fill="rgb(226,45,5)" fg:x="4415" fg:w="5"/><text x="96.4793%" y="639.50"></text></g><g><title>rusk-wallet`dusk_pki::permutation::hash (2 samples, 0.04%)</title><rect x="96.2947%" y="613" width="0.0436%" height="15" fill="rgb(215,167,45)" fg:x="4418" fg:w="2"/><text x="96.5447%" y="623.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::truncated::hash (1 samples, 0.02%)</title><rect x="96.3165%" y="597" width="0.0218%" height="15" fill="rgb(250,218,53)" fg:x="4419" fg:w="1"/><text x="96.5665%" y="607.50"></text></g><g><title>rusk-wallet`dusk_poseidon::sponge::hash::hash (1 samples, 0.02%)</title><rect x="96.3165%" y="581" width="0.0218%" height="15" fill="rgb(207,140,0)" fg:x="4419" fg:w="1"/><text x="96.5665%" y="591.50"></text></g><g><title>rusk-wallet`dusk_hades::strategies::Strategy::perm (1 samples, 0.02%)</title><rect x="96.3165%" y="565" width="0.0218%" height="15" fill="rgb(238,133,51)" fg:x="4419" fg:w="1"/><text x="96.5665%" y="575.50"></text></g><g><title>rusk-wallet`&lt;dusk_hades::strategies::scalar::ScalarStrategy as dusk_hades::strategies::Strategy&lt;dusk_bls12_381::scalar::Scalar&gt;&gt;::mul_matrix (1 samples, 0.02%)</title><rect x="96.3165%" y="549" width="0.0218%" height="15" fill="rgb(218,203,53)" fg:x="4419" fg:w="1"/><text x="96.5665%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::RenameTempFileToOptionsFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.3383%" y="549" width="0.0218%" height="15" fill="rgb(226,184,25)" fg:x="4420" fg:w="1"/><text x="96.5883%" y="559.50"></text></g><g><title>rusk-wallet`rocksdb::DBImpl::DeleteObsoleteOptionsFiles (1 samples, 0.02%)</title><rect x="96.3383%" y="533" width="0.0218%" height="15" fill="rgb(231,121,21)" fg:x="4420" fg:w="1"/><text x="96.5883%" y="543.50"></text></g><g><title>rusk-wallet`rocksdb::CompositeEnv::DeleteFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.3383%" y="517" width="0.0218%" height="15" fill="rgb(251,14,34)" fg:x="4420" fg:w="1"/><text x="96.5883%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::PosixFileSystem::DeleteFile(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.3383%" y="501" width="0.0218%" height="15" fill="rgb(249,193,11)" fg:x="4420" fg:w="1"/><text x="96.5883%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`__unlink (1 samples, 0.02%)</title><rect x="96.3383%" y="485" width="0.0218%" height="15" fill="rgb(220,172,37)" fg:x="4420" fg:w="1"/><text x="96.5883%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="96.3819%" y="501" width="0.0218%" height="15" fill="rgb(231,229,43)" fg:x="4422" fg:w="1"/><text x="96.6319%" y="511.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (3 samples, 0.07%)</title><rect x="96.3601%" y="517" width="0.0654%" height="15" fill="rgb(250,161,5)" fg:x="4421" fg:w="3"/><text x="96.6101%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.4037%" y="501" width="0.0218%" height="15" fill="rgb(218,225,18)" fg:x="4423" fg:w="1"/><text x="96.6537%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.4255%" y="501" width="0.0218%" height="15" fill="rgb(245,45,42)" fg:x="4424" fg:w="1"/><text x="96.6755%" y="511.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="96.4690%" y="485" width="0.0218%" height="15" fill="rgb(211,115,1)" fg:x="4426" fg:w="1"/><text x="96.7190%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="96.4255%" y="517" width="0.0872%" height="15" fill="rgb(248,133,52)" fg:x="4424" fg:w="4"/><text x="96.6755%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="96.4473%" y="501" width="0.0654%" height="15" fill="rgb(238,100,21)" fg:x="4425" fg:w="3"/><text x="96.6973%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.4908%" y="485" width="0.0218%" height="15" fill="rgb(247,144,11)" fg:x="4427" fg:w="1"/><text x="96.7408%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.4908%" y="469" width="0.0218%" height="15" fill="rgb(206,164,16)" fg:x="4427" fg:w="1"/><text x="96.7408%" y="479.50"></text></g><g><title>rusk-wallet`DYLD-STUB$$operator delete(void*) (1 samples, 0.02%)</title><rect x="96.4908%" y="453" width="0.0218%" height="15" fill="rgb(222,34,3)" fg:x="4427" fg:w="1"/><text x="96.7408%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.04%)</title><rect x="96.5126%" y="485" width="0.0436%" height="15" fill="rgb(248,82,4)" fg:x="4428" fg:w="2"/><text x="96.7626%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.5562%" y="485" width="0.0218%" height="15" fill="rgb(228,81,46)" fg:x="4430" fg:w="1"/><text x="96.8062%" y="495.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="96.6216%" y="469" width="0.0436%" height="15" fill="rgb(227,67,47)" fg:x="4433" fg:w="2"/><text x="96.8716%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="96.6434%" y="453" width="0.0218%" height="15" fill="rgb(215,93,53)" fg:x="4434" fg:w="1"/><text x="96.8934%" y="463.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="96.6434%" y="437" width="0.0218%" height="15" fill="rgb(248,194,39)" fg:x="4434" fg:w="1"/><text x="96.8934%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.6652%" y="469" width="0.0218%" height="15" fill="rgb(215,5,19)" fg:x="4435" fg:w="1"/><text x="96.9152%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="96.7088%" y="421" width="0.0218%" height="15" fill="rgb(226,215,51)" fg:x="4437" fg:w="1"/><text x="96.9588%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="96.6870%" y="453" width="0.0872%" height="15" fill="rgb(225,56,26)" fg:x="4436" fg:w="4"/><text x="96.9370%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="96.6870%" y="437" width="0.0872%" height="15" fill="rgb(222,75,29)" fg:x="4436" fg:w="4"/><text x="96.9370%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="96.7306%" y="421" width="0.0436%" height="15" fill="rgb(236,139,6)" fg:x="4438" fg:w="2"/><text x="96.9806%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::GetStringFromColumnFamilyOptions(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 0.28%)</title><rect x="96.5126%" y="517" width="0.2833%" height="15" fill="rgb(223,137,36)" fg:x="4428" fg:w="13"/><text x="96.7626%" y="527.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 0.28%)</title><rect x="96.5126%" y="501" width="0.2833%" height="15" fill="rgb(226,99,2)" fg:x="4428" fg:w="13"/><text x="96.7626%" y="511.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="96.5780%" y="485" width="0.2180%" height="15" fill="rgb(206,133,23)" fg:x="4431" fg:w="10"/><text x="96.8280%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="96.6870%" y="469" width="0.1090%" height="15" fill="rgb(243,173,15)" fg:x="4436" fg:w="5"/><text x="96.9370%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.7742%" y="453" width="0.0218%" height="15" fill="rgb(228,69,28)" fg:x="4440" fg:w="1"/><text x="97.0242%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="96.7742%" y="437" width="0.0218%" height="15" fill="rgb(212,51,22)" fg:x="4440" fg:w="1"/><text x="97.0242%" y="447.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="96.7960%" y="501" width="0.0218%" height="15" fill="rgb(227,113,0)" fg:x="4441" fg:w="1"/><text x="97.0460%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="96.8178%" y="501" width="0.0218%" height="15" fill="rgb(252,84,27)" fg:x="4442" fg:w="1"/><text x="97.0678%" y="511.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="96.8396%" y="485" width="0.0218%" height="15" fill="rgb(223,145,39)" fg:x="4443" fg:w="1"/><text x="97.0896%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="96.8614%" y="469" width="0.0218%" height="15" fill="rgb(239,219,30)" fg:x="4444" fg:w="1"/><text x="97.1114%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (2 samples, 0.04%)</title><rect x="96.8614%" y="485" width="0.0436%" height="15" fill="rgb(224,196,39)" fg:x="4444" fg:w="2"/><text x="97.1114%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="96.8832%" y="469" width="0.0218%" height="15" fill="rgb(205,35,43)" fg:x="4445" fg:w="1"/><text x="97.1332%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.07%)</title><rect x="96.9050%" y="485" width="0.0654%" height="15" fill="rgb(228,201,21)" fg:x="4446" fg:w="3"/><text x="97.1550%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (2 samples, 0.04%)</title><rect x="96.9704%" y="485" width="0.0436%" height="15" fill="rgb(237,118,16)" fg:x="4449" fg:w="2"/><text x="97.2204%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.0139%" y="485" width="0.0218%" height="15" fill="rgb(241,17,19)" fg:x="4451" fg:w="1"/><text x="97.2639%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="97.0575%" y="437" width="0.0218%" height="15" fill="rgb(214,10,25)" fg:x="4453" fg:w="1"/><text x="97.3075%" y="447.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (3 samples, 0.07%)</title><rect x="97.0357%" y="453" width="0.0654%" height="15" fill="rgb(238,37,29)" fg:x="4452" fg:w="3"/><text x="97.2857%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="97.0793%" y="437" width="0.0218%" height="15" fill="rgb(253,83,25)" fg:x="4454" fg:w="1"/><text x="97.3293%" y="447.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="97.0357%" y="469" width="0.0872%" height="15" fill="rgb(234,192,12)" fg:x="4452" fg:w="4"/><text x="97.2857%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.1011%" y="453" width="0.0218%" height="15" fill="rgb(241,216,45)" fg:x="4455" fg:w="1"/><text x="97.3511%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="97.1229%" y="469" width="0.0436%" height="15" fill="rgb(242,22,33)" fg:x="4456" fg:w="2"/><text x="97.3729%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::LineFileReader::ReadLine(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="97.0357%" y="485" width="0.1526%" height="15" fill="rgb(231,105,49)" fg:x="4452" fg:w="7"/><text x="97.2857%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::SequentialFileReader::Read (1 samples, 0.02%)</title><rect x="97.1665%" y="469" width="0.0218%" height="15" fill="rgb(218,204,15)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::(anonymous namespace)::ReadaheadSequentialFile::Read (1 samples, 0.02%)</title><rect x="97.1665%" y="453" width="0.0218%" height="15" fill="rgb(235,138,41)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::PosixSequentialFile::Read (1 samples, 0.02%)</title><rect x="97.1665%" y="437" width="0.0218%" height="15" fill="rgb(246,0,9)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="447.50"></text></g><g><title>libsystem_c.dylib`fread (1 samples, 0.02%)</title><rect x="97.1665%" y="421" width="0.0218%" height="15" fill="rgb(210,74,4)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="431.50"></text></g><g><title>libsystem_c.dylib`__fread (1 samples, 0.02%)</title><rect x="97.1665%" y="405" width="0.0218%" height="15" fill="rgb(250,60,41)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="415.50"></text></g><g><title>libsystem_c.dylib`__srefill1 (1 samples, 0.02%)</title><rect x="97.1665%" y="389" width="0.0218%" height="15" fill="rgb(220,115,12)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="399.50"></text></g><g><title>libsystem_c.dylib`_sread (1 samples, 0.02%)</title><rect x="97.1665%" y="373" width="0.0218%" height="15" fill="rgb(237,100,13)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__read_nocancel (1 samples, 0.02%)</title><rect x="97.1665%" y="357" width="0.0218%" height="15" fill="rgb(213,55,26)" fg:x="4458" fg:w="1"/><text x="97.4165%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::AdvancedColumnFamilyOptions::~AdvancedColumnFamilyOptions (1 samples, 0.02%)</title><rect x="97.1883%" y="469" width="0.0218%" height="15" fill="rgb(216,17,4)" fg:x="4459" fg:w="1"/><text x="97.4383%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="97.1883%" y="453" width="0.0218%" height="15" fill="rgb(220,153,47)" fg:x="4459" fg:w="1"/><text x="97.4383%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="97.2101%" y="469" width="0.0218%" height="15" fill="rgb(215,131,9)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="97.2101%" y="453" width="0.0218%" height="15" fill="rgb(233,46,42)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (1 samples, 0.02%)</title><rect x="97.2101%" y="437" width="0.0218%" height="15" fill="rgb(226,86,7)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (1 samples, 0.02%)</title><rect x="97.2101%" y="421" width="0.0218%" height="15" fill="rgb(239,226,21)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="97.2101%" y="405" width="0.0218%" height="15" fill="rgb(244,137,22)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="415.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="97.2101%" y="389" width="0.0218%" height="15" fill="rgb(211,139,35)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="97.2101%" y="373" width="0.0218%" height="15" fill="rgb(214,62,50)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="383.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (1 samples, 0.02%)</title><rect x="97.2101%" y="357" width="0.0218%" height="15" fill="rgb(212,113,44)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="367.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="97.2101%" y="341" width="0.0218%" height="15" fill="rgb(226,150,43)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="97.2101%" y="325" width="0.0218%" height="15" fill="rgb(250,71,37)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="97.2101%" y="309" width="0.0218%" height="15" fill="rgb(219,76,19)" fg:x="4460" fg:w="1"/><text x="97.4601%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::~ColumnFamilyOptions (1 samples, 0.02%)</title><rect x="97.2319%" y="469" width="0.0218%" height="15" fill="rgb(250,39,11)" fg:x="4461" fg:w="1"/><text x="97.4819%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="97.2319%" y="453" width="0.0218%" height="15" fill="rgb(230,64,31)" fg:x="4461" fg:w="1"/><text x="97.4819%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (1 samples, 0.02%)</title><rect x="97.2319%" y="437" width="0.0218%" height="15" fill="rgb(208,222,23)" fg:x="4461" fg:w="1"/><text x="97.4819%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (1 samples, 0.02%)</title><rect x="97.2319%" y="421" width="0.0218%" height="15" fill="rgb(227,125,18)" fg:x="4461" fg:w="1"/><text x="97.4819%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (1 samples, 0.02%)</title><rect x="97.2319%" y="405" width="0.0218%" height="15" fill="rgb(234,210,9)" fg:x="4461" fg:w="1"/><text x="97.4819%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (1 samples, 0.02%)</title><rect x="97.2319%" y="389" width="0.0218%" height="15" fill="rgb(217,127,24)" fg:x="4461" fg:w="1"/><text x="97.4819%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="97.2537%" y="453" width="0.0218%" height="15" fill="rgb(239,141,48)" fg:x="4462" fg:w="1"/><text x="97.5037%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="97.2755%" y="421" width="0.0218%" height="15" fill="rgb(227,109,8)" fg:x="4463" fg:w="1"/><text x="97.5255%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::ParseInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.2973%" y="389" width="0.0218%" height="15" fill="rgb(235,184,23)" fg:x="4464" fg:w="1"/><text x="97.5473%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::stoi(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.2973%" y="373" width="0.0218%" height="15" fill="rgb(227,226,48)" fg:x="4464" fg:w="1"/><text x="97.5473%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint32(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.3191%" y="389" width="0.0218%" height="15" fill="rgb(206,150,11)" fg:x="4465" fg:w="1"/><text x="97.5691%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.3191%" y="373" width="0.0218%" height="15" fill="rgb(254,2,33)" fg:x="4465" fg:w="1"/><text x="97.5691%" y="383.50"></text></g><g><title>libsystem_c.dylib`strtoull (1 samples, 0.02%)</title><rect x="97.3191%" y="357" width="0.0218%" height="15" fill="rgb(243,160,20)" fg:x="4465" fg:w="1"/><text x="97.5691%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="97.2973%" y="421" width="0.0654%" height="15" fill="rgb(218,208,30)" fg:x="4464" fg:w="3"/><text x="97.5473%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="97.2973%" y="405" width="0.0654%" height="15" fill="rgb(224,120,49)" fg:x="4464" fg:w="3"/><text x="97.5473%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::Status std::__1::__invoke_void_return_wrapper&lt;rocksdb::Status, false&gt;::__call&lt;rocksdb::OptionTypeInfo rocksdb::OptionTypeInfo::Enum&lt;rocksdb::BlockBasedTableOptions::IndexType&gt;(int, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexType, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::BlockBasedTableOptions::IndexType&gt;&gt;&gt; const*, rocksdb::OptionTypeFlags)::&apos;lambda&apos;(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.3409%" y="389" width="0.0218%" height="15" fill="rgb(246,12,2)" fg:x="4466" fg:w="1"/><text x="97.5909%" y="399.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexType&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexType&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::BlockBasedTableOptions::IndexType&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.3409%" y="373" width="0.0218%" height="15" fill="rgb(236,117,3)" fg:x="4466" fg:w="1"/><text x="97.5909%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.3627%" y="405" width="0.0218%" height="15" fill="rgb(216,128,52)" fg:x="4467" fg:w="1"/><text x="97.6127%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="97.2755%" y="453" width="0.1308%" height="15" fill="rgb(246,145,19)" fg:x="4463" fg:w="6"/><text x="97.5255%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="97.2755%" y="437" width="0.1308%" height="15" fill="rgb(222,11,46)" fg:x="4463" fg:w="6"/><text x="97.5255%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.3627%" y="421" width="0.0436%" height="15" fill="rgb(245,82,36)" fg:x="4467" fg:w="2"/><text x="97.6127%" y="431.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="97.3845%" y="405" width="0.0218%" height="15" fill="rgb(250,73,51)" fg:x="4468" fg:w="1"/><text x="97.6345%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="97.4499%" y="437" width="0.0218%" height="15" fill="rgb(221,189,23)" fg:x="4471" fg:w="1"/><text x="97.6999%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (11 samples, 0.24%)</title><rect x="97.2537%" y="469" width="0.2398%" height="15" fill="rgb(210,33,7)" fg:x="4462" fg:w="11"/><text x="97.5037%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="97.4063%" y="453" width="0.0872%" height="15" fill="rgb(210,107,22)" fg:x="4469" fg:w="4"/><text x="97.6563%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.4717%" y="437" width="0.0218%" height="15" fill="rgb(222,116,37)" fg:x="4472" fg:w="1"/><text x="97.7217%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="97.4935%" y="389" width="0.0218%" height="15" fill="rgb(254,17,48)" fg:x="4473" fg:w="1"/><text x="97.7435%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::ColumnFamilyOptions::operator= (2 samples, 0.04%)</title><rect x="97.4935%" y="453" width="0.0436%" height="15" fill="rgb(224,36,32)" fg:x="4473" fg:w="2"/><text x="97.7435%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (2 samples, 0.04%)</title><rect x="97.4935%" y="437" width="0.0436%" height="15" fill="rgb(232,90,46)" fg:x="4473" fg:w="2"/><text x="97.7435%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::~BlockBasedTableFactory (2 samples, 0.04%)</title><rect x="97.4935%" y="421" width="0.0436%" height="15" fill="rgb(241,66,40)" fg:x="4473" fg:w="2"/><text x="97.7435%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableOptions::~BlockBasedTableOptions (2 samples, 0.04%)</title><rect x="97.4935%" y="405" width="0.0436%" height="15" fill="rgb(249,184,29)" fg:x="4473" fg:w="2"/><text x="97.7435%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::ShardedCache&lt;rocksdb::lru_cache::LRUCacheShard&gt;::~ShardedCache (1 samples, 0.02%)</title><rect x="97.5153%" y="389" width="0.0218%" height="15" fill="rgb(231,181,1)" fg:x="4474" fg:w="1"/><text x="97.7653%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUHandleTable::~LRUHandleTable (1 samples, 0.02%)</title><rect x="97.5153%" y="373" width="0.0218%" height="15" fill="rgb(224,94,2)" fg:x="4474" fg:w="1"/><text x="97.7653%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (2 samples, 0.04%)</title><rect x="97.5371%" y="421" width="0.0436%" height="15" fill="rgb(229,170,15)" fg:x="4475" fg:w="2"/><text x="97.7871%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="97.5806%" y="421" width="0.0218%" height="15" fill="rgb(240,127,35)" fg:x="4477" fg:w="1"/><text x="97.8306%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="97.6024%" y="421" width="0.0436%" height="15" fill="rgb(248,196,34)" fg:x="4478" fg:w="2"/><text x="97.8524%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="97.6460%" y="405" width="0.0218%" height="15" fill="rgb(236,137,7)" fg:x="4480" fg:w="1"/><text x="97.8960%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::CompactionFilter::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.6896%" y="373" width="0.0218%" height="15" fill="rgb(235,127,16)" fg:x="4482" fg:w="1"/><text x="97.9396%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="97.7332%" y="309" width="0.0218%" height="15" fill="rgb(250,192,54)" fg:x="4484" fg:w="1"/><text x="97.9832%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.02%)</title><rect x="97.7550%" y="309" width="0.0218%" height="15" fill="rgb(218,98,20)" fg:x="4485" fg:w="1"/><text x="98.0050%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="97.7768%" y="277" width="0.0218%" height="15" fill="rgb(230,176,47)" fg:x="4486" fg:w="1"/><text x="98.0268%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.02%)</title><rect x="97.7986%" y="277" width="0.0218%" height="15" fill="rgb(244,2,33)" fg:x="4487" fg:w="1"/><text x="98.0486%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.8204%" y="197" width="0.0218%" height="15" fill="rgb(231,100,17)" fg:x="4488" fg:w="1"/><text x="98.0704%" y="207.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.8204%" y="277" width="0.0436%" height="15" fill="rgb(245,23,12)" fg:x="4488" fg:w="2"/><text x="98.0704%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.8204%" y="261" width="0.0436%" height="15" fill="rgb(249,55,22)" fg:x="4488" fg:w="2"/><text x="98.0704%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.8204%" y="245" width="0.0436%" height="15" fill="rgb(207,134,9)" fg:x="4488" fg:w="2"/><text x="98.0704%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (2 samples, 0.04%)</title><rect x="97.8204%" y="229" width="0.0436%" height="15" fill="rgb(218,134,0)" fg:x="4488" fg:w="2"/><text x="98.0704%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.8204%" y="213" width="0.0436%" height="15" fill="rgb(213,212,33)" fg:x="4488" fg:w="2"/><text x="98.0704%" y="223.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.8422%" y="197" width="0.0218%" height="15" fill="rgb(252,106,18)" fg:x="4489" fg:w="1"/><text x="98.0922%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.8422%" y="181" width="0.0218%" height="15" fill="rgb(208,126,42)" fg:x="4489" fg:w="1"/><text x="98.0922%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="97.8422%" y="165" width="0.0218%" height="15" fill="rgb(246,175,29)" fg:x="4489" fg:w="1"/><text x="98.0922%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="97.8422%" y="149" width="0.0218%" height="15" fill="rgb(215,13,50)" fg:x="4489" fg:w="1"/><text x="98.0922%" y="159.50"></text></g><g><title>rusk-wallet`rocksdb::FlushBlockPolicyFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="97.8640%" y="229" width="0.0218%" height="15" fill="rgb(216,172,15)" fg:x="4490" fg:w="1"/><text x="98.1140%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewSharedObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="97.8640%" y="213" width="0.0218%" height="15" fill="rgb(212,103,13)" fg:x="4490" fg:w="1"/><text x="98.1140%" y="223.50"></text></g><g><title>rusk-wallet`rocksdb::Status rocksdb::ObjectRegistry::NewObject&lt;rocksdb::FlushBlockPolicyFactory&gt;(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, rocksdb::FlushBlockPolicyFactory**, std::__1::unique_ptr&lt;rocksdb::FlushBlockPolicyFactory, std::__1::default_delete (1 samples, 0.02%)</title><rect x="97.8640%" y="197" width="0.0218%" height="15" fill="rgb(231,171,36)" fg:x="4490" fg:w="1"/><text x="98.1140%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::mutex::unlock (1 samples, 0.02%)</title><rect x="97.8640%" y="181" width="0.0218%" height="15" fill="rgb(250,123,20)" fg:x="4490" fg:w="1"/><text x="98.1140%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="97.8640%" y="165" width="0.0218%" height="15" fill="rgb(212,53,50)" fg:x="4490" fg:w="1"/><text x="98.1140%" y="175.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.8640%" y="277" width="0.0436%" height="15" fill="rgb(243,54,12)" fg:x="4490" fg:w="2"/><text x="98.1140%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::ParseOption(rocksdb::ConfigOptions const&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.8640%" y="261" width="0.0436%" height="15" fill="rgb(234,101,34)" fg:x="4490" fg:w="2"/><text x="98.1140%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.8640%" y="245" width="0.0436%" height="15" fill="rgb(254,67,22)" fg:x="4490" fg:w="2"/><text x="98.1140%" y="255.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.8858%" y="229" width="0.0218%" height="15" fill="rgb(250,35,47)" fg:x="4491" fg:w="1"/><text x="98.1358%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionName(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.9076%" y="277" width="0.0218%" height="15" fill="rgb(226,126,38)" fg:x="4492" fg:w="1"/><text x="98.1576%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;false&gt; (1 samples, 0.02%)</title><rect x="97.9294%" y="261" width="0.0218%" height="15" fill="rgb(216,138,53)" fg:x="4493" fg:w="1"/><text x="98.1794%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (9 samples, 0.20%)</title><rect x="97.7768%" y="293" width="0.1962%" height="15" fill="rgb(246,199,43)" fg:x="4486" fg:w="9"/><text x="98.0268%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="97.9294%" y="277" width="0.0436%" height="15" fill="rgb(232,125,11)" fg:x="4493" fg:w="2"/><text x="98.1794%" y="287.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="97.9512%" y="261" width="0.0218%" height="15" fill="rgb(218,219,45)" fg:x="4494" fg:w="1"/><text x="98.2012%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (10 samples, 0.22%)</title><rect x="97.7768%" y="309" width="0.2180%" height="15" fill="rgb(216,102,54)" fg:x="4486" fg:w="10"/><text x="98.0268%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="97.9730%" y="293" width="0.0218%" height="15" fill="rgb(250,228,7)" fg:x="4495" fg:w="1"/><text x="98.2230%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="97.9948%" y="293" width="0.0218%" height="15" fill="rgb(226,125,25)" fg:x="4496" fg:w="1"/><text x="98.2448%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="97.9948%" y="277" width="0.0218%" height="15" fill="rgb(224,165,27)" fg:x="4496" fg:w="1"/><text x="98.2448%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="97.9948%" y="261" width="0.0218%" height="15" fill="rgb(233,86,3)" fg:x="4496" fg:w="1"/><text x="98.2448%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="98.0166%" y="293" width="0.0436%" height="15" fill="rgb(228,116,20)" fg:x="4497" fg:w="2"/><text x="98.2666%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::ConfigureNewObject(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (17 samples, 0.37%)</title><rect x="97.7332%" y="341" width="0.3705%" height="15" fill="rgb(209,192,17)" fg:x="4484" fg:w="17"/><text x="97.9832%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (17 samples, 0.37%)</title><rect x="97.7332%" y="325" width="0.3705%" height="15" fill="rgb(224,88,34)" fg:x="4484" fg:w="17"/><text x="97.9832%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="97.9948%" y="309" width="0.1090%" height="15" fill="rgb(233,38,6)" fg:x="4496" fg:w="5"/><text x="98.2448%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="98.0602%" y="293" width="0.0436%" height="15" fill="rgb(212,59,30)" fg:x="4499" fg:w="2"/><text x="98.3102%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::operator=(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.1255%" y="325" width="0.0218%" height="15" fill="rgb(213,80,3)" fg:x="4502" fg:w="1"/><text x="98.3755%" y="335.50"></text></g><g><title>libc+ (1 samples, 0.02%)</title><rect x="98.1473%" y="309" width="0.0218%" height="15" fill="rgb(251,178,7)" fg:x="4503" fg:w="1"/><text x="98.3973%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="98.1691%" y="293" width="0.0218%" height="15" fill="rgb(213,154,26)" fg:x="4504" fg:w="1"/><text x="98.4191%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="98.1691%" y="277" width="0.0218%" height="15" fill="rgb(238,165,49)" fg:x="4504" fg:w="1"/><text x="98.4191%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.1691%" y="261" width="0.0218%" height="15" fill="rgb(248,91,46)" fg:x="4504" fg:w="1"/><text x="98.4191%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="98.1909%" y="293" width="0.0218%" height="15" fill="rgb(244,21,52)" fg:x="4505" fg:w="1"/><text x="98.4409%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.2127%" y="277" width="0.0218%" height="15" fill="rgb(247,122,20)" fg:x="4506" fg:w="1"/><text x="98.4627%" y="287.50"></text></g><g><title>rusk-wallet`rocksdb::EndsWith(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.2127%" y="261" width="0.0218%" height="15" fill="rgb(218,27,9)" fg:x="4506" fg:w="1"/><text x="98.4627%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::GetOptionString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (6 samples, 0.13%)</title><rect x="98.1473%" y="325" width="0.1308%" height="15" fill="rgb(246,7,6)" fg:x="4503" fg:w="6"/><text x="98.3973%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.11%)</title><rect x="98.1691%" y="309" width="0.1090%" height="15" fill="rgb(227,135,54)" fg:x="4504" fg:w="5"/><text x="98.4191%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="98.2127%" y="293" width="0.0654%" height="15" fill="rgb(247,14,11)" fg:x="4506" fg:w="3"/><text x="98.4627%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="98.2345%" y="277" width="0.0436%" height="15" fill="rgb(206,149,34)" fg:x="4507" fg:w="2"/><text x="98.4845%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.02%)</title><rect x="98.2563%" y="261" width="0.0218%" height="15" fill="rgb(227,228,4)" fg:x="4508" fg:w="1"/><text x="98.5063%" y="271.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="98.2781%" y="325" width="0.0654%" height="15" fill="rgb(238,218,28)" fg:x="4509" fg:w="3"/><text x="98.5281%" y="335.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.3217%" y="309" width="0.0218%" height="15" fill="rgb(252,86,40)" fg:x="4511" fg:w="1"/><text x="98.5717%" y="319.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.3435%" y="325" width="0.0218%" height="15" fill="rgb(251,225,11)" fg:x="4512" fg:w="1"/><text x="98.5935%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.3435%" y="309" width="0.0218%" height="15" fill="rgb(206,46,49)" fg:x="4512" fg:w="1"/><text x="98.5935%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::GetOptionsMap(rocksdb::ConfigOptions const&amp;, rocksdb::Customizable const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (13 samples, 0.28%)</title><rect x="98.1037%" y="341" width="0.2833%" height="15" fill="rgb(245,128,24)" fg:x="4501" fg:w="13"/><text x="98.3537%" y="351.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::~unordered_map[abi:v15006] (1 samples, 0.02%)</title><rect x="98.3653%" y="325" width="0.0218%" height="15" fill="rgb(219,177,34)" fg:x="4513" fg:w="1"/><text x="98.6153%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="98.3653%" y="309" width="0.0218%" height="15" fill="rgb(218,60,48)" fg:x="4513" fg:w="1"/><text x="98.6153%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (32 samples, 0.70%)</title><rect x="97.7114%" y="357" width="0.6975%" height="15" fill="rgb(221,11,5)" fg:x="4483" fg:w="32"/><text x="97.9614%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::LoadFactory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (1 samples, 0.02%)</title><rect x="98.3871%" y="341" width="0.0218%" height="15" fill="rgb(220,148,13)" fg:x="4514" fg:w="1"/><text x="98.6371%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureCustomizableOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (34 samples, 0.74%)</title><rect x="97.6896%" y="389" width="0.7411%" height="15" fill="rgb(210,16,3)" fg:x="4482" fg:w="34"/><text x="97.9396%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (33 samples, 0.72%)</title><rect x="97.7114%" y="373" width="0.7193%" height="15" fill="rgb(236,80,2)" fg:x="4483" fg:w="33"/><text x="97.9614%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.4089%" y="357" width="0.0218%" height="15" fill="rgb(239,129,19)" fg:x="4515" fg:w="1"/><text x="98.6589%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="98.4089%" y="341" width="0.0218%" height="15" fill="rgb(220,106,35)" fg:x="4515" fg:w="1"/><text x="98.6589%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOption(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, rocksdb::OptionTypeInfo const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.4307%" y="389" width="0.0218%" height="15" fill="rgb(252,139,45)" fg:x="4516" fg:w="1"/><text x="98.6807%" y="399.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="98.4525%" y="373" width="0.0218%" height="15" fill="rgb(229,8,36)" fg:x="4517" fg:w="1"/><text x="98.7025%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.02%)</title><rect x="98.4743%" y="373" width="0.0218%" height="15" fill="rgb(230,126,33)" fg:x="4518" fg:w="1"/><text x="98.7243%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="98.4743%" y="357" width="0.0218%" height="15" fill="rgb(239,140,21)" fg:x="4518" fg:w="1"/><text x="98.7243%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.4743%" y="341" width="0.0218%" height="15" fill="rgb(254,104,9)" fg:x="4518" fg:w="1"/><text x="98.7243%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="98.4525%" y="389" width="0.0872%" height="15" fill="rgb(239,52,14)" fg:x="4517" fg:w="4"/><text x="98.7025%" y="399.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (2 samples, 0.04%)</title><rect x="98.4961%" y="373" width="0.0436%" height="15" fill="rgb(208,227,44)" fg:x="4519" fg:w="2"/><text x="98.7461%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="98.5615%" y="373" width="0.0436%" height="15" fill="rgb(246,18,19)" fg:x="4522" fg:w="2"/><text x="98.8115%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (2 samples, 0.04%)</title><rect x="98.5615%" y="357" width="0.0436%" height="15" fill="rgb(235,228,25)" fg:x="4522" fg:w="2"/><text x="98.8115%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="98.5615%" y="341" width="0.0436%" height="15" fill="rgb(240,156,20)" fg:x="4522" fg:w="2"/><text x="98.8115%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.5833%" y="325" width="0.0218%" height="15" fill="rgb(224,8,20)" fg:x="4523" fg:w="1"/><text x="98.8333%" y="335.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::find (1 samples, 0.02%)</title><rect x="98.5833%" y="309" width="0.0218%" height="15" fill="rgb(214,12,52)" fg:x="4523" fg:w="1"/><text x="98.8333%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::ParseUint64(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.6051%" y="373" width="0.0218%" height="15" fill="rgb(211,220,47)" fg:x="4524" fg:w="1"/><text x="98.8551%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__error (1 samples, 0.02%)</title><rect x="98.6051%" y="357" width="0.0218%" height="15" fill="rgb(250,173,5)" fg:x="4524" fg:w="1"/><text x="98.8551%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="98.6269%" y="373" width="0.0654%" height="15" fill="rgb(250,125,52)" fg:x="4525" fg:w="3"/><text x="98.8769%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="98.6704%" y="357" width="0.0218%" height="15" fill="rgb(209,133,18)" fg:x="4527" fg:w="1"/><text x="98.9204%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by (1 samples, 0.02%)</title><rect x="98.6704%" y="341" width="0.0218%" height="15" fill="rgb(216,173,22)" fg:x="4527" fg:w="1"/><text x="98.9204%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.6704%" y="325" width="0.0218%" height="15" fill="rgb(205,3,22)" fg:x="4527" fg:w="1"/><text x="98.9204%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (48 samples, 1.05%)</title><rect x="97.6678%" y="405" width="1.0462%" height="15" fill="rgb(248,22,20)" fg:x="4481" fg:w="48"/><text x="97.9178%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="98.5397%" y="389" width="0.1744%" height="15" fill="rgb(233,6,29)" fg:x="4521" fg:w="8"/><text x="98.7897%" y="399.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::$_0, std::__1::allocator&lt;rocksdb::$_0&gt;, rocksdb::Status (rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void*)&gt;::operator()(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.6922%" y="373" width="0.0218%" height="15" fill="rgb(240,22,54)" fg:x="4528" fg:w="1"/><text x="98.9422%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.6922%" y="357" width="0.0218%" height="15" fill="rgb(231,133,32)" fg:x="4528" fg:w="1"/><text x="98.9422%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::ParseType(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void*, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="98.6922%" y="341" width="0.0218%" height="15" fill="rgb(248,193,4)" fg:x="4528" fg:w="1"/><text x="98.9422%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::StringToMap(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.6922%" y="325" width="0.0218%" height="15" fill="rgb(211,178,46)" fg:x="4528" fg:w="1"/><text x="98.9422%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::NextToken(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, char, unsigned long, unsigned long*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.6922%" y="309" width="0.0218%" height="15" fill="rgb(224,5,42)" fg:x="4528" fg:w="1"/><text x="98.9422%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::trim(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="98.6922%" y="293" width="0.0218%" height="15" fill="rgb(239,176,25)" fg:x="4528" fg:w="1"/><text x="98.9422%" y="303.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="98.7140%" y="341" width="0.0218%" height="15" fill="rgb(245,187,50)" fg:x="4529" fg:w="1"/><text x="98.9640%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="98.7140%" y="325" width="0.0218%" height="15" fill="rgb(248,24,15)" fg:x="4529" fg:w="1"/><text x="98.9640%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="98.7140%" y="309" width="0.0218%" height="15" fill="rgb(205,166,13)" fg:x="4529" fg:w="1"/><text x="98.9640%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="98.7140%" y="373" width="0.0436%" height="15" fill="rgb(208,114,23)" fg:x="4529" fg:w="2"/><text x="98.9640%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (2 samples, 0.04%)</title><rect x="98.7140%" y="357" width="0.0436%" height="15" fill="rgb(239,127,18)" fg:x="4529" fg:w="2"/><text x="98.9640%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.7358%" y="341" width="0.0218%" height="15" fill="rgb(219,154,28)" fg:x="4530" fg:w="1"/><text x="98.9858%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (53 samples, 1.16%)</title><rect x="97.6460%" y="421" width="1.1552%" height="15" fill="rgb(225,157,23)" fg:x="4480" fg:w="53"/><text x="97.8960%" y="431.50"></text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (4 samples, 0.09%)</title><rect x="98.7140%" y="405" width="0.0872%" height="15" fill="rgb(219,8,6)" fg:x="4529" fg:w="4"/><text x="98.9640%" y="415.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="98.7140%" y="389" width="0.0872%" height="15" fill="rgb(212,47,6)" fg:x="4529" fg:w="4"/><text x="98.9640%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.04%)</title><rect x="98.7576%" y="373" width="0.0436%" height="15" fill="rgb(224,190,4)" fg:x="4531" fg:w="2"/><text x="99.0076%" y="383.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="98.8230%" y="405" width="0.0218%" height="15" fill="rgb(239,183,29)" fg:x="4534" fg:w="1"/><text x="99.0730%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (3 samples, 0.07%)</title><rect x="98.8448%" y="405" width="0.0654%" height="15" fill="rgb(213,57,7)" fg:x="4535" fg:w="3"/><text x="99.0948%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.04%)</title><rect x="98.8666%" y="389" width="0.0436%" height="15" fill="rgb(216,148,1)" fg:x="4536" fg:w="2"/><text x="99.1166%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="98.9102%" y="405" width="0.0218%" height="15" fill="rgb(236,182,29)" fg:x="4538" fg:w="1"/><text x="99.1602%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="98.9320%" y="405" width="0.0218%" height="15" fill="rgb(244,120,48)" fg:x="4539" fg:w="1"/><text x="99.1820%" y="415.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.02%)</title><rect x="98.9974%" y="389" width="0.0218%" height="15" fill="rgb(206,71,34)" fg:x="4542" fg:w="1"/><text x="99.2474%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="99.0192%" y="325" width="0.0218%" height="15" fill="rgb(242,32,6)" fg:x="4543" fg:w="1"/><text x="99.2692%" y="335.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="99.0410%" y="309" width="0.0218%" height="15" fill="rgb(241,35,3)" fg:x="4544" fg:w="1"/><text x="99.2910%" y="319.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (2 samples, 0.04%)</title><rect x="99.0846%" y="293" width="0.0436%" height="15" fill="rgb(222,62,19)" fg:x="4546" fg:w="2"/><text x="99.3346%" y="303.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.02%)</title><rect x="99.1064%" y="277" width="0.0218%" height="15" fill="rgb(223,110,41)" fg:x="4547" fg:w="1"/><text x="99.3564%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (4 samples, 0.09%)</title><rect x="99.0628%" y="309" width="0.0872%" height="15" fill="rgb(208,224,4)" fg:x="4545" fg:w="4"/><text x="99.3128%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.1282%" y="293" width="0.0218%" height="15" fill="rgb(241,137,19)" fg:x="4548" fg:w="1"/><text x="99.3782%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.1500%" y="293" width="0.0218%" height="15" fill="rgb(244,24,17)" fg:x="4549" fg:w="1"/><text x="99.4000%" y="303.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.1500%" y="277" width="0.0218%" height="15" fill="rgb(245,178,49)" fg:x="4549" fg:w="1"/><text x="99.4000%" y="287.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="99.1500%" y="261" width="0.0218%" height="15" fill="rgb(219,160,38)" fg:x="4549" fg:w="1"/><text x="99.4000%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="99.1500%" y="245" width="0.0218%" height="15" fill="rgb(228,137,14)" fg:x="4549" fg:w="1"/><text x="99.4000%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.1500%" y="229" width="0.0218%" height="15" fill="rgb(237,134,11)" fg:x="4549" fg:w="1"/><text x="99.4000%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString (8 samples, 0.17%)</title><rect x="99.0192%" y="389" width="0.1744%" height="15" fill="rgb(211,126,44)" fg:x="4543" fg:w="8"/><text x="99.2692%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ToString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="99.0192%" y="373" width="0.1744%" height="15" fill="rgb(226,171,33)" fg:x="4543" fg:w="8"/><text x="99.2692%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::Customizable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="99.0192%" y="357" width="0.1744%" height="15" fill="rgb(253,99,13)" fg:x="4543" fg:w="8"/><text x="99.2692%" y="367.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::SerializeOptions(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (8 samples, 0.17%)</title><rect x="99.0192%" y="341" width="0.1744%" height="15" fill="rgb(244,48,7)" fg:x="4543" fg:w="8"/><text x="99.2692%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="99.0410%" y="325" width="0.1526%" height="15" fill="rgb(244,217,54)" fg:x="4544" fg:w="7"/><text x="99.2910%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="99.1500%" y="309" width="0.0436%" height="15" fill="rgb(224,15,18)" fg:x="4549" fg:w="2"/><text x="99.4000%" y="319.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.1718%" y="293" width="0.0218%" height="15" fill="rgb(244,99,12)" fg:x="4550" fg:w="1"/><text x="99.4218%" y="303.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (1 samples, 0.02%)</title><rect x="99.1718%" y="277" width="0.0218%" height="15" fill="rgb(233,226,8)" fg:x="4550" fg:w="1"/><text x="99.4218%" y="287.50"></text></g><g><title>libsystem_c.dylib`snprintf (1 samples, 0.02%)</title><rect x="99.1718%" y="261" width="0.0218%" height="15" fill="rgb(229,211,3)" fg:x="4550" fg:w="1"/><text x="99.4218%" y="271.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.02%)</title><rect x="99.1718%" y="245" width="0.0218%" height="15" fill="rgb(216,140,21)" fg:x="4550" fg:w="1"/><text x="99.4218%" y="255.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.02%)</title><rect x="99.1718%" y="229" width="0.0218%" height="15" fill="rgb(234,122,30)" fg:x="4550" fg:w="1"/><text x="99.4218%" y="239.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeStruct(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.1935%" y="389" width="0.0218%" height="15" fill="rgb(236,25,46)" fg:x="4551" fg:w="1"/><text x="99.4435%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::SerializeType(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.1935%" y="373" width="0.0218%" height="15" fill="rgb(217,52,54)" fg:x="4551" fg:w="1"/><text x="99.4435%" y="383.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.02%)</title><rect x="99.1935%" y="357" width="0.0218%" height="15" fill="rgb(222,29,26)" fg:x="4551" fg:w="1"/><text x="99.4435%" y="367.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.02%)</title><rect x="99.1935%" y="341" width="0.0218%" height="15" fill="rgb(216,177,29)" fg:x="4551" fg:w="1"/><text x="99.4435%" y="351.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.02%)</title><rect x="99.2371%" y="325" width="0.0218%" height="15" fill="rgb(247,136,51)" fg:x="4553" fg:w="1"/><text x="99.4871%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (80 samples, 1.74%)</title><rect x="97.5371%" y="437" width="1.7437%" height="15" fill="rgb(231,47,47)" fg:x="4475" fg:w="80"/><text x="97.7871%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::SerializeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (22 samples, 0.48%)</title><rect x="98.8012%" y="421" width="0.4795%" height="15" fill="rgb(211,192,36)" fg:x="4533" fg:w="22"/><text x="99.0512%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Serialize(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, void const*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 0.33%)</title><rect x="98.9538%" y="405" width="0.3269%" height="15" fill="rgb(229,156,32)" fg:x="4540" fg:w="15"/><text x="99.2038%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::SerializeSingleOptionHelper(void const*, rocksdb::OptionType, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="99.2153%" y="389" width="0.0654%" height="15" fill="rgb(248,213,20)" fg:x="4552" fg:w="3"/><text x="99.4653%" y="399.50"></text></g><g><title>libc++.1.dylib`std::__1::to_string (3 samples, 0.07%)</title><rect x="99.2153%" y="373" width="0.0654%" height="15" fill="rgb(217,64,7)" fg:x="4552" fg:w="3"/><text x="99.4653%" y="383.50"></text></g><g><title>libsystem_c.dylib`snprintf (3 samples, 0.07%)</title><rect x="99.2153%" y="357" width="0.0654%" height="15" fill="rgb(232,142,8)" fg:x="4552" fg:w="3"/><text x="99.4653%" y="367.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (2 samples, 0.04%)</title><rect x="99.2371%" y="341" width="0.0436%" height="15" fill="rgb(224,92,44)" fg:x="4553" fg:w="2"/><text x="99.4871%" y="351.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.02%)</title><rect x="99.2589%" y="325" width="0.0218%" height="15" fill="rgb(214,169,17)" fg:x="4554" fg:w="1"/><text x="99.5089%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.2589%" y="309" width="0.0218%" height="15" fill="rgb(210,59,37)" fg:x="4554" fg:w="1"/><text x="99.5089%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="99.3243%" y="421" width="0.0218%" height="15" fill="rgb(214,116,48)" fg:x="4557" fg:w="1"/><text x="99.5743%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::PrepareOptions (4 samples, 0.09%)</title><rect x="99.2807%" y="437" width="0.0872%" height="15" fill="rgb(244,191,6)" fg:x="4555" fg:w="4"/><text x="99.5307%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Prepare(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.3461%" y="421" width="0.0218%" height="15" fill="rgb(241,50,52)" fg:x="4558" fg:w="1"/><text x="99.5961%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (85 samples, 1.85%)</title><rect x="97.5371%" y="453" width="1.8527%" height="15" fill="rgb(236,75,39)" fg:x="4475" fg:w="85"/><text x="97.7871%" y="463.50">r..</text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::OptionTypeInfo (1 samples, 0.02%)</title><rect x="99.3679%" y="437" width="0.0218%" height="15" fill="rgb(236,99,0)" fg:x="4559" fg:w="1"/><text x="99.6179%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::GetColumnFamilyOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::ColumnFamilyOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (88 samples, 1.92%)</title><rect x="97.4935%" y="469" width="1.9180%" height="15" fill="rgb(207,202,15)" fg:x="4473" fg:w="88"/><text x="97.7435%" y="479.50">r..</text></g><g><title>rusk-wallet`rocksdb::ConfigurableCFOptions::~ConfigurableCFOptions (1 samples, 0.02%)</title><rect x="99.3897%" y="453" width="0.0218%" height="15" fill="rgb(233,207,14)" fg:x="4560" fg:w="1"/><text x="99.6397%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableMutableCFOptions::~ConfigurableMutableCFOptions (1 samples, 0.02%)</title><rect x="99.3897%" y="437" width="0.0218%" height="15" fill="rgb(226,27,51)" fg:x="4560" fg:w="1"/><text x="99.6397%" y="447.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.02%)</title><rect x="99.3897%" y="421" width="0.0218%" height="15" fill="rgb(206,104,42)" fg:x="4560" fg:w="1"/><text x="99.6397%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::GetDBOptionsFromMap(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.4115%" y="469" width="0.0218%" height="15" fill="rgb(212,225,4)" fg:x="4561" fg:w="1"/><text x="99.6615%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::DBOptionsConfigurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="99.4115%" y="453" width="0.0218%" height="15" fill="rgb(233,96,42)" fg:x="4561" fg:w="1"/><text x="99.6615%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::Configurable::ConfigureOptions(rocksdb::ConfigOptions const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to (1 samples, 0.02%)</title><rect x="99.4115%" y="437" width="0.0218%" height="15" fill="rgb(229,21,32)" fg:x="4561" fg:w="1"/><text x="99.6615%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.4115%" y="421" width="0.0218%" height="15" fill="rgb(226,216,24)" fg:x="4561" fg:w="1"/><text x="99.6615%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::ConfigurableHelper::ConfigureSomeOptions(rocksdb::ConfigOptions const&amp;, rocksdb::Configurable&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.4115%" y="405" width="0.0218%" height="15" fill="rgb(221,163,17)" fg:x="4561" fg:w="1"/><text x="99.6615%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::OptionTypeInfo::Find(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, rocksdb::OptionTypeInfo&gt;&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.4115%" y="389" width="0.0218%" height="15" fill="rgb(216,216,42)" fg:x="4561" fg:w="1"/><text x="99.6615%" y="399.50"></text></g><g><title>rusk-wallet`std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, void*&gt;*&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::OptionTypeInfo&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="99.4115%" y="373" width="0.0218%" height="15" fill="rgb(240,118,7)" fg:x="4561" fg:w="1"/><text x="99.6615%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="99.4333%" y="357" width="0.0218%" height="15" fill="rgb(221,67,37)" fg:x="4562" fg:w="1"/><text x="99.6833%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.4551%" y="325" width="0.0218%" height="15" fill="rgb(241,32,44)" fg:x="4563" fg:w="1"/><text x="99.7051%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::TableFactory::CreateFromString(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="99.4333%" y="469" width="0.0654%" height="15" fill="rgb(235,204,43)" fg:x="4562" fg:w="3"/><text x="99.6833%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::LoadFactory(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="99.4333%" y="453" width="0.0654%" height="15" fill="rgb(213,116,10)" fg:x="4562" fg:w="3"/><text x="99.6833%" y="463.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::BlockBasedTableFactory (3 samples, 0.07%)</title><rect x="99.4333%" y="437" width="0.0654%" height="15" fill="rgb(239,15,48)" fg:x="4562" fg:w="3"/><text x="99.6833%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::BlockBasedTableFactory::InitializeOptions (3 samples, 0.07%)</title><rect x="99.4333%" y="421" width="0.0654%" height="15" fill="rgb(207,123,36)" fg:x="4562" fg:w="3"/><text x="99.6833%" y="431.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache (3 samples, 0.07%)</title><rect x="99.4333%" y="405" width="0.0654%" height="15" fill="rgb(209,103,30)" fg:x="4562" fg:w="3"/><text x="99.6833%" y="415.50"></text></g><g><title>rusk-wallet`rocksdb::NewLRUCache(unsigned long, int, bool, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="99.4333%" y="389" width="0.0654%" height="15" fill="rgb(238,100,19)" fg:x="4562" fg:w="3"/><text x="99.6833%" y="399.50"></text></g><g><title>rusk-wallet`std::__1::__shared_ptr_emplace&lt;rocksdb::lru_cache::LRUCache, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;&gt;::__shared_ptr_emplace[abi:v15006]&lt;unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt; const&amp;&gt;(std::__1::allocator&lt;rocksdb::lru_cache::LRUCache&gt;, unsigned long&amp;, int&amp;, bool&amp;, double&amp;, double&amp;, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;&amp;&amp;, bool&amp;, rocksdb::CacheMetadataChargePolicy&amp;, std::__1::shared_ptr (3 samples, 0.07%)</title><rect x="99.4333%" y="373" width="0.0654%" height="15" fill="rgb(244,30,14)" fg:x="4562" fg:w="3"/><text x="99.6833%" y="383.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr (2 samples, 0.04%)</title><rect x="99.4551%" y="357" width="0.0436%" height="15" fill="rgb(249,174,6)" fg:x="4563" fg:w="2"/><text x="99.7051%" y="367.50"></text></g><g><title>rusk-wallet`std::__1::__function::__func&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2, std::__1::allocator&lt;rocksdb::lru_cache::LRUCache::LRUCache(unsigned long, int, bool, double, double, std::__1::shared_ptr&lt;rocksdb::MemoryAllocator&gt;, bool, rocksdb::CacheMetadataChargePolicy, std::__1::shared_ptr&lt;rocksdb::SecondaryCache&gt;)::$_2&gt;, void (rocksdb::lru_cache::LRUCacheShard*)&gt;::operator() (2 samples, 0.04%)</title><rect x="99.4551%" y="341" width="0.0436%" height="15" fill="rgb(235,213,41)" fg:x="4563" fg:w="2"/><text x="99.7051%" y="351.50"></text></g><g><title>rusk-wallet`rocksdb::lru_cache::LRUCacheShard::SetCapacity (1 samples, 0.02%)</title><rect x="99.4769%" y="325" width="0.0218%" height="15" fill="rgb(213,118,6)" fg:x="4564" fg:w="1"/><text x="99.7269%" y="335.50"></text></g><g><title>rusk-wallet`rocksdb::port::Mutex::Lock (1 samples, 0.02%)</title><rect x="99.4769%" y="309" width="0.0218%" height="15" fill="rgb(235,44,51)" fg:x="4564" fg:w="1"/><text x="99.7269%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (1 samples, 0.02%)</title><rect x="99.4769%" y="293" width="0.0218%" height="15" fill="rgb(217,9,53)" fg:x="4564" fg:w="1"/><text x="99.7269%" y="303.50"></text></g><g><title>rusk-wallet`std::__1::__murmur2_or_cityhash&lt;unsigned long, 64ul&gt;::operator() (1 samples, 0.02%)</title><rect x="99.4987%" y="453" width="0.0218%" height="15" fill="rgb(237,172,34)" fg:x="4565" fg:w="1"/><text x="99.7487%" y="463.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.5423%" y="437" width="0.0218%" height="15" fill="rgb(206,206,11)" fg:x="4567" fg:w="1"/><text x="99.7923%" y="447.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="99.5423%" y="421" width="0.0218%" height="15" fill="rgb(214,149,29)" fg:x="4567" fg:w="1"/><text x="99.7923%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.5423%" y="405" width="0.0218%" height="15" fill="rgb(208,123,3)" fg:x="4567" fg:w="1"/><text x="99.7923%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.5641%" y="437" width="0.0218%" height="15" fill="rgb(229,126,4)" fg:x="4568" fg:w="1"/><text x="99.8141%" y="447.50"></text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (4 samples, 0.09%)</title><rect x="99.5205%" y="453" width="0.0872%" height="15" fill="rgb(222,92,36)" fg:x="4566" fg:w="4"/><text x="99.7705%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.5859%" y="437" width="0.0218%" height="15" fill="rgb(216,39,41)" fg:x="4569" fg:w="1"/><text x="99.8359%" y="447.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::EndSection(rocksdb::ConfigOptions const&amp;, rocksdb::OptionSection, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (112 samples, 2.44%)</title><rect x="97.1883%" y="485" width="2.4412%" height="15" fill="rgb(253,127,28)" fg:x="4459" fg:w="112"/><text x="97.4383%" y="495.50">ru..</text></g><g><title>rusk-wallet`std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;::unordered_map(std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits (6 samples, 0.13%)</title><rect x="99.4987%" y="469" width="0.1308%" height="15" fill="rgb(249,152,51)" fg:x="4565" fg:w="6"/><text x="99.7487%" y="479.50"></text></g><g><title>rusk-wallet`void std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, true&gt;, std::__1::__unordered_map_equal&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, rocksdb::ColumnFamilyOptions&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.6077%" y="453" width="0.0218%" height="15" fill="rgb(209,123,42)" fg:x="4570" fg:w="1"/><text x="99.8577%" y="463.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.02%)</title><rect x="99.6077%" y="437" width="0.0218%" height="15" fill="rgb(241,118,22)" fg:x="4570" fg:w="1"/><text x="99.8577%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6077%" y="421" width="0.0218%" height="15" fill="rgb(208,25,7)" fg:x="4570" fg:w="1"/><text x="99.8577%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6077%" y="405" width="0.0218%" height="15" fill="rgb(243,144,39)" fg:x="4570" fg:w="1"/><text x="99.8577%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.6077%" y="389" width="0.0218%" height="15" fill="rgb(250,50,5)" fg:x="4570" fg:w="1"/><text x="99.8577%" y="399.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseSection(rocksdb::OptionSection*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.6295%" y="485" width="0.0218%" height="15" fill="rgb(207,67,11)" fg:x="4571" fg:w="1"/><text x="99.8795%" y="495.50"></text></g><g><title>rusk-wallet`rocksdb::UnescapeOptionString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.6295%" y="469" width="0.0218%" height="15" fill="rgb(245,204,40)" fg:x="4571" fg:w="1"/><text x="99.8795%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.02%)</title><rect x="99.6295%" y="453" width="0.0218%" height="15" fill="rgb(238,228,24)" fg:x="4571" fg:w="1"/><text x="99.8795%" y="463.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const&amp;, unsigned long, unsigned long, std::__1::allocator (3 samples, 0.07%)</title><rect x="99.6949%" y="469" width="0.0654%" height="15" fill="rgb(217,116,22)" fg:x="4574" fg:w="3"/><text x="99.9449%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.04%)</title><rect x="99.7167%" y="453" width="0.0436%" height="15" fill="rgb(234,98,12)" fg:x="4575" fg:w="2"/><text x="99.9667%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="99.7602%" y="469" width="0.0218%" height="15" fill="rgb(242,170,50)" fg:x="4577" fg:w="1"/><text x="100.0102%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::ParseStatement(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (7 samples, 0.15%)</title><rect x="99.6513%" y="485" width="0.1526%" height="15" fill="rgb(235,7,5)" fg:x="4572" fg:w="7"/><text x="99.9013%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.7820%" y="469" width="0.0218%" height="15" fill="rgb(241,114,28)" fg:x="4578" fg:w="1"/><text x="100.0320%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::TrimAndRemoveComment(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.04%)</title><rect x="99.8038%" y="485" width="0.0436%" height="15" fill="rgb(246,112,42)" fg:x="4579" fg:w="2"/><text x="100.0538%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memchr (2 samples, 0.04%)</title><rect x="99.8038%" y="469" width="0.0436%" height="15" fill="rgb(248,228,14)" fg:x="4579" fg:w="2"/><text x="100.0538%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.02%)</title><rect x="99.8474%" y="469" width="0.0218%" height="15" fill="rgb(208,133,18)" fg:x="4581" fg:w="1"/><text x="100.0974%" y="479.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.02%)</title><rect x="99.8474%" y="453" width="0.0218%" height="15" fill="rgb(207,35,49)" fg:x="4581" fg:w="1"/><text x="100.0974%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.8474%" y="437" width="0.0218%" height="15" fill="rgb(205,68,36)" fg:x="4581" fg:w="1"/><text x="100.0974%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.8692%" y="469" width="0.0218%" height="15" fill="rgb(245,62,40)" fg:x="4582" fg:w="1"/><text x="100.1192%" y="479.50"></text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::Parse(rocksdb::ConfigOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (141 samples, 3.07%)</title><rect x="96.8396%" y="501" width="3.0732%" height="15" fill="rgb(228,27,24)" fg:x="4443" fg:w="141"/><text x="97.0896%" y="511.50">rus..</text></g><g><title>rusk-wallet`std::__1::pair&lt;std::__1::__hash_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, void*&gt;*&gt;, bool&gt; std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::__unordered_map_hasher&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::__hash_value_type&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.07%)</title><rect x="99.8474%" y="485" width="0.0654%" height="15" fill="rgb(253,19,12)" fg:x="4581" fg:w="3"/><text x="100.0974%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.8910%" y="469" width="0.0218%" height="15" fill="rgb(232,28,20)" fg:x="4583" fg:w="1"/><text x="100.1410%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.07%)</title><rect x="99.9128%" y="485" width="0.0654%" height="15" fill="rgb(218,35,51)" fg:x="4584" fg:w="3"/><text x="100.1628%" y="495.50"></text></g><g><title>all (4,588 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(212,90,40)" fg:x="0" fg:w="4588"/><text x="0.2500%" y="815.50"></text></g><g><title>rusk-wallet`tokio::runtime::scheduler::multi_thread::MultiThread::block_on (177 samples, 3.86%)</title><rect x="96.1421%" y="789" width="3.8579%" height="15" fill="rgb(220,172,12)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="799.50">rusk..</text></g><g><title>rusk-wallet`tokio::park::thread::CachedParkThread::block_on (177 samples, 3.86%)</title><rect x="96.1421%" y="773" width="3.8579%" height="15" fill="rgb(226,159,20)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="783.50">rusk..</text></g><g><title>rusk-wallet`std::thread::local::LocalKey&lt;T&gt;::with (177 samples, 3.86%)</title><rect x="96.1421%" y="757" width="3.8579%" height="15" fill="rgb(234,205,16)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="767.50">rusk..</text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 3.86%)</title><rect x="96.1421%" y="741" width="3.8579%" height="15" fill="rgb(207,9,39)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="751.50">rusk..</text></g><g><title>rusk-wallet`rusk_wallet::exec::_{{closure}} (177 samples, 3.86%)</title><rect x="96.1421%" y="725" width="3.8579%" height="15" fill="rgb(249,143,15)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="735.50">rusk..</text></g><g><title>rusk-wallet`rusk_wallet::interactive::run_loop::_{{closure}} (177 samples, 3.86%)</title><rect x="96.1421%" y="709" width="3.8579%" height="15" fill="rgb(253,133,29)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="719.50">rusk..</text></g><g><title>rusk-wallet`&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (177 samples, 3.86%)</title><rect x="96.1421%" y="693" width="3.8579%" height="15" fill="rgb(221,187,0)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="703.50">rusk..</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::get_balance (177 samples, 3.86%)</title><rect x="96.1421%" y="677" width="3.8579%" height="15" fill="rgb(205,204,26)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="687.50">rusk..</text></g><g><title>rusk-wallet`dusk_wallet_core::imp::Wallet&lt;S,SC,PC&gt;::unspent_notes (177 samples, 3.86%)</title><rect x="96.1421%" y="661" width="3.8579%" height="15" fill="rgb(224,68,54)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="671.50">rusk..</text></g><g><title>rusk-wallet`&lt;dusk_wallet::clients::StateStore as dusk_wallet_core::StateClient&gt;::fetch_notes (177 samples, 3.86%)</title><rect x="96.1421%" y="645" width="3.8579%" height="15" fill="rgb(209,67,4)" fg:x="4411" fg:w="177"/><text x="96.3921%" y="655.50">rusk..</text></g><g><title>rusk-wallet`dusk_wallet::cache::Cache::insert (168 samples, 3.66%)</title><rect x="96.3383%" y="629" width="3.6617%" height="15" fill="rgb(228,229,18)" fg:x="4420" fg:w="168"/><text x="96.5883%" y="639.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::db::DBCommon&lt;rocksdb::db::SingleThreaded,I&gt;::create_cf (168 samples, 3.66%)</title><rect x="96.3383%" y="613" width="3.6617%" height="15" fill="rgb(231,89,13)" fg:x="4420" fg:w="168"/><text x="96.5883%" y="623.50">rusk..</text></g><g><title>rusk-wallet`rocksdb_create_column_family (168 samples, 3.66%)</title><rect x="96.3383%" y="597" width="3.6617%" height="15" fill="rgb(210,182,18)" fg:x="4420" fg:w="168"/><text x="96.5883%" y="607.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::DBImpl::CreateColumnFamily(rocksdb::ColumnFamilyOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (168 samples, 3.66%)</title><rect x="96.3383%" y="581" width="3.6617%" height="15" fill="rgb(240,105,2)" fg:x="4420" fg:w="168"/><text x="96.5883%" y="591.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::DBImpl::WriteOptionsFile (168 samples, 3.66%)</title><rect x="96.3383%" y="565" width="3.6617%" height="15" fill="rgb(207,170,50)" fg:x="4420" fg:w="168"/><text x="96.5883%" y="575.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (167 samples, 3.64%)</title><rect x="96.3601%" y="549" width="3.6399%" height="15" fill="rgb(232,133,24)" fg:x="4421" fg:w="167"/><text x="96.6101%" y="559.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::PersistRocksDBOptions(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (167 samples, 3.64%)</title><rect x="96.3601%" y="533" width="3.6399%" height="15" fill="rgb(235,166,27)" fg:x="4421" fg:w="167"/><text x="96.6101%" y="543.50">rusk..</text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::VerifyRocksDBOptionsFromFile(rocksdb::ConfigOptions const&amp;, rocksdb::DBOptions const&amp;, std::__1::vector&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::allocator&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt; const&amp;, std::__1::vector&lt;rocksdb::ColumnFamilyOptions, std::__1::allocator&lt;rocksdb::ColumnFamilyOptions&gt;&gt; const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (147 samples, 3.20%)</title><rect x="96.7960%" y="517" width="3.2040%" height="15" fill="rgb(209,19,13)" fg:x="4441" fg:w="147"/><text x="97.0460%" y="527.50">rus..</text></g><g><title>rusk-wallet`rocksdb::RocksDBOptionsParser::~RocksDBOptionsParser (4 samples, 0.09%)</title><rect x="99.9128%" y="501" width="0.0872%" height="15" fill="rgb(226,79,39)" fg:x="4584" fg:w="4"/><text x="100.1628%" y="511.50"></text></g><g><title>rusk-wallet`std::__1::vector&lt;std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::pair&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt; const, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;&gt;&gt;, std::__1::allocator&lt;std::__1::unordered_map&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::hash&lt;std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&gt;, std::__1::equal_to&lt;std::__1::basic_string (1 samples, 0.02%)</title><rect x="99.9782%" y="485" width="0.0218%" height="15" fill="rgb(222,163,10)" fg:x="4587" fg:w="1"/><text x="100.2282%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="99.9782%" y="469" width="0.0218%" height="15" fill="rgb(214,44,19)" fg:x="4587" fg:w="1"/><text x="100.2282%" y="479.50"></text></g></svg></svg>